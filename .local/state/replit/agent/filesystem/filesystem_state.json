{"file_contents":{"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/settings.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Building2, Clock, Bell, CreditCard, Link2, Shield } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface BusinessSettings {\n  id: string;\n  businessName: string | null;\n  phone: string | null;\n  email: string | null;\n  website: string | null;\n  address: string | null;\n}\n\ninterface OperatingHours {\n  id: string;\n  dayOfWeek: number;\n  isOpen: boolean;\n  openTime: string | null;\n  closeTime: string | null;\n}\n\ninterface NotificationSettings {\n  id: string;\n  emailNotifications: boolean;\n  smsNotifications: boolean;\n  appointmentReminders: boolean;\n  paymentNotifications: boolean;\n}\n\ninterface BillingSettings {\n  id: string;\n  planName: string | null;\n  planPrice: string | null;\n  billingCycle: string | null;\n  paymentMethod: string | null;\n  cardLast4: string | null;\n  cardExpiry: string | null;\n  autoRenew: boolean;\n}\n\ninterface IntegrationSettings {\n  id: string;\n  googleReviewsEnabled: boolean;\n  googleReviewsApiKey: string | null;\n  stripeEnabled: boolean;\n  stripeApiKey: string | null;\n  stripePublishableKey: string | null;\n  twilioEnabled: boolean;\n  twilioAccountSid: string | null;\n  twilioAuthToken: string | null;\n  twilioPhoneNumber: string | null;\n}\n\ninterface SecuritySettings {\n  id: string;\n  twoFactorEnabled: boolean;\n  sessionTimeout: number;\n  passwordMinLength: number;\n  requireSpecialChar: boolean;\n  requireNumbers: boolean;\n  requireUppercase: boolean;\n  loginAttemptsLimit: number;\n}\n\nconst DAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\nexport default function Settings() {\n  const { toast } = useToast();\n\n  // Business Settings\n  const { data: businessData, isLoading: businessLoading } = useQuery<BusinessSettings | null>({\n    queryKey: ['/api/settings/business'],\n  });\n\n  const [businessForm, setBusinessForm] = useState({\n    businessName: '',\n    phone: '',\n    email: '',\n    website: '',\n    address: '',\n  });\n\n  const updateBusinessMutation = useMutation({\n    mutationFn: async (data: Partial<BusinessSettings>) => {\n      return await apiRequest('PUT', '/api/settings/business', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/business'] });\n      toast({\n        title: \"Success\",\n        description: \"Business settings updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update business settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Operating Hours\n  const { data: hoursData, isLoading: hoursLoading } = useQuery<OperatingHours[]>({\n    queryKey: ['/api/settings/hours'],\n  });\n\n  const [hoursForm, setHoursForm] = useState<OperatingHours[]>([]);\n\n  const updateHoursMutation = useMutation({\n    mutationFn: async (data: Partial<OperatingHours>[]) => {\n      return await apiRequest('PUT', '/api/settings/hours', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/hours'] });\n      toast({\n        title: \"Success\",\n        description: \"Operating hours updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update operating hours\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Notification Settings\n  const { data: notificationData, isLoading: notificationLoading } = useQuery<NotificationSettings | null>({\n    queryKey: ['/api/settings/notifications'],\n  });\n\n  const [notificationForm, setNotificationForm] = useState({\n    emailNotifications: true,\n    smsNotifications: false,\n    appointmentReminders: true,\n    paymentNotifications: true,\n  });\n\n  const updateNotificationMutation = useMutation({\n    mutationFn: async (data: Partial<NotificationSettings>) => {\n      return await apiRequest('PUT', '/api/settings/notifications', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/notifications'] });\n      toast({\n        title: \"Success\",\n        description: \"Notification settings updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update notification settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Billing Settings\n  const { data: billingData, isLoading: billingLoading } = useQuery<BillingSettings | null>({\n    queryKey: ['/api/settings/billing'],\n  });\n\n  const [billingForm, setBillingForm] = useState({\n    planName: '',\n    planPrice: '',\n    billingCycle: '',\n    paymentMethod: '',\n    cardLast4: '',\n    cardExpiry: '',\n    autoRenew: true,\n  });\n\n  const updateBillingMutation = useMutation({\n    mutationFn: async (data: Partial<BillingSettings>) => {\n      return await apiRequest('PUT', '/api/settings/billing', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/billing'] });\n      toast({\n        title: \"Success\",\n        description: \"Billing settings updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update billing settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Integration Settings\n  const { data: integrationData, isLoading: integrationLoading } = useQuery<IntegrationSettings | null>({\n    queryKey: ['/api/settings/integrations'],\n  });\n\n  const [integrationForm, setIntegrationForm] = useState({\n    googleReviewsEnabled: false,\n    googleReviewsApiKey: '',\n    stripeEnabled: false,\n    stripeApiKey: '',\n    stripePublishableKey: '',\n    twilioEnabled: false,\n    twilioAccountSid: '',\n    twilioAuthToken: '',\n    twilioPhoneNumber: '',\n  });\n\n  const updateIntegrationMutation = useMutation({\n    mutationFn: async (data: Partial<IntegrationSettings>) => {\n      return await apiRequest('PUT', '/api/settings/integrations', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/integrations'] });\n      toast({\n        title: \"Success\",\n        description: \"Integration settings updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update integration settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Security Settings\n  const { data: securityData, isLoading: securityLoading } = useQuery<SecuritySettings | null>({\n    queryKey: ['/api/settings/security'],\n  });\n\n  const [securityForm, setSecurityForm] = useState({\n    twoFactorEnabled: false,\n    sessionTimeout: 30,\n    passwordMinLength: 8,\n    requireSpecialChar: true,\n    requireNumbers: true,\n    requireUppercase: true,\n    loginAttemptsLimit: 5,\n  });\n\n  const updateSecurityMutation = useMutation({\n    mutationFn: async (data: Partial<SecuritySettings>) => {\n      return await apiRequest('PUT', '/api/settings/security', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/settings/security'] });\n      toast({\n        title: \"Success\",\n        description: \"Security settings updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update security settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Sync forms with data\n  useEffect(() => {\n    if (businessData) {\n      setBusinessForm({\n        businessName: businessData.businessName ?? '',\n        phone: businessData.phone ?? '',\n        email: businessData.email ?? '',\n        website: businessData.website ?? '',\n        address: businessData.address ?? '',\n      });\n    }\n  }, [businessData]);\n\n  useEffect(() => {\n    if (hoursData) {\n      setHoursForm(hoursData);\n    }\n  }, [hoursData]);\n\n  useEffect(() => {\n    if (notificationData) {\n      setNotificationForm({\n        emailNotifications: notificationData.emailNotifications,\n        smsNotifications: notificationData.smsNotifications,\n        appointmentReminders: notificationData.appointmentReminders,\n        paymentNotifications: notificationData.paymentNotifications,\n      });\n    }\n  }, [notificationData]);\n\n  useEffect(() => {\n    if (billingData) {\n      setBillingForm({\n        planName: billingData.planName ?? '',\n        planPrice: billingData.planPrice ?? '',\n        billingCycle: billingData.billingCycle ?? '',\n        paymentMethod: billingData.paymentMethod ?? '',\n        cardLast4: billingData.cardLast4 ?? '',\n        cardExpiry: billingData.cardExpiry ?? '',\n        autoRenew: billingData.autoRenew ?? true,\n      });\n    }\n  }, [billingData]);\n\n  useEffect(() => {\n    if (integrationData) {\n      setIntegrationForm({\n        googleReviewsEnabled: integrationData.googleReviewsEnabled ?? false,\n        googleReviewsApiKey: integrationData.googleReviewsApiKey ?? '',\n        stripeEnabled: integrationData.stripeEnabled ?? false,\n        stripeApiKey: integrationData.stripeApiKey ?? '',\n        stripePublishableKey: integrationData.stripePublishableKey ?? '',\n        twilioEnabled: integrationData.twilioEnabled ?? false,\n        twilioAccountSid: integrationData.twilioAccountSid ?? '',\n        twilioAuthToken: integrationData.twilioAuthToken ?? '',\n        twilioPhoneNumber: integrationData.twilioPhoneNumber ?? '',\n      });\n    }\n  }, [integrationData]);\n\n  useEffect(() => {\n    if (securityData) {\n      setSecurityForm({\n        twoFactorEnabled: securityData.twoFactorEnabled ?? false,\n        sessionTimeout: securityData.sessionTimeout ?? 30,\n        passwordMinLength: securityData.passwordMinLength ?? 8,\n        requireSpecialChar: securityData.requireSpecialChar ?? true,\n        requireNumbers: securityData.requireNumbers ?? true,\n        requireUppercase: securityData.requireUppercase ?? true,\n        loginAttemptsLimit: securityData.loginAttemptsLimit ?? 5,\n      });\n    }\n  }, [securityData]);\n\n  // Convert empty strings to null to preserve database nullability\n  const nullifyEmptyStrings = (obj: Record<string, any>): Record<string, any> => {\n    const result: Record<string, any> = {};\n    for (const [key, value] of Object.entries(obj)) {\n      result[key] = value === '' ? null : value;\n    }\n    return result;\n  };\n\n  const handleBusinessSubmit = () => {\n    updateBusinessMutation.mutate(nullifyEmptyStrings(businessForm));\n  };\n\n  const handleHoursSubmit = () => {\n    updateHoursMutation.mutate(hoursForm);\n  };\n\n  const handleNotificationSubmit = () => {\n    updateNotificationMutation.mutate(notificationForm);\n  };\n\n  const handleBillingSubmit = () => {\n    updateBillingMutation.mutate(nullifyEmptyStrings(billingForm));\n  };\n\n  const handleIntegrationSubmit = () => {\n    updateIntegrationMutation.mutate(nullifyEmptyStrings(integrationForm));\n  };\n\n  const handleSecuritySubmit = () => {\n    updateSecurityMutation.mutate(securityForm);\n  };\n\n  const updateHour = (dayOfWeek: number, field: string, value: any) => {\n    setHoursForm((prev) =>\n      prev.map((hour) =>\n        hour.dayOfWeek === dayOfWeek ? { ...hour, [field]: value } : hour\n      )\n    );\n  };\n\n  const getHourValue = (hour: OperatingHours, field: 'openTime' | 'closeTime') => {\n    const value = hour[field];\n    return value === null ? '' : value;\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-settings\">Settings</h1>\n            <p className=\"text-muted-foreground\">Manage your garage management system preferences</p>\n          </div>\n\n          <Tabs defaultValue=\"general\" className=\"space-y-6\">\n            <TabsList>\n              <TabsTrigger value=\"general\" data-testid=\"tab-general\">General</TabsTrigger>\n              <TabsTrigger value=\"notifications\" data-testid=\"tab-notifications\">Notifications</TabsTrigger>\n              <TabsTrigger value=\"billing\" data-testid=\"tab-billing\">Billing</TabsTrigger>\n              <TabsTrigger value=\"integrations\" data-testid=\"tab-integrations\">Integrations</TabsTrigger>\n              <TabsTrigger value=\"security\" data-testid=\"tab-security\">Security</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"general\">\n              <div className=\"grid gap-6\">\n                {/* Business Information */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building2 className=\"w-5 h-5\" />\n                      Business Information\n                    </CardTitle>\n                    <CardDescription>Update your garage's basic information</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {businessLoading ? (\n                      <div className=\"space-y-4\">\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-10 w-full\" />\n                        <Skeleton className=\"h-20 w-full\" />\n                      </div>\n                    ) : (\n                      <>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"business-name\">Business Name</Label>\n                            <Input\n                              id=\"business-name\"\n                              value={businessForm.businessName}\n                              onChange={(e) => setBusinessForm({ ...businessForm, businessName: e.target.value })}\n                              placeholder=\"AutoFlow Garage\"\n                              data-testid=\"input-business-name\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"phone\">Phone Number</Label>\n                            <Input\n                              id=\"phone\"\n                              value={businessForm.phone}\n                              onChange={(e) => setBusinessForm({ ...businessForm, phone: e.target.value })}\n                              placeholder=\"(555) 123-4567\"\n                              data-testid=\"input-phone\"\n                            />\n                          </div>\n                        </div>\n                        <div>\n                          <Label htmlFor=\"address\">Address</Label>\n                          <Textarea\n                            id=\"address\"\n                            value={businessForm.address}\n                            onChange={(e) => setBusinessForm({ ...businessForm, address: e.target.value })}\n                            placeholder=\"123 Main St, City, State 12345\"\n                            data-testid=\"textarea-address\"\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <Label htmlFor=\"email\">Business Email</Label>\n                            <Input\n                              id=\"email\"\n                              type=\"email\"\n                              value={businessForm.email}\n                              onChange={(e) => setBusinessForm({ ...businessForm, email: e.target.value })}\n                              placeholder=\"info@autoflowgarage.com\"\n                              data-testid=\"input-email\"\n                            />\n                          </div>\n                          <div>\n                            <Label htmlFor=\"website\">Website</Label>\n                            <Input\n                              id=\"website\"\n                              value={businessForm.website}\n                              onChange={(e) => setBusinessForm({ ...businessForm, website: e.target.value })}\n                              placeholder=\"www.autoflowgarage.com\"\n                              data-testid=\"input-website\"\n                            />\n                          </div>\n                        </div>\n                        <Button\n                          onClick={handleBusinessSubmit}\n                          disabled={businessLoading || updateBusinessMutation.isPending}\n                          data-testid=\"button-save-business\"\n                        >\n                          {updateBusinessMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                        </Button>\n                      </>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Operating Hours */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Clock className=\"w-5 h-5\" />\n                      Operating Hours\n                    </CardTitle>\n                    <CardDescription>Set your business hours for appointments</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    {hoursLoading ? (\n                      <div className=\"space-y-4\">\n                        {[1, 2, 3, 4, 5].map((i) => (\n                          <Skeleton key={i} className=\"h-10 w-full\" />\n                        ))}\n                      </div>\n                    ) : (\n                      <>\n                        <div className=\"space-y-4\">\n                          {hoursForm.map((hour) => (\n                            <div key={hour.dayOfWeek} className=\"flex items-center gap-4\">\n                              <div className=\"w-24\">\n                                <span className=\"text-sm font-medium\">{DAYS[hour.dayOfWeek]}</span>\n                              </div>\n                              <Switch\n                                checked={hour.isOpen}\n                                onCheckedChange={(checked) => updateHour(hour.dayOfWeek, 'isOpen', checked)}\n                                data-testid={`switch-${DAYS[hour.dayOfWeek].toLowerCase()}`}\n                              />\n                              <Input\n                                type=\"time\"\n                                value={getHourValue(hour, 'openTime')}\n                                onChange={(e) => updateHour(hour.dayOfWeek, 'openTime', e.target.value || null)}\n                                className=\"w-32\"\n                                disabled={!hour.isOpen}\n                                placeholder=\"08:00\"\n                                data-testid={`input-open-${DAYS[hour.dayOfWeek].toLowerCase()}`}\n                              />\n                              <span className=\"text-muted-foreground\">to</span>\n                              <Input\n                                type=\"time\"\n                                value={getHourValue(hour, 'closeTime')}\n                                onChange={(e) => updateHour(hour.dayOfWeek, 'closeTime', e.target.value || null)}\n                                className=\"w-32\"\n                                disabled={!hour.isOpen}\n                                placeholder=\"18:00\"\n                                data-testid={`input-close-${DAYS[hour.dayOfWeek].toLowerCase()}`}\n                              />\n                            </div>\n                          ))}\n                        </div>\n                        <Button\n                          className=\"mt-4\"\n                          onClick={handleHoursSubmit}\n                          disabled={hoursLoading || updateHoursMutation.isPending}\n                          data-testid=\"button-save-hours\"\n                        >\n                          {updateHoursMutation.isPending ? \"Saving...\" : \"Save Hours\"}\n                        </Button>\n                      </>\n                    )}\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"notifications\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Bell className=\"w-5 h-5\" />\n                    Notification Preferences\n                  </CardTitle>\n                  <CardDescription>Choose how you want to be notified</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {notificationLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3, 4].map((i) => (\n                        <Skeleton key={i} className=\"h-16 w-full\" />\n                      ))}\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Email Notifications</h4>\n                          <p className=\"text-sm text-muted-foreground\">Receive notifications via email</p>\n                        </div>\n                        <Switch\n                          checked={notificationForm.emailNotifications}\n                          onCheckedChange={(checked) =>\n                            setNotificationForm({ ...notificationForm, emailNotifications: checked })\n                          }\n                          data-testid=\"switch-email-notifications\"\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">SMS Notifications</h4>\n                          <p className=\"text-sm text-muted-foreground\">Receive urgent notifications via SMS</p>\n                        </div>\n                        <Switch\n                          checked={notificationForm.smsNotifications}\n                          onCheckedChange={(checked) =>\n                            setNotificationForm({ ...notificationForm, smsNotifications: checked })\n                          }\n                          data-testid=\"switch-sms-notifications\"\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Appointment Reminders</h4>\n                          <p className=\"text-sm text-muted-foreground\">Send appointment reminders to customers</p>\n                        </div>\n                        <Switch\n                          checked={notificationForm.appointmentReminders}\n                          onCheckedChange={(checked) =>\n                            setNotificationForm({ ...notificationForm, appointmentReminders: checked })\n                          }\n                          data-testid=\"switch-appointment-reminders\"\n                        />\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Payment Notifications</h4>\n                          <p className=\"text-sm text-muted-foreground\">Notify about payment status changes</p>\n                        </div>\n                        <Switch\n                          checked={notificationForm.paymentNotifications}\n                          onCheckedChange={(checked) =>\n                            setNotificationForm({ ...notificationForm, paymentNotifications: checked })\n                          }\n                          data-testid=\"switch-payment-notifications\"\n                        />\n                      </div>\n                      <Button\n                        onClick={handleNotificationSubmit}\n                        disabled={notificationLoading || updateNotificationMutation.isPending}\n                        data-testid=\"button-save-notifications\"\n                      >\n                        {updateNotificationMutation.isPending ? \"Saving...\" : \"Save Preferences\"}\n                      </Button>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"billing\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"w-5 h-5\" />\n                    Billing & Subscription\n                  </CardTitle>\n                  <CardDescription>Manage your subscription and billing information</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {billingLoading ? (\n                    <div className=\"space-y-4\">\n                      <Skeleton className=\"h-32 w-full\" />\n                      <Skeleton className=\"h-20 w-full\" />\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"plan-name\">Plan Name</Label>\n                          <Input\n                            id=\"plan-name\"\n                            value={billingForm.planName}\n                            onChange={(e) => setBillingForm({ ...billingForm, planName: e.target.value })}\n                            placeholder=\"Professional Plan\"\n                            data-testid=\"input-plan-name\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"plan-price\">Plan Price</Label>\n                          <Input\n                            id=\"plan-price\"\n                            value={billingForm.planPrice}\n                            onChange={(e) => setBillingForm({ ...billingForm, planPrice: e.target.value })}\n                            placeholder=\"$99\"\n                            data-testid=\"input-plan-price\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"billing-cycle\">Billing Cycle</Label>\n                          <Input\n                            id=\"billing-cycle\"\n                            value={billingForm.billingCycle}\n                            onChange={(e) => setBillingForm({ ...billingForm, billingCycle: e.target.value })}\n                            placeholder=\"monthly\"\n                            data-testid=\"input-billing-cycle\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"payment-method\">Payment Method</Label>\n                          <Input\n                            id=\"payment-method\"\n                            value={billingForm.paymentMethod}\n                            onChange={(e) => setBillingForm({ ...billingForm, paymentMethod: e.target.value })}\n                            placeholder=\"Credit Card\"\n                            data-testid=\"input-payment-method\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"card-last4\">Card Last 4 Digits</Label>\n                          <Input\n                            id=\"card-last4\"\n                            value={billingForm.cardLast4}\n                            onChange={(e) => setBillingForm({ ...billingForm, cardLast4: e.target.value })}\n                            placeholder=\"1234\"\n                            maxLength={4}\n                            data-testid=\"input-card-last4\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"card-expiry\">Card Expiry</Label>\n                          <Input\n                            id=\"card-expiry\"\n                            value={billingForm.cardExpiry}\n                            onChange={(e) => setBillingForm({ ...billingForm, cardExpiry: e.target.value })}\n                            placeholder=\"12/26\"\n                            data-testid=\"input-card-expiry\"\n                          />\n                        </div>\n                      </div>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Auto Renew</h4>\n                          <p className=\"text-sm text-muted-foreground\">Automatically renew subscription</p>\n                        </div>\n                        <Switch\n                          checked={billingForm.autoRenew}\n                          onCheckedChange={(checked) =>\n                            setBillingForm({ ...billingForm, autoRenew: checked })\n                          }\n                          data-testid=\"switch-auto-renew\"\n                        />\n                      </div>\n                      <Button\n                        onClick={handleBillingSubmit}\n                        disabled={billingLoading || updateBillingMutation.isPending}\n                        data-testid=\"button-save-billing\"\n                      >\n                        {updateBillingMutation.isPending ? \"Saving...\" : \"Save Billing Settings\"}\n                      </Button>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"integrations\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Link2 className=\"w-5 h-5\" />\n                    Integrations\n                  </CardTitle>\n                  <CardDescription>Connect with external services</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {integrationLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3].map((i) => (\n                        <Skeleton key={i} className=\"h-24 w-full\" />\n                      ))}\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"space-y-4\">\n                        <div className=\"p-4 border border-border rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div>\n                              <h4 className=\"font-medium\">Google Reviews</h4>\n                              <p className=\"text-sm text-muted-foreground\">Sync customer reviews</p>\n                            </div>\n                            <Switch\n                              checked={integrationForm.googleReviewsEnabled}\n                              onCheckedChange={(checked) =>\n                                setIntegrationForm({ ...integrationForm, googleReviewsEnabled: checked })\n                              }\n                              data-testid=\"switch-google-reviews\"\n                            />\n                          </div>\n                          {integrationForm.googleReviewsEnabled && (\n                            <div>\n                              <Label htmlFor=\"google-api-key\">API Key</Label>\n                              <Input\n                                id=\"google-api-key\"\n                                type=\"password\"\n                                value={integrationForm.googleReviewsApiKey}\n                                onChange={(e) =>\n                                  setIntegrationForm({ ...integrationForm, googleReviewsApiKey: e.target.value })\n                                }\n                                placeholder=\"Enter Google API Key\"\n                                data-testid=\"input-google-api-key\"\n                              />\n                            </div>\n                          )}\n                        </div>\n\n                        <div className=\"p-4 border border-border rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div>\n                              <h4 className=\"font-medium\">Stripe Payments</h4>\n                              <p className=\"text-sm text-muted-foreground\">Process online payments</p>\n                            </div>\n                            <Switch\n                              checked={integrationForm.stripeEnabled}\n                              onCheckedChange={(checked) =>\n                                setIntegrationForm({ ...integrationForm, stripeEnabled: checked })\n                              }\n                              data-testid=\"switch-stripe\"\n                            />\n                          </div>\n                          {integrationForm.stripeEnabled && (\n                            <div className=\"space-y-3\">\n                              <div>\n                                <Label htmlFor=\"stripe-api-key\">Secret API Key</Label>\n                                <Input\n                                  id=\"stripe-api-key\"\n                                  type=\"password\"\n                                  value={integrationForm.stripeApiKey}\n                                  onChange={(e) =>\n                                    setIntegrationForm({ ...integrationForm, stripeApiKey: e.target.value })\n                                  }\n                                  placeholder=\"sk_test_...\"\n                                  data-testid=\"input-stripe-api-key\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"stripe-publishable-key\">Publishable Key</Label>\n                                <Input\n                                  id=\"stripe-publishable-key\"\n                                  value={integrationForm.stripePublishableKey}\n                                  onChange={(e) =>\n                                    setIntegrationForm({ ...integrationForm, stripePublishableKey: e.target.value })\n                                  }\n                                  placeholder=\"pk_test_...\"\n                                  data-testid=\"input-stripe-publishable-key\"\n                                />\n                              </div>\n                            </div>\n                          )}\n                        </div>\n\n                        <div className=\"p-4 border border-border rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-4\">\n                            <div>\n                              <h4 className=\"font-medium\">Twilio SMS</h4>\n                              <p className=\"text-sm text-muted-foreground\">Send SMS notifications</p>\n                            </div>\n                            <Switch\n                              checked={integrationForm.twilioEnabled}\n                              onCheckedChange={(checked) =>\n                                setIntegrationForm({ ...integrationForm, twilioEnabled: checked })\n                              }\n                              data-testid=\"switch-twilio\"\n                            />\n                          </div>\n                          {integrationForm.twilioEnabled && (\n                            <div className=\"space-y-3\">\n                              <div>\n                                <Label htmlFor=\"twilio-account-sid\">Account SID</Label>\n                                <Input\n                                  id=\"twilio-account-sid\"\n                                  value={integrationForm.twilioAccountSid}\n                                  onChange={(e) =>\n                                    setIntegrationForm({ ...integrationForm, twilioAccountSid: e.target.value })\n                                  }\n                                  placeholder=\"AC...\"\n                                  data-testid=\"input-twilio-account-sid\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"twilio-auth-token\">Auth Token</Label>\n                                <Input\n                                  id=\"twilio-auth-token\"\n                                  type=\"password\"\n                                  value={integrationForm.twilioAuthToken}\n                                  onChange={(e) =>\n                                    setIntegrationForm({ ...integrationForm, twilioAuthToken: e.target.value })\n                                  }\n                                  placeholder=\"Enter Auth Token\"\n                                  data-testid=\"input-twilio-auth-token\"\n                                />\n                              </div>\n                              <div>\n                                <Label htmlFor=\"twilio-phone-number\">Phone Number</Label>\n                                <Input\n                                  id=\"twilio-phone-number\"\n                                  value={integrationForm.twilioPhoneNumber}\n                                  onChange={(e) =>\n                                    setIntegrationForm({ ...integrationForm, twilioPhoneNumber: e.target.value })\n                                  }\n                                  placeholder=\"+1234567890\"\n                                  data-testid=\"input-twilio-phone-number\"\n                                />\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                      <Button\n                        onClick={handleIntegrationSubmit}\n                        disabled={integrationLoading || updateIntegrationMutation.isPending}\n                        data-testid=\"button-save-integrations\"\n                      >\n                        {updateIntegrationMutation.isPending ? \"Saving...\" : \"Save Integrations\"}\n                      </Button>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"security\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Shield className=\"w-5 h-5\" />\n                    Security Settings\n                  </CardTitle>\n                  <CardDescription>Manage your account security</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  {securityLoading ? (\n                    <div className=\"space-y-4\">\n                      {[1, 2, 3, 4].map((i) => (\n                        <Skeleton key={i} className=\"h-16 w-full\" />\n                      ))}\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-medium\">Two-Factor Authentication</h4>\n                          <p className=\"text-sm text-muted-foreground\">Add an extra layer of security</p>\n                        </div>\n                        <Switch\n                          checked={securityForm.twoFactorEnabled}\n                          onCheckedChange={(checked) =>\n                            setSecurityForm({ ...securityForm, twoFactorEnabled: checked })\n                          }\n                          data-testid=\"switch-2fa\"\n                        />\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"session-timeout\">Session Timeout (minutes)</Label>\n                          <Input\n                            id=\"session-timeout\"\n                            type=\"number\"\n                            value={securityForm.sessionTimeout}\n                            onChange={(e) =>\n                              setSecurityForm({ ...securityForm, sessionTimeout: parseInt(e.target.value) || 30 })\n                            }\n                            data-testid=\"input-session-timeout\"\n                          />\n                        </div>\n                        <div>\n                          <Label htmlFor=\"password-min-length\">Password Min Length</Label>\n                          <Input\n                            id=\"password-min-length\"\n                            type=\"number\"\n                            value={securityForm.passwordMinLength}\n                            onChange={(e) =>\n                              setSecurityForm({ ...securityForm, passwordMinLength: parseInt(e.target.value) || 8 })\n                            }\n                            data-testid=\"input-password-min-length\"\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">Require Special Characters</h4>\n                            <p className=\"text-sm text-muted-foreground\">Password must contain special characters</p>\n                          </div>\n                          <Switch\n                            checked={securityForm.requireSpecialChar}\n                            onCheckedChange={(checked) =>\n                              setSecurityForm({ ...securityForm, requireSpecialChar: checked })\n                            }\n                            data-testid=\"switch-require-special-char\"\n                          />\n                        </div>\n\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">Require Numbers</h4>\n                            <p className=\"text-sm text-muted-foreground\">Password must contain numbers</p>\n                          </div>\n                          <Switch\n                            checked={securityForm.requireNumbers}\n                            onCheckedChange={(checked) =>\n                              setSecurityForm({ ...securityForm, requireNumbers: checked })\n                            }\n                            data-testid=\"switch-require-numbers\"\n                          />\n                        </div>\n\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <h4 className=\"font-medium\">Require Uppercase</h4>\n                            <p className=\"text-sm text-muted-foreground\">Password must contain uppercase letters</p>\n                          </div>\n                          <Switch\n                            checked={securityForm.requireUppercase}\n                            onCheckedChange={(checked) =>\n                              setSecurityForm({ ...securityForm, requireUppercase: checked })\n                            }\n                            data-testid=\"switch-require-uppercase\"\n                          />\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"login-attempts-limit\">Login Attempts Limit</Label>\n                          <Input\n                            id=\"login-attempts-limit\"\n                            type=\"number\"\n                            value={securityForm.loginAttemptsLimit}\n                            onChange={(e) =>\n                              setSecurityForm({ ...securityForm, loginAttemptsLimit: parseInt(e.target.value) || 5 })\n                            }\n                            data-testid=\"input-login-attempts-limit\"\n                          />\n                        </div>\n                      </div>\n\n                      <Button\n                        onClick={handleSecuritySubmit}\n                        disabled={securityLoading || updateSecurityMutation.isPending}\n                        data-testid=\"button-save-security\"\n                      >\n                        {updateSecurityMutation.isPending ? \"Saving...\" : \"Save Security Settings\"}\n                      </Button>\n                    </>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":45486},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport ProtectedRoute from \"@/components/ProtectedRoute\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Customers from \"@/pages/customers\";\nimport Appointments from \"@/pages/appointments\";\nimport RepairOrders from \"@/pages/repair-orders\";\nimport CustomerPortal from \"@/pages/customer-portal\";\nimport Inspections from \"@/pages/inspections\";\nimport JobBoard from \"@/pages/job-board\";\nimport Messaging from \"@/pages/messaging\";\nimport Reviews from \"@/pages/reviews\";\nimport Invoices from \"@/pages/invoices\";\nimport Inventory from \"@/pages/inventory\";\nimport Reporting from \"@/pages/reporting\";\nimport Settings from \"@/pages/settings\";\nimport Users from \"@/pages/users\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/\">\n        {isLoading || !isAuthenticated ? <Landing /> : <Dashboard />}\n      </Route>\n      <Route path=\"/customers\">\n        <ProtectedRoute path=\"/customers\">\n          <Customers />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/appointments\">\n        <ProtectedRoute path=\"/appointments\">\n          <Appointments />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/repair-orders\">\n        <ProtectedRoute path=\"/repair-orders\">\n          <RepairOrders />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/customer-portal\">\n        <ProtectedRoute path=\"/customer-portal\">\n          <CustomerPortal />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/inspections\">\n        <ProtectedRoute path=\"/inspections\">\n          <Inspections />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/job-board\">\n        <ProtectedRoute path=\"/job-board\">\n          <JobBoard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/messaging\">\n        <ProtectedRoute path=\"/messaging\">\n          <Messaging />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/reviews\">\n        <ProtectedRoute path=\"/reviews\">\n          <Reviews />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/invoices\">\n        <ProtectedRoute path=\"/invoices\">\n          <Invoices />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/inventory\">\n        <ProtectedRoute path=\"/inventory\">\n          <Inventory />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/reporting\">\n        <ProtectedRoute path=\"/reporting\">\n          <Reporting />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/users\">\n        <ProtectedRoute path=\"/users\">\n          <Users />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute path=\"/settings\">\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3376},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role: 'admin' | 'user' | 'client';\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":414},"server/rbacMiddleware.ts":{"content":"import type { RequestHandler } from \"express\";\n\nexport type UserRole = 'admin' | 'user' | 'client';\n\n// Role-based authorization middleware\nexport const requireRole = (allowedRoles: UserRole[]): RequestHandler => {\n  return (req: any, res, next) => {\n    // Check if user is authenticated first\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const userRole = req.user?.role as UserRole;\n    \n    // Check if user has required role\n    if (!allowedRoles.includes(userRole)) {\n      return res.status(403).json({ \n        message: \"Access denied\",\n        requiredRoles: allowedRoles,\n        userRole: userRole\n      });\n    }\n\n    next();\n  };\n};\n\n// Admin only access\nexport const adminOnly = requireRole(['admin']);\n\n// Technician and admin access\nexport const technicianOrAdmin = requireRole(['admin', 'user']);\n\n// Client access (and admin for management)\nexport const clientOrAdmin = requireRole(['client', 'admin']);\n\n// All authenticated users\nexport const authenticatedOnly = requireRole(['admin', 'user', 'client']);\n\n// Data filtering middleware for role-based data access\nexport const filterDataByRole: RequestHandler = (req: any, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const userRole = req.user?.role as UserRole;\n  const userId = req.user?.id;\n\n  // Attach role-based filtering context to request\n  req.roleContext = {\n    role: userRole,\n    userId: userId,\n    canAccessAll: userRole === 'admin',\n    canAccessAssigned: userRole === 'user' || userRole === 'admin',\n    canAccessOwn: true\n  };\n\n  next();\n};\n\n// Helper to get customer ID for client users\nexport const getCustomerIdForUser = async (userId: string, storage: any): Promise<string | null> => {\n  try {\n    const user = await storage.getUser(userId);\n    if (user?.role === 'client') {\n      // Look up customer record by user_id to get proper customer ID\n      const customers = await storage.getCustomers();\n      const customer = customers.find((c: any) => c.userId === userId);\n      return customer?.id || null;\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error getting customer ID for user:\", error);\n    return null;\n  }\n};\n\n// Middleware to ensure clients can only access their own data\nexport const ensureOwnership = (resourceType: 'customer' | 'vehicle' | 'appointment' | 'repair_order' | 'invoice'): RequestHandler => {\n  return async (req: any, res, next) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const userRole = req.user?.role as UserRole;\n    const userId = req.user?.id;\n\n    // Admins can access everything\n    if (userRole === 'admin') {\n      return next();\n    }\n\n    // For clients, ensure they're only accessing their own data\n    if (userRole === 'client') {\n      const resourceId = req.params.id;\n      if (!resourceId) {\n        return res.status(400).json({ message: \"Resource ID required\" });\n      }\n\n      // Store resource ownership check context for storage layer\n      req.ownershipContext = {\n        resourceType,\n        resourceId,\n        userId,\n        userRole\n      };\n    }\n\n    // For technicians, they can access assigned work (handled in storage layer)\n    if (userRole === 'user') {\n      req.technicianContext = {\n        technicianId: userId,\n        resourceType,\n        resourceId: req.params.id\n      };\n    }\n\n    next();\n  };\n};\n\n// Factory function to create middleware that validates client ownership for create/update operations\nexport const createClientOwnershipMiddleware = (storage: any): RequestHandler => {\n  return async (req: any, res, next) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    const userRole = req.user?.role as UserRole;\n    \n    // Skip validation for admins\n    if (userRole === 'admin') {\n      return next();\n    }\n    \n    // For clients, ensure they can only create/update their own data\n    if (userRole === 'client') {\n      try {\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer) {\n          return res.status(404).json({ message: \"Customer profile not found\" });\n        }\n        \n        // Check if the request body contains customerId and validate ownership\n        const { customerId, vehicleId } = req.body;\n        \n        if (customerId && customerId !== customer.id) {\n          return res.status(403).json({ message: \"Access denied - you can only access your own data\" });\n        }\n        \n        // If vehicleId is provided, ensure it belongs to the client's customer\n        if (vehicleId) {\n          const vehicle = await storage.getVehicle(vehicleId);\n          if (!vehicle || vehicle.customerId !== customer.id) {\n            return res.status(403).json({ message: \"Access denied - vehicle does not belong to you\" });\n          }\n        }\n        \n        // Attach customer context for use in route handlers\n        req.clientCustomer = customer;\n      } catch (error) {\n        console.error(\"Error validating client ownership:\", error);\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n    }\n    \n    next();\n  };\n};","size_bytes":5285},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ProtectedRoute.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { hasAccess, type UserRole, getRoleDisplayName } from \"@/utils/roleAccess\";\nimport { useLocation } from \"wouter\";\nimport { useEffect, useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  path: string;\n}\n\nexport default function ProtectedRoute({ children, path }: ProtectedRouteProps) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [location, setLocation] = useLocation();\n  const [showAccessDenied, setShowAccessDenied] = useState(false);\n  \n  const userRole = (user?.role as UserRole) || 'user';\n  const hasPermission = hasAccess(userRole, path);\n\n  useEffect(() => {\n    // Don't do anything while still loading auth\n    if (isLoading) {\n      return;\n    }\n\n    // If user is not authenticated, redirect to home (landing page)\n    if (!isAuthenticated) {\n      setLocation(\"/\");\n      return;\n    }\n    \n    // If user doesn't have permission, show access denied briefly then redirect\n    if (!hasPermission) {\n      setShowAccessDenied(true);\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 2000); // Show message for 2 seconds before redirect\n    }\n  }, [hasPermission, isAuthenticated, isLoading, setLocation]);\n\n  // Show loading while auth is being determined\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-pulse\">\n            <div className=\"h-8 bg-muted rounded w-48 mb-4 mx-auto\"></div>\n            <div className=\"h-4 bg-muted rounded w-32 mx-auto\"></div>\n          </div>\n          <p className=\"mt-4 text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // If user is not authenticated, don't render anything (redirect in useEffect)\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  // If user doesn't have access, show access denied message\n  if (!hasPermission) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <div className=\"flex justify-center mb-4\">\n              <AlertCircle className=\"h-12 w-12 text-destructive\" />\n            </div>\n            <CardTitle className=\"text-destructive\">Access Denied</CardTitle>\n            <CardDescription>\n              You don't have permission to access this page.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"text-center\">\n            <div className=\"mb-4\">\n              <p className=\"text-sm text-muted-foreground mb-2\">\n                Your role: <span className=\"font-medium\">{getRoleDisplayName(userRole)}</span>\n              </p>\n              <p className=\"text-sm text-muted-foreground\">\n                This page requires different permissions.\n              </p>\n            </div>\n            <div className=\"space-y-2\">\n              <Button \n                onClick={() => setLocation(\"/\")}\n                className=\"w-full\"\n                data-testid=\"button-back-to-dashboard\"\n              >\n                Back to Dashboard\n              </Button>\n              <p className=\"text-xs text-muted-foreground\">\n                Redirecting automatically in a few seconds...\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}","size_bytes":3662},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { getMenuItemsForRole, sections, getRoleDisplayName, type UserRole } from \"@/utils/roleAccess\";\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user } = useAuth();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      toast({ title: \"Success\", description: \"Logged out successfully!\" });\n      window.location.href = \"/\";\n    },\n    onError: (error: any) => {\n      toast({ \n        title: \"Logout Failed\", \n        description: error.message || \"Failed to logout\",\n        variant: \"destructive\" \n      });\n    },\n  });\n\n  // Get user role and filter menu items accordingly\n  const userRole = (user?.role as UserRole) || 'user';\n  const allowedMenuItems = getMenuItemsForRole(userRole);\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && location === \"/\") return true;\n    if (path !== \"/\" && location.startsWith(path)) return true;\n    return false;\n  };\n\n  return (\n    <aside className={`${isCollapsed ? 'w-16' : 'w-64'} bg-card border-r border-border flex flex-col transition-all duration-300`}>\n      {/* Logo and Brand */}\n      <div className=\"p-6 border-b border-border\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-car text-primary-foreground text-lg\"></i>\n          </div>\n          {!isCollapsed && (\n            <div>\n              <h1 className=\"text-xl font-bold text-foreground\">AutoFlow GMS</h1>\n              <p className=\"text-sm text-muted-foreground\">Garage Management</p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Collapse Toggle */}\n      <div className=\"px-4 py-2 border-b border-border\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsCollapsed(!isCollapsed)}\n          className=\"w-full justify-start\"\n          data-testid=\"button-toggle-sidebar\"\n        >\n          <i className={`fas ${isCollapsed ? 'fa-chevron-right' : 'fa-chevron-left'}`}></i>\n          {!isCollapsed && <span className=\"ml-2\">Collapse</span>}\n        </Button>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2 overflow-y-auto\">\n        <TooltipProvider>\n          {/* Menu Sections */}\n          {Object.entries(sections).map(([sectionKey, sectionTitle]) => {\n            // Get items for this section\n            const sectionItems = allowedMenuItems.filter(item => item.section === sectionKey);\n            \n            // Only render section if it has items\n            if (sectionItems.length === 0) return null;\n            \n            return (\n              <div key={sectionKey}>\n                {!isCollapsed && sectionKey !== 'main' && (\n                  <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wide mb-2 mt-6\">\n                    {sectionTitle}\n                  </h3>\n                )}\n                <div className=\"space-y-1\">\n                  {sectionItems.map((item) => (\n                    <Tooltip key={item.path} delayDuration={300}>\n                      <TooltipTrigger asChild>\n                        <Link href={item.path}>\n                          <div \n                            className={`px-3 py-2 rounded-md cursor-pointer transition-colors flex items-center gap-3 ${\n                              isActive(item.path)\n                                ? \"bg-primary text-primary-foreground\"\n                                : \"hover:bg-accent text-accent-foreground\"\n                            }`}\n                            data-testid={`nav-${item.path.replace('/', '') || 'home'}`}\n                          >\n                            <i className={`${item.icon} w-5 flex-shrink-0`}></i>\n                            {!isCollapsed && (\n                              <div className=\"flex-1 min-w-0\">\n                                <span className=\"block truncate\">{item.title}</span>\n                                {item.description && (\n                                  <span className=\"text-xs opacity-70 block truncate\">\n                                    {item.description}\n                                  </span>\n                                )}\n                              </div>\n                            )}\n                            {isActive(item.path) && (\n                              <div className=\"w-1 h-1 rounded-full bg-current flex-shrink-0\" />\n                            )}\n                          </div>\n                        </Link>\n                      </TooltipTrigger>\n                      <TooltipContent side=\"right\" className=\"max-w-xs\">\n                        <div className=\"text-sm\">\n                          <div className=\"font-semibold\">{item.title}</div>\n                          {item.description && (\n                            <div className=\"text-muted-foreground mt-1\">\n                              {item.description}\n                            </div>\n                          )}\n                        </div>\n                      </TooltipContent>\n                    </Tooltip>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n        </TooltipProvider>\n      </nav>\n\n      {/* User Profile */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex items-center gap-3 p-2\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            {user?.firstName && user?.lastName ? (\n              <span className=\"text-primary-foreground text-sm font-semibold\">\n                {user.firstName?.[0]}{user.lastName?.[0]}\n              </span>\n            ) : (\n              <i className=\"fas fa-user text-primary-foreground text-sm\"></i>\n            )}\n          </div>\n          {!isCollapsed && (\n            <>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium truncate\">\n                  {user?.firstName && user?.lastName \n                    ? `${user.firstName} ${user.lastName}`\n                    : user?.email || \"User\"\n                  }\n                </p>\n                <p className=\"text-xs text-muted-foreground\">{getRoleDisplayName(userRole)}</p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                data-testid=\"button-logout\"\n              >\n                <i className=\"fas fa-sign-out-alt text-muted-foreground text-sm\"></i>\n              </Button>\n            </>\n          )}\n        </div>\n        {isCollapsed && (\n          <div className=\"mt-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"w-full\"\n              data-testid=\"button-logout-collapsed\"\n            >\n              <i className=\"fas fa-sign-out-alt text-muted-foreground\"></i>\n            </Button>\n          </div>\n        )}\n      </div>\n    </aside>\n  );\n}\n","size_bytes":7810},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/system-health.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\n\nexport default function SystemHealth() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: healthRecords, isLoading } = useQuery({\n    queryKey: [\"/api/system/health\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const recordHealthMutation = useMutation({\n    mutationFn: async (healthData: { component: string; status: string; responseTime?: number; details?: any }) => {\n      return await apiRequest(\"POST\", \"/api/system/health\", healthData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/system/health\"] });\n      toast({\n        title: \"Health Check Complete\",\n        description: \"System health check recorded successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Health Check Failed\",\n        description: \"Failed to record system health status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const runHealthCheck = () => {\n    const startTime = Date.now();\n    \n    // Simulate health checks for different components\n    const components = [\n      { name: \"Database\", status: \"healthy\", details: { connection: \"active\", queries: \"responsive\" } },\n      { name: \"Authentication\", status: \"healthy\", details: { service: \"replit-auth\", sessions: \"active\" } },\n      { name: \"API Server\", status: \"healthy\", details: { uptime: \"99.9%\", memory: \"normal\" } },\n      { name: \"Storage\", status: \"healthy\", details: { disk: \"85%\", backup: \"current\" } },\n    ];\n\n    components.forEach((component, index) => {\n      setTimeout(() => {\n        const responseTime = Date.now() - startTime + (index * 100);\n        recordHealthMutation.mutate({\n          component: component.name,\n          status: component.status,\n          responseTime,\n          details: component.details,\n        });\n      }, index * 200);\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status?.toLowerCase()) {\n      case \"healthy\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"warning\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"error\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  // Get latest status for each component\n  const latestHealthByComponent = Array.isArray(healthRecords) ? healthRecords.reduce((acc: any, record: any) => {\n    if (!acc[record.component] || new Date(record.checkedAt) > new Date(acc[record.component].checkedAt)) {\n      acc[record.component] = record;\n    }\n    return acc;\n  }, {}) : {};\n\n  const systemComponents = [\n    { name: \"Database\", icon: \"fas fa-database\", expectedStatus: \"healthy\" },\n    { name: \"Authentication\", icon: \"fas fa-shield-alt\", expectedStatus: \"healthy\" },\n    { name: \"API Server\", icon: \"fas fa-server\", expectedStatus: \"healthy\" },\n    { name: \"Storage\", icon: \"fas fa-hdd\", expectedStatus: \"healthy\" },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n      {systemComponents.map((component) => {\n        const healthRecord = latestHealthByComponent[component.name];\n        const status = healthRecord?.status || \"unknown\";\n        const responseTime = healthRecord?.responseTime;\n        const lastChecked = healthRecord?.checkedAt;\n\n        return (\n          <Card key={component.name}>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">{component.name}</p>\n                  <Badge className={getStatusColor(status)}>\n                    {status === \"unknown\" ? \"Checking...\" : status}\n                  </Badge>\n                  {responseTime && (\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      Response: {responseTime}ms\n                    </p>\n                  )}\n                  {lastChecked && (\n                    <p className=\"text-xs text-muted-foreground\">\n                      Last: {new Date(lastChecked).toLocaleTimeString()}\n                    </p>\n                  )}\n                </div>\n                <div className={`w-12 h-12 rounded-lg flex items-center justify-center ${\n                  status === \"healthy\" ? \"bg-green-100\" : \n                  status === \"warning\" ? \"bg-orange-100\" : \n                  status === \"error\" ? \"bg-red-100\" : \"bg-gray-100\"\n                }`}>\n                  <i className={`${component.icon} text-xl ${\n                    status === \"healthy\" ? \"text-green-600\" : \n                    status === \"warning\" ? \"text-orange-600\" : \n                    status === \"error\" ? \"text-red-600\" : \"text-gray-600\"\n                  }`}></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        );\n      })}\n\n      {/* Health Check Controls */}\n      <Card className=\"lg:col-span-4\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>System Health Monitoring</CardTitle>\n            <div className=\"flex items-center gap-2\">\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Auto-refresh: 30s\n              </Badge>\n              <Button \n                onClick={runHealthCheck}\n                disabled={recordHealthMutation.isPending}\n                size=\"sm\"\n                data-testid=\"button-run-health-check\"\n              >\n                <i className=\"fas fa-heartbeat mr-1\"></i>\n                {recordHealthMutation.isPending ? \"Checking...\" : \"Run Health Check\"}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex items-center justify-center py-4\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n              <span className=\"ml-2 text-sm text-muted-foreground\">Loading health data...</span>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div className=\"text-center p-3 bg-green-50 border border-green-200 rounded-lg\">\n                <div className=\"font-semibold text-green-800\">System Status</div>\n                <div className=\"text-green-600\">All Systems Operational</div>\n              </div>\n              \n              <div className=\"text-center p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                <div className=\"font-semibold text-blue-800\">Data Integrity</div>\n                <div className=\"text-blue-600\">100% - Zero Loss</div>\n              </div>\n              \n              <div className=\"text-center p-3 bg-purple-50 border border-purple-200 rounded-lg\">\n                <div className=\"font-semibold text-purple-800\">Uptime</div>\n                <div className=\"text-purple-600\">99.9% - Reliable</div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7441},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/utils/roleAccess.ts":{"content":"// Role-based access control configuration\nexport type UserRole = 'admin' | 'user' | 'client';\n\nexport interface MenuItem {\n  title: string;\n  path: string;\n  icon: string;\n  section: string;\n  roles: UserRole[];\n  description?: string;\n  priority?: number;\n  roleSpecificTitle?: Partial<Record<UserRole, string>>;\n  roleSpecificIcon?: Partial<Record<UserRole, string>>;\n}\n\n// Define which roles can access which features with role-specific customization\nexport const menuItems: MenuItem[] = [\n  {\n    title: \"Dashboard\",\n    roleSpecificTitle: {\n      admin: \"Management Dashboard\",\n      user: \"Technician Dashboard\", \n      client: \"My Dashboard\"\n    },\n    path: \"/\",\n    icon: \"fas fa-tachometer-alt\",\n    section: \"main\",\n    roles: [\"admin\", \"user\", \"client\"],\n    description: \"Overview and key metrics\",\n    priority: 1\n  },\n  {\n    title: \"Digital Inspections\", \n    roleSpecificTitle: {\n      admin: \"All Inspections\",\n      user: \"My Inspections\"\n    },\n    path: \"/inspections\",\n    icon: \"fas fa-clipboard-check\",\n    section: \"operations\",\n    roles: [\"admin\", \"user\"], // Shop Manager and Technician only\n    description: \"Vehicle inspection reports\",\n    priority: 2\n  },\n  {\n    title: \"Appointments\",\n    roleSpecificTitle: {\n      admin: \"All Appointments\",\n      user: \"My Assignments\", \n      client: \"My Appointments\"\n    },\n    path: \"/appointments\", \n    icon: \"fas fa-calendar-alt\",\n    section: \"operations\",\n    roles: [\"admin\", \"user\", \"client\"], // All roles - clients see their own\n    description: \"Schedule and manage appointments\",\n    priority: 3\n  },\n  {\n    title: \"Repair Orders\",\n    roleSpecificTitle: {\n      admin: \"All Work Orders\",\n      user: \"My Work Orders\"\n    },\n    path: \"/repair-orders\",\n    icon: \"fas fa-wrench\", \n    section: \"operations\",\n    roles: [\"admin\", \"user\"], // Shop Manager and Technician (assigned orders only)\n    description: \"Track repair progress\",\n    priority: 4\n  },\n  {\n    title: \"Job Board\",\n    roleSpecificTitle: {\n      admin: \"Work Assignment Board\",\n      user: \"Available Jobs\"\n    },\n    path: \"/job-board\",\n    icon: \"fas fa-tasks\",\n    section: \"operations\",\n    roles: [\"admin\", \"user\"], // Shop Manager and Technician only\n    description: \"View and assign work\",\n    priority: 5\n  },\n  {\n    title: \"Customer Management\",\n    path: \"/customers\",\n    icon: \"fas fa-users\",\n    section: \"customer\",\n    roles: [\"admin\"], // Shop Manager only\n    description: \"Manage customer database\",\n    priority: 6\n  },\n  {\n    title: \"Two-Way Texting\",\n    path: \"/messaging\",\n    icon: \"fas fa-sms\",\n    section: \"customer\",\n    roles: [\"admin\"], // Shop Manager only\n    description: \"Communicate with customers\",\n    priority: 7\n  },\n  {\n    title: \"Reviews Campaign\",\n    path: \"/reviews\",\n    icon: \"fas fa-star\",\n    section: \"customer\",\n    roles: [\"admin\"], // Shop Manager only\n    description: \"Manage customer reviews\",\n    priority: 8\n  },\n  {\n    title: \"My Account\",\n    path: \"/customer-portal\",\n    icon: \"fas fa-user-circle\",\n    section: \"personal\",\n    roles: [\"client\"], // Client only - their personal portal\n    description: \"View your vehicles and services\",\n    priority: 1\n  },\n  {\n    title: \"Invoices & Payments\",\n    path: \"/invoices\",\n    icon: \"fas fa-file-invoice-dollar\",\n    section: \"business\",\n    roles: [\"admin\"] // Shop Manager only\n  },\n  {\n    title: \"Inventory\",\n    path: \"/inventory\",\n    icon: \"fas fa-boxes\",\n    section: \"business\",\n    roles: [\"admin\"] // Shop Manager only\n  },\n  {\n    title: \"Reporting\",\n    path: \"/reporting\",\n    icon: \"fas fa-chart-line\",\n    section: \"business\",\n    roles: [\"admin\"] // Shop Manager only\n  },\n  {\n    title: \"User Management\",\n    path: \"/users\",\n    icon: \"fas fa-users-cog\",\n    section: \"business\",\n    roles: [\"admin\"] // Shop Manager only\n  },\n  {\n    title: \"Settings\",\n    path: \"/settings\", \n    icon: \"fas fa-cog\",\n    section: \"business\",\n    roles: [\"admin\"] // Shop Manager only\n  }\n];\n\nexport const sections = {\n  main: \"Main\",\n  operations: \"Operations\",\n  customer: \"Customer Management\", \n  business: \"Business Management\",\n  personal: \"My Account\"\n};\n\n// Role display names\nexport const roleDisplayNames: Record<UserRole, string> = {\n  admin: \"Shop Manager\",\n  user: \"Technician\",\n  client: \"Client\"\n};\n\n// Helper function to filter menu items by user role with customization\nexport function getMenuItemsForRole(userRole: UserRole): MenuItem[] {\n  return menuItems\n    .filter(item => item.roles.includes(userRole))\n    .map(item => ({\n      ...item,\n      title: item.roleSpecificTitle?.[userRole] || item.title,\n      icon: item.roleSpecificIcon?.[userRole] || item.icon\n    }))\n    .sort((a, b) => (a.priority || 999) - (b.priority || 999));\n}\n\n// Helper function to check if user has access to a specific path\nexport function hasAccess(userRole: UserRole, path: string): boolean {\n  // Dashboard is always accessible to authenticated users\n  if (path === \"/\") return true;\n  \n  // Check for exact path match or path prefix for nested routes\n  const item = menuItems.find(item => \n    item.path === path || path.startsWith(item.path + \"/\")\n  );\n  return item ? item.roles.includes(userRole) : false;\n}\n\n// Helper function to get role display name\nexport function getRoleDisplayName(role?: string): string {\n  if (!role || !(role in roleDisplayNames)) {\n    return \"User\";\n  }\n  return roleDisplayNames[role as UserRole];\n}","size_bytes":5407},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n\n\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2069},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"server/storage.ts":{"content":"import {\n  users,\n  customers,\n  vehicles,\n  appointments,\n  repairOrders,\n  invoices,\n  inspections,\n  auditLog,\n  systemHealth,\n  inventory,\n  businessSettings,\n  operatingHours,\n  notificationSettings,\n  billingSettings,\n  integrationSettings,\n  securitySettings,\n  reviewCampaigns,\n  reviews,\n  conversations,\n  messages,\n  type User,\n  type InsertUser,\n  type UpsertUser,\n  type Customer,\n  type InsertCustomer,\n  type Vehicle,\n  type InsertVehicle,\n  type Appointment,\n  type InsertAppointment,\n  type RepairOrder,\n  type InsertRepairOrder,\n  type Invoice,\n  type InsertInvoice,\n  type Inspection,\n  type InsertInspection,\n  type AuditLog,\n  type InsertAuditLog,\n  type SystemHealth,\n  type InventoryItem,\n  type InsertInventoryItem,\n  type BusinessSettings,\n  type InsertBusinessSettings,\n  type OperatingHours,\n  type InsertOperatingHours,\n  type NotificationSettings,\n  type InsertNotificationSettings,\n  type BillingSettings,\n  type InsertBillingSettings,\n  type IntegrationSettings,\n  type InsertIntegrationSettings,\n  type SecuritySettings,\n  type InsertSecuritySettings,\n  type ReviewCampaign,\n  type InsertReviewCampaign,\n  type Review,\n  type InsertReview,\n  type Conversation,\n  type InsertConversation,\n  type Message,\n  type InsertMessage,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lte, sql, count } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (mandatory for authentication)\n  getUsers(): Promise<User[]>;\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Customer operations\n  getCustomers(): Promise<Customer[]>;\n  getCustomer(id: string): Promise<Customer | undefined>;\n  getCustomerByEmail(email: string): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer>;\n  deleteCustomer(id: string): Promise<void>;\n\n  // Vehicle operations\n  getVehiclesByCustomer(customerId: string): Promise<Vehicle[]>;\n  getVehicle(id: string): Promise<Vehicle | undefined>;\n  createVehicle(vehicle: InsertVehicle): Promise<Vehicle>;\n  updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle>;\n\n  // Appointment operations\n  getAppointments(startDate?: Date, endDate?: Date): Promise<Appointment[]>;\n  getAppointmentsByCustomer(customerId: string, startDate?: Date, endDate?: Date): Promise<Appointment[]>;\n  getAppointmentsByTechnician(technicianId: string, startDate?: Date, endDate?: Date): Promise<Appointment[]>;\n  getAppointment(id: string): Promise<Appointment | undefined>;\n  createAppointment(appointment: InsertAppointment): Promise<Appointment>;\n  updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment>;\n  deleteAppointment(id: string): Promise<void>;\n\n  // Repair Order operations\n  getRepairOrders(): Promise<RepairOrder[]>;\n  getRepairOrdersByTechnician(technicianId: string): Promise<RepairOrder[]>;\n  getRepairOrdersByCustomer(customerId: string): Promise<RepairOrder[]>;\n  getRepairOrder(id: string): Promise<RepairOrder | undefined>;\n  createRepairOrder(repairOrder: InsertRepairOrder): Promise<RepairOrder>;\n  updateRepairOrder(id: string, repairOrder: Partial<InsertRepairOrder>): Promise<RepairOrder>;\n\n  // Invoice operations\n  getInvoices(): Promise<Invoice[]>;\n  getInvoicesByCustomer(customerId: string): Promise<Invoice[]>;\n  getInvoice(id: string): Promise<Invoice | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice>;\n\n  // Inspection operations\n  getInspections(): Promise<Inspection[]>;\n  getInspectionsByCustomer(customerId: string): Promise<Inspection[]>;\n  getInspectionsByTechnician(technicianId: string): Promise<Inspection[]>;\n  getInspection(id: string): Promise<Inspection | undefined>;\n  createInspection(inspection: InsertInspection): Promise<Inspection>;\n  updateInspection(id: string, inspection: Partial<InsertInspection>): Promise<Inspection>;\n  deleteInspection(id: string): Promise<void>;\n\n  // Audit Log operations\n  createAuditLog(auditEntry: InsertAuditLog): Promise<AuditLog>;\n  getAuditLogs(limit?: number): Promise<AuditLog[]>;\n\n  // System Health operations\n  recordSystemHealth(component: string, status: string, responseTime?: number, details?: any): Promise<SystemHealth>;\n  getSystemHealth(): Promise<SystemHealth[]>;\n\n  // Inventory operations\n  getInventoryItems(): Promise<InventoryItem[]>;\n  getInventoryItem(id: string): Promise<InventoryItem | undefined>;\n  getInventoryItemByPartNumber(partNumber: string): Promise<InventoryItem | undefined>;\n  getLowStockItems(): Promise<InventoryItem[]>;\n  createInventoryItem(item: InsertInventoryItem): Promise<InventoryItem>;\n  updateInventoryItem(id: string, item: Partial<InsertInventoryItem>): Promise<InventoryItem>;\n  deleteInventoryItem(id: string): Promise<void>;\n  updateInventoryQuantity(id: string, quantity: number): Promise<InventoryItem>;\n\n  // Dashboard metrics\n  getDashboardMetrics(): Promise<{\n    totalCustomers: number;\n    totalVehicles: number;\n    todayAppointments: number;\n    activeRepairOrders: number;\n    pendingInvoices: number;\n    todayRevenue: number;\n  }>;\n\n  // Analytics methods\n  getRevenueAnalytics(startDate?: Date, endDate?: Date): Promise<{\n    totalRevenue: number;\n    paidInvoices: number;\n    averageInvoiceAmount: number;\n    revenueByMonth: Array<{ month: string; revenue: number }>;\n  }>;\n\n  getCustomerAnalytics(): Promise<{\n    totalCustomers: number;\n    newCustomersThisMonth: number;\n    totalVehicles: number;\n    activeCustomers: number;\n    customersByMonth: Array<{ month: string; count: number }>;\n  }>;\n\n  getTechnicianAnalytics(): Promise<Array<{\n    technicianId: string;\n    technicianName: string;\n    completedJobs: number;\n    activeJobs: number;\n    totalRevenue: number;\n    averageCompletionTime: number;\n  }>>;\n\n  getInventoryAnalytics(): Promise<{\n    totalItems: number;\n    totalValue: number;\n    lowStockItems: number;\n    categoriesCount: number;\n    valueByCategory: Array<{ category: string; value: number }>;\n  }>;\n\n  // Settings operations\n  getBusinessSettings(): Promise<BusinessSettings | null>;\n  updateBusinessSettings(settings: Partial<InsertBusinessSettings>): Promise<BusinessSettings>;\n  getOperatingHours(): Promise<OperatingHours[]>;\n  updateOperatingHours(hours: InsertOperatingHours[]): Promise<OperatingHours[]>;\n  getNotificationSettings(): Promise<NotificationSettings | null>;\n  updateNotificationSettings(settings: Partial<InsertNotificationSettings>): Promise<NotificationSettings>;\n  getBillingSettings(): Promise<BillingSettings | null>;\n  updateBillingSettings(settings: Partial<InsertBillingSettings>): Promise<BillingSettings>;\n  getIntegrationSettings(): Promise<IntegrationSettings | null>;\n  updateIntegrationSettings(settings: Partial<InsertIntegrationSettings>): Promise<IntegrationSettings>;\n  getSecuritySettings(): Promise<SecuritySettings | null>;\n  updateSecuritySettings(settings: Partial<InsertSecuritySettings>): Promise<SecuritySettings>;\n\n  // Review Campaign operations\n  getReviewCampaigns(): Promise<ReviewCampaign[]>;\n  getReviewCampaign(id: string): Promise<ReviewCampaign | undefined>;\n  createReviewCampaign(campaign: InsertReviewCampaign): Promise<ReviewCampaign>;\n  updateReviewCampaign(id: string, campaign: Partial<InsertReviewCampaign>): Promise<ReviewCampaign>;\n  deleteReviewCampaign(id: string): Promise<void>;\n  updateCampaignStatus(id: string, status: string): Promise<ReviewCampaign>;\n\n  // Review operations\n  getReviews(): Promise<Review[]>;\n  getReview(id: string): Promise<Review | undefined>;\n  getReviewsByCampaign(campaignId: string): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  updateReview(id: string, review: Partial<InsertReview>): Promise<Review>;\n  deleteReview(id: string): Promise<void>;\n\n  // Conversation operations (two-way texting)\n  getConversations(): Promise<Conversation[]>;\n  getConversation(id: string): Promise<Conversation | undefined>;\n  createConversation(conversation: InsertConversation): Promise<Conversation>;\n  updateConversation(id: string, conversation: Partial<InsertConversation>): Promise<Conversation>;\n  deleteConversation(id: string): Promise<void>;\n\n  // Message operations (SMS)\n  getMessagesByConversation(conversationId: string): Promise<Message[]>;\n  getMessage(id: string): Promise<Message | undefined>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  markMessageAsRead(id: string): Promise<Message>;\n  markConversationMessagesAsRead(conversationId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Helper method for audit logging\n  private async logAudit(operation: string, entityType: string, entityId: string, details?: string): Promise<void> {\n    await this.createAuditLog({\n      userId: 'system',\n      operation,\n      entityType,\n      entityId,\n      status: 'success',\n      details,\n    });\n  }\n\n  // User operations (mandatory for authentication)\n  async getUsers(): Promise<User[]> {\n    return await db.select().from(users);\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async updateUser(id: string, userData: Partial<InsertUser>): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...userData, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Customer operations\n  async getCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers).orderBy(desc(customers.createdAt));\n  }\n\n  // Get customer by user email (for client user to customer mapping)\n  async getCustomerByEmail(email: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.email, email));\n    return customer;\n  }\n\n  async getCustomer(id: string): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer;\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [newCustomer] = await db.insert(customers).values(customer).returning();\n    return newCustomer;\n  }\n\n  async updateCustomer(id: string, customer: Partial<InsertCustomer>): Promise<Customer> {\n    const [updatedCustomer] = await db\n      .update(customers)\n      .set({ ...customer, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return updatedCustomer;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    await db.delete(customers).where(eq(customers.id, id));\n  }\n\n  // Vehicle operations\n  async getVehiclesByCustomer(customerId: string): Promise<Vehicle[]> {\n    return await db.select().from(vehicles).where(eq(vehicles.customerId, customerId));\n  }\n\n  async getVehicle(id: string): Promise<Vehicle | undefined> {\n    const [vehicle] = await db.select().from(vehicles).where(eq(vehicles.id, id));\n    return vehicle;\n  }\n\n  async createVehicle(vehicle: InsertVehicle): Promise<Vehicle> {\n    const [newVehicle] = await db.insert(vehicles).values(vehicle).returning();\n    return newVehicle;\n  }\n\n  async updateVehicle(id: string, vehicle: Partial<InsertVehicle>): Promise<Vehicle> {\n    const [updatedVehicle] = await db\n      .update(vehicles)\n      .set({ ...vehicle, updatedAt: new Date() })\n      .where(eq(vehicles.id, id))\n      .returning();\n    return updatedVehicle;\n  }\n\n  // Appointment operations\n  async getAppointments(startDate?: Date, endDate?: Date): Promise<Appointment[]> {\n    if (startDate && endDate) {\n      return await db.select().from(appointments)\n        .where(\n          and(\n            gte(appointments.scheduledDate, startDate),\n            lte(appointments.scheduledDate, endDate)\n          )\n        )\n        .orderBy(appointments.scheduledDate);\n    }\n    \n    return await db.select().from(appointments).orderBy(appointments.scheduledDate);\n  }\n\n  // Get appointments filtered by customer (for client users)\n  async getAppointmentsByCustomer(customerId: string, startDate?: Date, endDate?: Date): Promise<Appointment[]> {\n    if (startDate && endDate) {\n      return await db.select().from(appointments)\n        .where(\n          and(\n            eq(appointments.customerId, customerId),\n            gte(appointments.scheduledDate, startDate),\n            lte(appointments.scheduledDate, endDate)\n          )\n        )\n        .orderBy(appointments.scheduledDate);\n    }\n    \n    return await db.select().from(appointments)\n      .where(eq(appointments.customerId, customerId))\n      .orderBy(appointments.scheduledDate);\n  }\n\n  // Get appointments filtered by technician assignment (for technician users)\n  async getAppointmentsByTechnician(technicianId: string, startDate?: Date, endDate?: Date): Promise<Appointment[]> {\n    const query = db.selectDistinct().from(appointments)\n      .innerJoin(repairOrders, eq(repairOrders.appointmentId, appointments.id))\n      .where(eq(repairOrders.technicianId, technicianId));\n\n    if (startDate && endDate) {\n      return await query\n        .where(\n          and(\n            eq(repairOrders.technicianId, technicianId),\n            gte(appointments.scheduledDate, startDate),\n            lte(appointments.scheduledDate, endDate)\n          )\n        )\n        .orderBy(desc(appointments.scheduledDate))\n        .then(results => results.map(result => result.appointments));\n    }\n    \n    return await query\n      .orderBy(desc(appointments.scheduledDate))\n      .then(results => results.map(result => result.appointments));\n  }\n\n  async getAppointment(id: string): Promise<Appointment | undefined> {\n    const [appointment] = await db.select().from(appointments).where(eq(appointments.id, id));\n    return appointment;\n  }\n\n  async createAppointment(appointment: InsertAppointment): Promise<Appointment> {\n    const [newAppointment] = await db.insert(appointments).values(appointment).returning();\n    return newAppointment;\n  }\n\n  async updateAppointment(id: string, appointment: Partial<InsertAppointment>): Promise<Appointment> {\n    const [updatedAppointment] = await db\n      .update(appointments)\n      .set({ ...appointment, updatedAt: new Date() })\n      .where(eq(appointments.id, id))\n      .returning();\n    return updatedAppointment;\n  }\n\n  async deleteAppointment(id: string): Promise<void> {\n    await db.delete(appointments).where(eq(appointments.id, id));\n  }\n\n  // Repair Order operations\n  async getRepairOrders(): Promise<RepairOrder[]> {\n    const results = await db.select({\n      repairOrder: repairOrders,\n      customer: customers,\n      vehicle: vehicles,\n      technician: users,\n    })\n      .from(repairOrders)\n      .leftJoin(customers, eq(repairOrders.customerId, customers.id))\n      .leftJoin(vehicles, eq(repairOrders.vehicleId, vehicles.id))\n      .leftJoin(users, eq(repairOrders.technicianId, users.id))\n      .orderBy(desc(repairOrders.createdAt));\n    \n    return results.map(r => ({ ...r.repairOrder, customer: r.customer, vehicle: r.vehicle, technician: r.technician }));\n  }\n\n  async getRepairOrdersByTechnician(technicianId: string): Promise<RepairOrder[]> {\n    const results = await db.select({\n      repairOrder: repairOrders,\n      customer: customers,\n      vehicle: vehicles,\n      technician: users,\n    })\n      .from(repairOrders)\n      .leftJoin(customers, eq(repairOrders.customerId, customers.id))\n      .leftJoin(vehicles, eq(repairOrders.vehicleId, vehicles.id))\n      .leftJoin(users, eq(repairOrders.technicianId, users.id))\n      .where(eq(repairOrders.technicianId, technicianId))\n      .orderBy(desc(repairOrders.createdAt));\n    \n    return results.map(r => ({ ...r.repairOrder, customer: r.customer, vehicle: r.vehicle, technician: r.technician }));\n  }\n\n  // Get repair orders filtered by customer (for client users)\n  async getRepairOrdersByCustomer(customerId: string): Promise<RepairOrder[]> {\n    const results = await db.select({\n      repairOrder: repairOrders,\n      customer: customers,\n      vehicle: vehicles,\n      technician: users,\n    })\n      .from(repairOrders)\n      .leftJoin(customers, eq(repairOrders.customerId, customers.id))\n      .leftJoin(vehicles, eq(repairOrders.vehicleId, vehicles.id))\n      .leftJoin(users, eq(repairOrders.technicianId, users.id))\n      .where(eq(repairOrders.customerId, customerId))\n      .orderBy(desc(repairOrders.createdAt));\n    \n    return results.map(r => ({ ...r.repairOrder, customer: r.customer, vehicle: r.vehicle, technician: r.technician }));\n  }\n\n  async getRepairOrder(id: string): Promise<RepairOrder | undefined> {\n    const [repairOrder] = await db.select().from(repairOrders).where(eq(repairOrders.id, id));\n    return repairOrder;\n  }\n\n  async createRepairOrder(repairOrder: InsertRepairOrder): Promise<RepairOrder> {\n    const [newRepairOrder] = await db.insert(repairOrders).values(repairOrder).returning();\n    return newRepairOrder;\n  }\n\n  async updateRepairOrder(id: string, repairOrder: Partial<InsertRepairOrder>): Promise<RepairOrder> {\n    const [updatedRepairOrder] = await db\n      .update(repairOrders)\n      .set({ ...repairOrder, updatedAt: new Date() })\n      .where(eq(repairOrders.id, id))\n      .returning();\n    return updatedRepairOrder;\n  }\n\n  // Invoice operations\n  async getInvoices(): Promise<Invoice[]> {\n    return await db.select().from(invoices).orderBy(desc(invoices.createdAt));\n  }\n\n  // Get invoices filtered by customer (for client users)\n  async getInvoicesByCustomer(customerId: string): Promise<Invoice[]> {\n    return await db.select().from(invoices)\n      .where(eq(invoices.customerId, customerId))\n      .orderBy(desc(invoices.createdAt));\n  }\n\n  async getInvoice(id: string): Promise<Invoice | undefined> {\n    const [invoice] = await db.select().from(invoices).where(eq(invoices.id, id));\n    return invoice;\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const [newInvoice] = await db.insert(invoices).values(invoice).returning();\n    return newInvoice;\n  }\n\n  async updateInvoice(id: string, invoice: Partial<InsertInvoice>): Promise<Invoice> {\n    const [updatedInvoice] = await db\n      .update(invoices)\n      .set({ ...invoice, updatedAt: new Date() })\n      .where(eq(invoices.id, id))\n      .returning();\n    return updatedInvoice;\n  }\n\n  // Inspection operations\n  async getInspections(): Promise<Inspection[]> {\n    return await db.select().from(inspections).orderBy(desc(inspections.createdAt));\n  }\n\n  // Get inspections filtered by customer (for client users)\n  async getInspectionsByCustomer(customerId: string): Promise<Inspection[]> {\n    return await db.select().from(inspections)\n      .where(eq(inspections.customerId, customerId))\n      .orderBy(desc(inspections.createdAt));\n  }\n\n  // Get inspections filtered by technician assignment (for technician users)\n  async getInspectionsByTechnician(technicianId: string): Promise<Inspection[]> {\n    return await db.select().from(inspections)\n      .innerJoin(repairOrders, eq(inspections.repairOrderId, repairOrders.id))\n      .where(eq(repairOrders.technicianId, technicianId))\n      .orderBy(desc(inspections.createdAt))\n      .then(results => results.map(result => result.inspections));\n  }\n\n  async getInspection(id: string): Promise<Inspection | undefined> {\n    const [inspection] = await db.select().from(inspections).where(eq(inspections.id, id));\n    return inspection;\n  }\n\n  async createInspection(inspection: InsertInspection): Promise<Inspection> {\n    const [newInspection] = await db.insert(inspections).values(inspection).returning();\n    return newInspection;\n  }\n\n  async updateInspection(id: string, inspection: Partial<InsertInspection>): Promise<Inspection> {\n    const [updatedInspection] = await db\n      .update(inspections)\n      .set({ ...inspection, updatedAt: new Date() })\n      .where(eq(inspections.id, id))\n      .returning();\n    return updatedInspection;\n  }\n\n  async deleteInspection(id: string): Promise<void> {\n    await db.delete(inspections).where(eq(inspections.id, id));\n  }\n\n  // Audit Log operations\n  async createAuditLog(auditEntry: InsertAuditLog): Promise<AuditLog> {\n    const [newAuditLog] = await db.insert(auditLog).values(auditEntry).returning();\n    return newAuditLog;\n  }\n\n  async getAuditLogs(limit: number = 50): Promise<AuditLog[]> {\n    return await db.select().from(auditLog).orderBy(desc(auditLog.createdAt)).limit(limit);\n  }\n\n  // System Health operations\n  async recordSystemHealth(component: string, status: string, responseTime?: number, details?: any): Promise<SystemHealth> {\n    const [healthRecord] = await db\n      .insert(systemHealth)\n      .values({\n        component,\n        status,\n        responseTime,\n        details,\n      })\n      .returning();\n    return healthRecord;\n  }\n\n  async getSystemHealth(): Promise<SystemHealth[]> {\n    return await db\n      .select()\n      .from(systemHealth)\n      .orderBy(desc(systemHealth.checkedAt))\n      .limit(20);\n  }\n\n  // Inventory operations\n  async getInventoryItems(): Promise<InventoryItem[]> {\n    return await db.select().from(inventory).orderBy(inventory.name);\n  }\n\n  async getInventoryItem(id: string): Promise<InventoryItem | undefined> {\n    const [item] = await db.select().from(inventory).where(eq(inventory.id, id));\n    return item;\n  }\n\n  async getInventoryItemByPartNumber(partNumber: string): Promise<InventoryItem | undefined> {\n    const [item] = await db.select().from(inventory).where(eq(inventory.partNumber, partNumber));\n    return item;\n  }\n\n  async getLowStockItems(): Promise<InventoryItem[]> {\n    return await db\n      .select()\n      .from(inventory)\n      .where(sql`${inventory.quantity} <= ${inventory.minStock}`)\n      .orderBy(inventory.name);\n  }\n\n  async createInventoryItem(item: InsertInventoryItem): Promise<InventoryItem> {\n    const [newItem] = await db.insert(inventory).values(item).returning();\n    return newItem;\n  }\n\n  async updateInventoryItem(id: string, item: Partial<InsertInventoryItem>): Promise<InventoryItem> {\n    const [updated] = await db\n      .update(inventory)\n      .set({ ...item, updatedAt: new Date() })\n      .where(eq(inventory.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteInventoryItem(id: string): Promise<void> {\n    await db.delete(inventory).where(eq(inventory.id, id));\n  }\n\n  async updateInventoryQuantity(id: string, quantity: number): Promise<InventoryItem> {\n    const [updated] = await db\n      .update(inventory)\n      .set({ quantity, updatedAt: new Date() })\n      .where(eq(inventory.id, id))\n      .returning();\n    return updated;\n  }\n\n  // Dashboard metrics\n  async getDashboardMetrics(): Promise<{\n    totalCustomers: number;\n    totalVehicles: number;\n    todayAppointments: number;\n    activeRepairOrders: number;\n    pendingInvoices: number;\n    todayRevenue: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const [\n      totalCustomersResult,\n      totalVehiclesResult,\n      todayAppointmentsResult,\n      activeRepairOrdersResult,\n      pendingInvoicesResult,\n      todayRevenueResult,\n    ] = await Promise.all([\n      db.select({ count: count() }).from(customers),\n      db.select({ count: count() }).from(vehicles),\n      db.select({ count: count() }).from(appointments).where(\n        and(\n          gte(appointments.scheduledDate, today),\n          lte(appointments.scheduledDate, tomorrow)\n        )\n      ),\n      db.select({ count: count() }).from(repairOrders).where(\n        eq(repairOrders.status, \"in_progress\")\n      ),\n      db.select({ count: count() }).from(invoices).where(\n        eq(invoices.status, \"pending\")\n      ),\n      db.select({ \n        total: sql<number>`COALESCE(SUM(${invoices.total}), 0)` \n      }).from(invoices).where(\n        and(\n          gte(invoices.createdAt, today),\n          lte(invoices.createdAt, tomorrow),\n          eq(invoices.status, \"paid\")\n        )\n      ),\n    ]);\n\n    return {\n      totalCustomers: totalCustomersResult[0]?.count ?? 0,\n      totalVehicles: totalVehiclesResult[0]?.count ?? 0,\n      todayAppointments: todayAppointmentsResult[0]?.count ?? 0,\n      activeRepairOrders: activeRepairOrdersResult[0]?.count ?? 0,\n      pendingInvoices: pendingInvoicesResult[0]?.count ?? 0,\n      todayRevenue: Number(todayRevenueResult[0]?.total ?? 0),\n    };\n  }\n\n  // Analytics methods\n  async getRevenueAnalytics(startDate?: Date, endDate?: Date): Promise<{\n    totalRevenue: number;\n    paidInvoices: number;\n    averageInvoiceAmount: number;\n    revenueByMonth: Array<{ month: string; revenue: number }>;\n  }> {\n    const whereClause = startDate && endDate \n      ? and(\n          gte(invoices.paidAt, startDate),\n          lte(invoices.paidAt, endDate),\n          eq(invoices.status, \"paid\")\n        )\n      : eq(invoices.status, \"paid\");\n\n    const paidInvoicesData = await db\n      .select()\n      .from(invoices)\n      .where(whereClause);\n\n    const totalRevenue = paidInvoicesData.reduce((sum, inv) => sum + Number(inv.total), 0);\n    const paidInvoices = paidInvoicesData.length;\n    const averageInvoiceAmount = paidInvoices > 0 ? totalRevenue / paidInvoices : 0;\n\n    // Group by month\n    const revenueByMonth: { [key: string]: number } = {};\n    paidInvoicesData.forEach((inv) => {\n      if (inv.paidAt) {\n        const monthKey = new Date(inv.paidAt).toISOString().slice(0, 7); // YYYY-MM\n        revenueByMonth[monthKey] = (revenueByMonth[monthKey] || 0) + Number(inv.total);\n      }\n    });\n\n    const revenueByMonthArray = Object.entries(revenueByMonth).map(([month, revenue]) => ({\n      month,\n      revenue,\n    })).sort((a, b) => a.month.localeCompare(b.month));\n\n    return {\n      totalRevenue,\n      paidInvoices,\n      averageInvoiceAmount,\n      revenueByMonth: revenueByMonthArray,\n    };\n  }\n\n  async getCustomerAnalytics(): Promise<{\n    totalCustomers: number;\n    newCustomersThisMonth: number;\n    totalVehicles: number;\n    activeCustomers: number;\n    customersByMonth: Array<{ month: string; count: number }>;\n  }> {\n    const today = new Date();\n    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n\n    const [\n      allCustomers,\n      totalVehiclesResult,\n      newCustomersResult,\n      activeAppointments,\n    ] = await Promise.all([\n      db.select().from(customers),\n      db.select({ count: count() }).from(vehicles),\n      db.select({ count: count() }).from(customers).where(gte(customers.createdAt, firstDayOfMonth)),\n      db.select({ customerId: appointments.customerId }).from(appointments)\n        .where(gte(appointments.scheduledDate, new Date(Date.now() - 90 * 24 * 60 * 60 * 1000)))\n        .groupBy(appointments.customerId),\n    ]);\n\n    // Group customers by month\n    const customersByMonth: { [key: string]: number } = {};\n    allCustomers.forEach((customer) => {\n      const monthKey = new Date(customer.createdAt).toISOString().slice(0, 7);\n      customersByMonth[monthKey] = (customersByMonth[monthKey] || 0) + 1;\n    });\n\n    const customersByMonthArray = Object.entries(customersByMonth).map(([month, count]) => ({\n      month,\n      count,\n    })).sort((a, b) => a.month.localeCompare(b.month));\n\n    return {\n      totalCustomers: allCustomers.length,\n      newCustomersThisMonth: newCustomersResult[0]?.count ?? 0,\n      totalVehicles: totalVehiclesResult[0]?.count ?? 0,\n      activeCustomers: activeAppointments.length,\n      customersByMonth: customersByMonthArray,\n    };\n  }\n\n  async getTechnicianAnalytics(): Promise<Array<{\n    technicianId: string;\n    technicianName: string;\n    completedJobs: number;\n    activeJobs: number;\n    totalRevenue: number;\n    averageCompletionTime: number;\n  }>> {\n    const technicians = await db.select().from(users).where(eq(users.role, \"user\"));\n    \n    const analyticsPromises = technicians.map(async (tech) => {\n      const [completedOrders, activeOrders, techInvoices] = await Promise.all([\n        db.select().from(repairOrders)\n          .where(and(\n            eq(repairOrders.technicianId, tech.id),\n            eq(repairOrders.status, \"completed\")\n          )),\n        db.select({ count: count() }).from(repairOrders)\n          .where(and(\n            eq(repairOrders.technicianId, tech.id),\n            eq(repairOrders.status, \"in_progress\")\n          )),\n        db.select().from(invoices)\n          .innerJoin(repairOrders, eq(invoices.repairOrderId, repairOrders.id))\n          .where(and(\n            eq(repairOrders.technicianId, tech.id),\n            eq(invoices.status, \"paid\")\n          )),\n      ]);\n\n      const totalRevenue = techInvoices.reduce((sum, item) => sum + Number(item.invoices.total), 0);\n      \n      const completionTimes = completedOrders\n        .filter(order => order.startedAt && order.completedAt)\n        .map(order => {\n          const start = new Date(order.startedAt!).getTime();\n          const end = new Date(order.completedAt!).getTime();\n          return (end - start) / (1000 * 60 * 60); // hours\n        });\n\n      const averageCompletionTime = completionTimes.length > 0\n        ? completionTimes.reduce((a, b) => a + b, 0) / completionTimes.length\n        : 0;\n\n      return {\n        technicianId: tech.id,\n        technicianName: `${tech.firstName || ''} ${tech.lastName || ''}`.trim() || tech.username,\n        completedJobs: completedOrders.length,\n        activeJobs: activeOrders[0]?.count ?? 0,\n        totalRevenue,\n        averageCompletionTime,\n      };\n    });\n\n    return await Promise.all(analyticsPromises);\n  }\n\n  async getInventoryAnalytics(): Promise<{\n    totalItems: number;\n    totalValue: number;\n    lowStockItems: number;\n    categoriesCount: number;\n    valueByCategory: Array<{ category: string; value: number }>;\n  }> {\n    const [allItems, lowStock] = await Promise.all([\n      db.select().from(inventory),\n      db.select({ count: count() }).from(inventory)\n        .where(sql`${inventory.quantity} <= ${inventory.minStock}`),\n    ]);\n\n    const totalValue = allItems.reduce((sum, item) => \n      sum + (Number(item.unitCost) * item.quantity), 0\n    );\n\n    const categories = new Set(allItems.map(item => item.category));\n    \n    const valueByCategory: { [key: string]: number } = {};\n    allItems.forEach((item) => {\n      const value = Number(item.unitCost) * item.quantity;\n      valueByCategory[item.category] = (valueByCategory[item.category] || 0) + value;\n    });\n\n    const valueByCategoryArray = Object.entries(valueByCategory).map(([category, value]) => ({\n      category,\n      value,\n    })).sort((a, b) => b.value - a.value);\n\n    return {\n      totalItems: allItems.length,\n      totalValue,\n      lowStockItems: lowStock[0]?.count ?? 0,\n      categoriesCount: categories.size,\n      valueByCategory: valueByCategoryArray,\n    };\n  }\n\n  // Settings operations\n  async getBusinessSettings(): Promise<BusinessSettings | null> {\n    const settings = await db.select().from(businessSettings).limit(1);\n    return settings[0] || null;\n  }\n\n  async updateBusinessSettings(settings: Partial<InsertBusinessSettings>): Promise<BusinessSettings> {\n    const existing = await this.getBusinessSettings();\n    \n    if (existing) {\n      const updated = await db\n        .update(businessSettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(businessSettings.id, existing.id))\n        .returning();\n      \n      await this.logAudit(\"UPDATE\", \"business_settings\", existing.id, `Updated business settings`);\n      return updated[0];\n    } else {\n      const created = await db.insert(businessSettings).values(settings).returning();\n      await this.logAudit(\"CREATE\", \"business_settings\", created[0].id, `Created business settings`);\n      return created[0];\n    }\n  }\n\n  async getOperatingHours(): Promise<OperatingHours[]> {\n    const hours = await db.select().from(operatingHours).orderBy(operatingHours.dayOfWeek);\n    \n    // Ensure all days are present (0-6 for Sunday-Saturday)\n    const allDays = Array.from({ length: 7 }, (_, i) => i);\n    const existingDays = new Set(hours.map(h => h.dayOfWeek));\n    \n    const missingDays = allDays.filter(day => !existingDays.has(day));\n    if (missingDays.length > 0) {\n      const defaultHours = missingDays.map(day => ({\n        dayOfWeek: day,\n        isOpen: day !== 0, // Sunday closed by default\n        openTime: \"08:00\",\n        closeTime: \"18:00\",\n      }));\n      \n      const created = await db.insert(operatingHours).values(defaultHours).returning();\n      return [...hours, ...created].sort((a, b) => a.dayOfWeek - b.dayOfWeek);\n    }\n    \n    return hours;\n  }\n\n  async updateOperatingHours(hoursArray: InsertOperatingHours[]): Promise<OperatingHours[]> {\n    // Delete all existing hours\n    await db.delete(operatingHours);\n    \n    // Insert new hours\n    const created = await db.insert(operatingHours).values(hoursArray).returning();\n    \n    await this.logAudit(\"UPDATE\", \"operating_hours\", \"all\", `Updated operating hours for all days`);\n    return created.sort((a, b) => a.dayOfWeek - b.dayOfWeek);\n  }\n\n  async getNotificationSettings(): Promise<NotificationSettings | null> {\n    const settings = await db.select().from(notificationSettings).limit(1);\n    return settings[0] || null;\n  }\n\n  async updateNotificationSettings(settings: Partial<InsertNotificationSettings>): Promise<NotificationSettings> {\n    const existing = await this.getNotificationSettings();\n    \n    if (existing) {\n      const updated = await db\n        .update(notificationSettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(notificationSettings.id, existing.id))\n        .returning();\n      \n      await this.logAudit(\"UPDATE\", \"notification_settings\", existing.id, `Updated notification settings`);\n      return updated[0];\n    } else {\n      const created = await db.insert(notificationSettings).values(settings).returning();\n      await this.logAudit(\"CREATE\", \"notification_settings\", created[0].id, `Created notification settings`);\n      return created[0];\n    }\n  }\n\n  async getBillingSettings(): Promise<BillingSettings | null> {\n    const settings = await db.select().from(billingSettings).limit(1);\n    return settings[0] || null;\n  }\n\n  async updateBillingSettings(settings: Partial<InsertBillingSettings>): Promise<BillingSettings> {\n    const existing = await this.getBillingSettings();\n    \n    if (existing) {\n      const updated = await db\n        .update(billingSettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(billingSettings.id, existing.id))\n        .returning();\n      \n      await this.logAudit(\"UPDATE\", \"billing_settings\", existing.id, `Updated billing settings`);\n      return updated[0];\n    } else {\n      const created = await db.insert(billingSettings).values(settings).returning();\n      await this.logAudit(\"CREATE\", \"billing_settings\", created[0].id, `Created billing settings`);\n      return created[0];\n    }\n  }\n\n  async getIntegrationSettings(): Promise<IntegrationSettings | null> {\n    const settings = await db.select().from(integrationSettings).limit(1);\n    return settings[0] || null;\n  }\n\n  async updateIntegrationSettings(settings: Partial<InsertIntegrationSettings>): Promise<IntegrationSettings> {\n    const existing = await this.getIntegrationSettings();\n    \n    if (existing) {\n      const updated = await db\n        .update(integrationSettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(integrationSettings.id, existing.id))\n        .returning();\n      \n      await this.logAudit(\"UPDATE\", \"integration_settings\", existing.id, `Updated integration settings`);\n      return updated[0];\n    } else {\n      const created = await db.insert(integrationSettings).values(settings).returning();\n      await this.logAudit(\"CREATE\", \"integration_settings\", created[0].id, `Created integration settings`);\n      return created[0];\n    }\n  }\n\n  async getSecuritySettings(): Promise<SecuritySettings | null> {\n    const settings = await db.select().from(securitySettings).limit(1);\n    return settings[0] || null;\n  }\n\n  async updateSecuritySettings(settings: Partial<InsertSecuritySettings>): Promise<SecuritySettings> {\n    const existing = await this.getSecuritySettings();\n    \n    if (existing) {\n      const updated = await db\n        .update(securitySettings)\n        .set({ ...settings, updatedAt: new Date() })\n        .where(eq(securitySettings.id, existing.id))\n        .returning();\n      \n      await this.logAudit(\"UPDATE\", \"security_settings\", existing.id, `Updated security settings`);\n      return updated[0];\n    } else {\n      const created = await db.insert(securitySettings).values(settings).returning();\n      await this.logAudit(\"CREATE\", \"security_settings\", created[0].id, `Created security settings`);\n      return created[0];\n    }\n  }\n\n  // Review Campaign operations\n  async getReviewCampaigns(): Promise<ReviewCampaign[]> {\n    return await db.select().from(reviewCampaigns).orderBy(desc(reviewCampaigns.createdAt));\n  }\n\n  async getReviewCampaign(id: string): Promise<ReviewCampaign | undefined> {\n    const campaign = await db.select().from(reviewCampaigns).where(eq(reviewCampaigns.id, id)).limit(1);\n    return campaign[0];\n  }\n\n  async createReviewCampaign(campaign: InsertReviewCampaign): Promise<ReviewCampaign> {\n    const created = await db.insert(reviewCampaigns).values(campaign).returning();\n    await this.logAudit(\"CREATE\", \"review_campaigns\", created[0].id, `Created review campaign: ${created[0].name}`);\n    return created[0];\n  }\n\n  async updateReviewCampaign(id: string, campaign: Partial<InsertReviewCampaign>): Promise<ReviewCampaign> {\n    const updated = await db\n      .update(reviewCampaigns)\n      .set({ ...campaign, updatedAt: new Date() })\n      .where(eq(reviewCampaigns.id, id))\n      .returning();\n    \n    if (!updated[0]) {\n      throw new Error(\"Campaign not found\");\n    }\n    \n    await this.logAudit(\"UPDATE\", \"review_campaigns\", id, `Updated review campaign: ${updated[0].name}`);\n    return updated[0];\n  }\n\n  async deleteReviewCampaign(id: string): Promise<void> {\n    await db.delete(reviewCampaigns).where(eq(reviewCampaigns.id, id));\n    await this.logAudit(\"DELETE\", \"review_campaigns\", id, `Deleted review campaign`);\n  }\n\n  async updateCampaignStatus(id: string, status: string): Promise<ReviewCampaign> {\n    const updated = await db\n      .update(reviewCampaigns)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(reviewCampaigns.id, id))\n      .returning();\n    \n    if (!updated[0]) {\n      throw new Error(\"Campaign not found\");\n    }\n    \n    await this.logAudit(\"UPDATE\", \"review_campaigns\", id, `Updated campaign status to: ${status}`);\n    return updated[0];\n  }\n\n  // Review operations\n  async getReviews(): Promise<Review[]> {\n    return await db.select().from(reviews).orderBy(desc(reviews.createdAt));\n  }\n\n  async getReview(id: string): Promise<Review | undefined> {\n    const review = await db.select().from(reviews).where(eq(reviews.id, id)).limit(1);\n    return review[0];\n  }\n\n  async getReviewsByCampaign(campaignId: string): Promise<Review[]> {\n    return await db.select().from(reviews).where(eq(reviews.campaignId, campaignId)).orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const created = await db.insert(reviews).values(review).returning();\n    \n    // Update campaign response count if linked to a campaign\n    if (created[0].campaignId) {\n      await db\n        .update(reviewCampaigns)\n        .set({ \n          responseCount: sql`${reviewCampaigns.responseCount} + 1`,\n          updatedAt: new Date()\n        })\n        .where(eq(reviewCampaigns.id, created[0].campaignId));\n    }\n    \n    await this.logAudit(\"CREATE\", \"reviews\", created[0].id, `New review received (${created[0].rating} stars)`);\n    return created[0];\n  }\n\n  async updateReview(id: string, review: Partial<InsertReview>): Promise<Review> {\n    const updated = await db\n      .update(reviews)\n      .set(review)\n      .where(eq(reviews.id, id))\n      .returning();\n    \n    if (!updated[0]) {\n      throw new Error(\"Review not found\");\n    }\n    \n    await this.logAudit(\"UPDATE\", \"reviews\", id, `Updated review`);\n    return updated[0];\n  }\n\n  async deleteReview(id: string): Promise<void> {\n    // Get the review to check if it's linked to a campaign\n    const review = await this.getReview(id);\n    \n    await db.delete(reviews).where(eq(reviews.id, id));\n    \n    // Update campaign response count if it was linked\n    if (review?.campaignId) {\n      await db\n        .update(reviewCampaigns)\n        .set({ \n          responseCount: sql`${reviewCampaigns.responseCount} - 1`,\n          updatedAt: new Date()\n        })\n        .where(eq(reviewCampaigns.id, review.campaignId));\n    }\n    \n    await this.logAudit(\"DELETE\", \"reviews\", id, `Deleted review`);\n  }\n\n  // Conversation operations (two-way texting)\n  async getConversations(): Promise<Conversation[]> {\n    return await db.select().from(conversations).orderBy(desc(conversations.lastMessageAt));\n  }\n\n  async getConversation(id: string): Promise<Conversation | undefined> {\n    const [conversation] = await db.select().from(conversations).where(eq(conversations.id, id));\n    return conversation;\n  }\n\n  async createConversation(conversation: InsertConversation): Promise<Conversation> {\n    const created = await db.insert(conversations).values(conversation).returning();\n    await this.logAudit(\"CREATE\", \"conversations\", created[0].id, `Created conversation with ${created[0].customerName}`);\n    return created[0];\n  }\n\n  async updateConversation(id: string, conversation: Partial<InsertConversation>): Promise<Conversation> {\n    const updated = await db\n      .update(conversations)\n      .set({ ...conversation, updatedAt: new Date() })\n      .where(eq(conversations.id, id))\n      .returning();\n    \n    if (!updated[0]) {\n      throw new Error(\"Conversation not found\");\n    }\n    \n    return updated[0];\n  }\n\n  async deleteConversation(id: string): Promise<void> {\n    // Delete all messages in the conversation first\n    await db.delete(messages).where(eq(messages.conversationId, id));\n    // Then delete the conversation\n    await db.delete(conversations).where(eq(conversations.id, id));\n    await this.logAudit(\"DELETE\", \"conversations\", id, `Deleted conversation`);\n  }\n\n  // Message operations (SMS)\n  async getMessagesByConversation(conversationId: string): Promise<Message[]> {\n    return await db\n      .select()\n      .from(messages)\n      .where(eq(messages.conversationId, conversationId))\n      .orderBy(messages.createdAt);\n  }\n\n  async getMessage(id: string): Promise<Message | undefined> {\n    const [message] = await db.select().from(messages).where(eq(messages.id, id));\n    return message;\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const created = await db.insert(messages).values(message).returning();\n    \n    // Update conversation with last message and timestamp\n    await db\n      .update(conversations)\n      .set({\n        lastMessage: created[0].content,\n        lastMessageAt: created[0].createdAt,\n        unreadCount: message.direction === 'inbound' ? sql`${conversations.unreadCount} + 1` : conversations.unreadCount,\n        updatedAt: new Date()\n      })\n      .where(eq(conversations.id, created[0].conversationId));\n    \n    await this.logAudit(\"CREATE\", \"messages\", created[0].id, `Message ${message.direction}`);\n    return created[0];\n  }\n\n  async markMessageAsRead(id: string): Promise<Message> {\n    const updated = await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(eq(messages.id, id))\n      .returning();\n    \n    if (!updated[0]) {\n      throw new Error(\"Message not found\");\n    }\n    \n    return updated[0];\n  }\n\n  async markConversationMessagesAsRead(conversationId: string): Promise<void> {\n    // Mark all unread messages in this conversation as read\n    await db\n      .update(messages)\n      .set({ isRead: true })\n      .where(\n        and(\n          eq(messages.conversationId, conversationId),\n          eq(messages.isRead, false)\n        )\n      );\n    \n    // Reset unread count on conversation\n    await db\n      .update(conversations)\n      .set({ unreadCount: 0, updatedAt: new Date() })\n      .where(eq(conversations.id, conversationId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":45664},"client/src/components/error-notification.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface ErrorNotificationProps {\n  error?: string;\n  onDismiss?: () => void;\n  onRetry?: () => void;\n}\n\nexport default function ErrorNotification({ error, onDismiss, onRetry }: ErrorNotificationProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [currentError, setCurrentError] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (error) {\n      setCurrentError(error);\n      setIsVisible(true);\n      \n      // Auto-hide after 10 seconds\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        if (onDismiss) onDismiss();\n      }, 10000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [error, onDismiss]);\n\n  useEffect(() => {\n    // Global error handler for unhandled errors\n    const handleGlobalError = (event: ErrorEvent) => {\n      console.error('Global error caught:', event.error);\n      setCurrentError(`Application error: ${event.error?.message || 'Unknown error'}`);\n      setIsVisible(true);\n    };\n\n    // Promise rejection handler\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\n      console.error('Unhandled promise rejection:', event.reason);\n      setCurrentError(`System error: ${event.reason?.message || event.reason || 'Unknown error'}`);\n      setIsVisible(true);\n    };\n\n    window.addEventListener('error', handleGlobalError);\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\n\n    return () => {\n      window.removeEventListener('error', handleGlobalError);\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\n    };\n  }, []);\n\n  const handleDismiss = () => {\n    setIsVisible(false);\n    if (onDismiss) onDismiss();\n  };\n\n  const handleRetry = () => {\n    if (onRetry) {\n      onRetry();\n    } else {\n      // Default retry action - reload the page\n      window.location.reload();\n    }\n  };\n\n  const handleReportIssue = () => {\n    // In a real application, this would send the error to a logging service\n    console.log('Reporting issue:', currentError);\n    \n    // For now, we'll just show a notification that the issue was reported\n    setCurrentError(\"Issue reported successfully. Our team has been notified.\");\n    setTimeout(() => {\n      setIsVisible(false);\n    }, 3000);\n  };\n\n  if (!isVisible || !currentError) {\n    return null;\n  }\n\n  return (\n    <div \n      className=\"fixed top-4 right-4 z-50 max-w-md\"\n      data-testid=\"error-notification\"\n    >\n      <Card className=\"border-destructive bg-destructive/5 shadow-lg\">\n        <CardContent className=\"pt-4\">\n          <div className=\"flex items-start gap-3\">\n            <div className=\"w-5 h-5 rounded-full bg-destructive flex items-center justify-center flex-shrink-0 mt-0.5\">\n              <i className=\"fas fa-exclamation-triangle text-destructive-foreground text-xs\"></i>\n            </div>\n            <div className=\"flex-1\">\n              <h4 className=\"font-medium text-destructive mb-1\">System Error Detected</h4>\n              <p className=\"text-sm text-destructive/80 mb-3\" data-testid=\"error-message\">\n                {currentError}\n              </p>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  onClick={handleRetry}\n                  className=\"bg-destructive hover:bg-destructive/90\"\n                  data-testid=\"button-retry\"\n                >\n                  <i className=\"fas fa-redo mr-1 text-xs\"></i>\n                  Retry\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={handleReportIssue}\n                  className=\"border-destructive text-destructive hover:bg-destructive/10\"\n                  data-testid=\"button-report-issue\"\n                >\n                  <i className=\"fas fa-bug mr-1 text-xs\"></i>\n                  Report Issue\n                </Button>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleDismiss}\n              className=\"text-destructive hover:text-destructive/80 hover:bg-destructive/10 p-1\"\n              data-testid=\"button-dismiss\"\n            >\n              <i className=\"fas fa-times text-sm\"></i>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4491},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/pages/inspections.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Inspection, InsertInspection, Customer, Vehicle } from \"@shared/schema\";\nimport { Plus } from \"lucide-react\";\n\nexport default function Inspections() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    customerId: \"\",\n    vehicleId: \"\",\n    serviceType: \"\"\n  });\n  const { toast } = useToast();\n\n  // Fetch data from API\n  const { data: inspections = [], isLoading } = useQuery<Inspection[]>({\n    queryKey: ['/api/inspections'],\n  });\n\n  const { data: customers } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  // Get vehicles for selected customer\n  const { data: vehicles, isLoading: isLoadingVehicles } = useQuery<Vehicle[]>({\n    queryKey: [\"/api/customers\", formData.customerId, \"vehicles\"],\n    enabled: !!formData.customerId,\n  });\n\n  // Reset vehicleId when customer changes\n  useEffect(() => {\n    if (formData.customerId) {\n      setFormData(prev => ({ ...prev, vehicleId: \"\" }));\n    }\n  }, [formData.customerId]);\n\n  // Create inspection mutation\n  const createInspectionMutation = useMutation({\n    mutationFn: (inspection: InsertInspection) => \n      apiRequest('POST', '/api/inspections', inspection),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/inspections'] });\n      setFormData({ customerId: \"\", vehicleId: \"\", serviceType: \"\" });\n      setIsDialogOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"New inspection created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create inspection\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update inspection status mutation\n  const updateInspectionMutation = useMutation({\n    mutationFn: ({ id, status }: { id: string; status: string }) => \n      apiRequest('PUT', `/api/inspections/${id}`, { status }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/inspections'] });\n      toast({\n        title: \"Success\",\n        description: \"Inspection status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update inspection status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800\";\n      case \"in-progress\": return \"bg-blue-100 text-blue-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const handleInputChange = (field: keyof typeof formData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleCreateInspection = async () => {\n    if (!formData.customerId || !formData.vehicleId || !formData.serviceType) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Get customer and vehicle info for display\n    const selectedCustomer = customers?.find(c => c.id === formData.customerId);\n    const selectedVehicle = vehicles?.find(v => v.id === formData.vehicleId);\n    \n    if (!selectedCustomer || !selectedVehicle) {\n      toast({\n        title: \"Error\",\n        description: \"Selected customer or vehicle not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const inspectionData: InsertInspection = {\n      customerId: formData.customerId,\n      vehicleId: formData.vehicleId,\n      vehicleInfo: `${selectedVehicle.year} ${selectedVehicle.make} ${selectedVehicle.model} - ${selectedVehicle.licensePlate}`,\n      customerName: `${selectedCustomer.firstName} ${selectedCustomer.lastName}`,\n      serviceType: formData.serviceType,\n      status: \"pending\",\n      checklistItems: 12,\n      completedItems: 0,\n      notes: null,\n    };\n\n    createInspectionMutation.mutate(inspectionData);\n  };\n\n  const handleStatusChange = (inspectionId: string, newStatus: string) => {\n    updateInspectionMutation.mutate({ id: inspectionId, status: newStatus });\n  };\n\n  const handleViewDetails = (inspection: Inspection) => {\n    toast({\n      title: \"Inspection Details\",\n      description: `Viewing details for ${inspection.customerName}'s ${inspection.vehicleInfo} - Status: ${inspection.status}`,\n    });\n  };\n\n  const handleContinueInspection = (inspection: Inspection) => {\n    toast({\n      title: \"Continue Inspection\",\n      description: `Continuing inspection for ${inspection.customerName}'s ${inspection.vehicleInfo}`,\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-inspections\">Digital Inspections</h1>\n              <p className=\"text-muted-foreground\">Manage digital vehicle inspections and reports</p>\n            </div>\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-new-inspection\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Inspection\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[425px]\">\n                <DialogHeader>\n                  <DialogTitle>Create New Inspection</DialogTitle>\n                  <DialogDescription>\n                    Start a new digital vehicle inspection for a customer.\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"grid gap-4 py-4\">\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"customer\">Customer</Label>\n                    <Select onValueChange={(value) => handleInputChange('customerId', value)}>\n                      <SelectTrigger data-testid=\"select-customer\">\n                        <SelectValue placeholder=\"Select a customer\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {customers?.map((customer) => (\n                          <SelectItem key={customer.id} value={customer.id}>\n                            {customer.firstName} {customer.lastName} - {customer.email}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"vehicle\">Vehicle</Label>\n                    <Select \n                      onValueChange={(value) => handleInputChange('vehicleId', value)}\n                      disabled={!formData.customerId || isLoadingVehicles}\n                    >\n                      <SelectTrigger data-testid=\"select-vehicle\">\n                        <SelectValue \n                          placeholder={\n                            !formData.customerId ? \"Select a customer first\" :\n                            isLoadingVehicles ? \"Loading vehicles...\" :\n                            \"Select a vehicle\"\n                          } \n                        />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {vehicles?.map((vehicle) => (\n                          <SelectItem key={vehicle.id} value={vehicle.id}>\n                            {vehicle.year} {vehicle.make} {vehicle.model} - {vehicle.licensePlate}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"grid gap-2\">\n                    <Label htmlFor=\"service-type\">Service Type</Label>\n                    <Select onValueChange={(value) => handleInputChange('serviceType', value)}>\n                      <SelectTrigger data-testid=\"select-service-type\">\n                        <SelectValue placeholder=\"Select service type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"oil-change\">Oil Change</SelectItem>\n                        <SelectItem value=\"brake-inspection\">Brake Inspection</SelectItem>\n                        <SelectItem value=\"general-inspection\">General Inspection</SelectItem>\n                        <SelectItem value=\"tire-rotation\">Tire Rotation</SelectItem>\n                        <SelectItem value=\"engine-diagnostic\">Engine Diagnostic</SelectItem>\n                        <SelectItem value=\"transmission-service\">Transmission Service</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)} data-testid=\"button-cancel\">\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleCreateInspection} \n                    disabled={createInspectionMutation.isPending}\n                    data-testid=\"button-create-inspection\"\n                  >\n                    {createInspectionMutation.isPending ? \"Creating...\" : \"Create Inspection\"}\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <div className=\"grid gap-6\">\n            {isLoading ? (\n              <div className=\"flex justify-center items-center py-8\">\n                <div className=\"text-muted-foreground\">Loading inspections...</div>\n              </div>\n            ) : inspections.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">No inspections found. Create your first inspection to get started.</p>\n              </div>\n            ) : (\n              inspections.map((inspection) => (\n                <Card key={inspection.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <CardTitle className=\"text-lg\">{inspection.id}</CardTitle>\n                      <CardDescription>{inspection.vehicleInfo}</CardDescription>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge className={getStatusColor(inspection.status || \"pending\")}>\n                        {inspection.status || \"pending\"}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 items-end\">\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Customer</p>\n                      <p className=\"font-medium\">{inspection.customerName}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-muted-foreground\">Progress</p>\n                      <p className=\"font-medium\">{inspection.completedItems}/{inspection.checklistItems} items</p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-muted-foreground\">Update Status</Label>\n                      <Select\n                        value={inspection.status || \"pending\"}\n                        onValueChange={(value) => handleStatusChange(inspection.id, value)}\n                        disabled={updateInspectionMutation.isPending}\n                      >\n                        <SelectTrigger data-testid={`select-status-${inspection.id}`}>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                          <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => handleViewDetails(inspection)}\n                        data-testid={`button-view-${inspection.id}`}\n                      >\n                        View Details\n                      </Button>\n                      <Button \n                        variant=\"outline\" \n                        size=\"sm\" \n                        onClick={() => handleContinueInspection(inspection)}\n                        data-testid={`button-edit-${inspection.id}`}\n                      >\n                        Continue\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              ))\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14197},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(210, 40%, 8%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 40%, 8%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 40%, 8%);\n  --primary: hsl(214, 84%, 32%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(210, 40%, 8%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(210, 20%, 45%);\n  --accent: hsl(210, 40%, 94%);\n  --accent-foreground: hsl(210, 40%, 8%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(210, 40%, 91%);\n  --input: hsl(210, 40%, 91%);\n  --ring: hsl(214, 84%, 32%);\n  --chart-1: hsl(24, 70%, 60%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(214, 84%, 32%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n/* Status color utilities */\n.status-red { \n  @apply bg-red-100 text-red-800 border-red-200; \n}\n\n.status-orange { \n  @apply bg-orange-100 text-orange-800 border-orange-200; \n}\n\n.status-green { \n  @apply bg-green-100 text-green-800 border-green-200; \n}\n\n.status-blue { \n  @apply bg-blue-100 text-blue-800 border-blue-200; \n}\n\n/* Sidebar item interactions */\n.sidebar-item:hover { \n  @apply bg-accent text-accent-foreground; \n}\n\n.sidebar-item.active { \n  @apply bg-primary text-primary-foreground; \n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-sans);\n  }\n}\n\n/* Custom scrollbar styles */\n::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n::-webkit-scrollbar-track {\n  @apply bg-muted bg-opacity-30;\n}\n\n::-webkit-scrollbar-thumb {\n  @apply bg-muted-foreground bg-opacity-30 rounded-full;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  @apply bg-muted-foreground bg-opacity-50;\n}\n\n/* Focus styles for accessibility */\n:focus-visible {\n  @apply outline-2 outline-offset-2 outline-ring;\n}\n\n/* Animation utilities */\n@keyframes slideInRight {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.animate-slide-in-right {\n  animation: slideInRight 0.3s ease-out;\n}\n\n/* Card hover effects */\n.card-hover {\n  @apply transition-all duration-200 hover:shadow-md hover:scale-[1.02];\n}\n\n/* Pulse animation for loading states */\n@keyframes pulse-subtle {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.7;\n  }\n}\n\n.animate-pulse-subtle {\n  animation: pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Status indicator styles */\n.status-indicator {\n  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border;\n}\n\n.status-indicator.healthy {\n  @apply bg-green-100 text-green-800 border-green-200;\n}\n\n.status-indicator.warning {\n  @apply bg-orange-100 text-orange-800 border-orange-200;\n}\n\n.status-indicator.error {\n  @apply bg-red-100 text-red-800 border-red-200;\n}\n\n.status-indicator.info {\n  @apply bg-blue-100 text-blue-800 border-blue-200;\n}\n\n/* Utility classes for consistent spacing */\n.section-spacing {\n  @apply space-y-6;\n}\n\n.card-spacing {\n  @apply space-y-4;\n}\n\n/* Print styles */\n@media print {\n  .no-print {\n    display: none !important;\n  }\n  \n  .print-break {\n    page-break-before: always;\n  }\n}\n","size_bytes":7450},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"server/localAuth.ts":{"content":"import bcrypt from \"bcrypt\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  \n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'temporary-secret-key-change-me',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Local strategy for username/password authentication\n  passport.use(new LocalStrategy(async (username, password, done) => {\n    try {\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return done(null, false, { message: \"Invalid username or password\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.password);\n      if (!isValidPassword) {\n        return done(null, false, { message: \"Invalid username or password\" });\n      }\n\n      return done(null, user);\n    } catch (error) {\n      return done(error);\n    }\n  }));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Login route\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: \"Internal server error\" });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"Authentication failed\" });\n      }\n      \n      req.logIn(user, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n        return res.json({ user: { id: user.id, username: user.username, email: user.email, role: user.role } });\n      });\n    })(req, res, next);\n  });\n\n  // Register route\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const { username, email, password, firstName, lastName } = req.body;\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      const existingEmail = await storage.getUserByEmail(email);\n      if (existingEmail) {\n        return res.status(400).json({ message: \"Email already exists\" });\n      }\n\n      // Hash password\n      const saltRounds = 12;\n      const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n      // Create user\n      const newUser = await storage.createUser({\n        username,\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n      });\n\n      // Auto-login after registration\n      req.logIn(newUser, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Registration successful but login failed\" });\n        }\n        return res.status(201).json({ \n          user: { id: newUser.id, username: newUser.username, email: newUser.email, role: newUser.role } \n        });\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: \"Unauthorized\" });\n};\n","size_bytes":4381},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/reviews.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport Sidebar from \"@/components/sidebar\";\nimport { Plus, Send, Star, Percent, Trophy } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertReviewCampaignSchema, type ReviewCampaign, type Review, type InsertReviewCampaign } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype CreateCampaignForm = InsertReviewCampaign;\n\nexport default function Reviews() {\n  const { toast } = useToast();\n  const [isCreateCampaignOpen, setIsCreateCampaignOpen] = useState(false);\n\n  const { data: campaigns = [], isLoading: campaignsLoading } = useQuery<ReviewCampaign[]>({\n    queryKey: ['/api/campaigns'],\n  });\n\n  const { data: reviews = [], isLoading: reviewsLoading } = useQuery<Review[]>({\n    queryKey: ['/api/reviews'],\n  });\n\n  const form = useForm<CreateCampaignForm>({\n    resolver: zodResolver(insertReviewCampaignSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      status: \"active\",\n      trigger: \"post_service\",\n      delayDays: 1,\n      emailTemplate: \"\",\n      smsTemplate: \"\",\n    },\n  });\n\n  const createCampaignMutation = useMutation({\n    mutationFn: async (data: CreateCampaignForm) => {\n      return await apiRequest('POST', '/api/campaigns', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n      setIsCreateCampaignOpen(false);\n      form.reset();\n      toast({\n        title: \"Campaign Created\",\n        description: \"Review campaign has been created successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create campaign. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const toggleCampaignMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return await apiRequest('PATCH', `/api/campaigns/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/campaigns'] });\n      toast({\n        title: \"Status Updated\",\n        description: \"Campaign status has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update campaign status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleToggleCampaign = (campaignId: string, currentStatus: string) => {\n    const newStatus = currentStatus === 'active' ? 'paused' : 'active';\n    toggleCampaignMutation.mutate({ id: campaignId, status: newStatus });\n  };\n\n  const onSubmitCampaign = (data: CreateCampaignForm) => {\n    createCampaignMutation.mutate(data);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-green-100 text-green-800\";\n      case \"paused\": return \"bg-yellow-100 text-yellow-800\";\n      case \"inactive\": return \"bg-gray-100 text-gray-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${i < rating ? 'fill-yellow-400 text-yellow-400' : 'text-gray-300'}`}\n      />\n    ));\n  };\n\n  const calculateMetrics = () => {\n    const totalSent = campaigns.reduce((sum, c) => sum + (c.sentCount || 0), 0);\n    const totalResponses = campaigns.reduce((sum, c) => sum + (c.responseCount || 0), 0);\n    const responseRate = totalSent > 0 ? Math.round((totalResponses / totalSent) * 100) : 0;\n    const avgRating = reviews.length > 0\n      ? (reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length).toFixed(1)\n      : \"0.0\";\n\n    return {\n      totalSent,\n      totalResponses,\n      responseRate,\n      avgRating,\n    };\n  };\n\n  const metrics = calculateMetrics();\n\n  const recentReviews = reviews.slice(0, 5);\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-reviews\">Reviews Campaign</h1>\n              <p className=\"text-muted-foreground\">Manage customer review requests and campaigns</p>\n            </div>\n            <Button onClick={() => setIsCreateCampaignOpen(true)} data-testid=\"button-new-campaign\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              New Campaign\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Review Campaigns</CardTitle>\n                <CardDescription>Automated review request campaigns</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {campaignsLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading campaigns...</div>\n                ) : campaigns.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No campaigns yet. Create your first campaign to get started.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {campaigns.map((campaign) => {\n                      const campaignReviews = reviews.filter(r => r.campaignId === campaign.id);\n                      const avgRating = campaignReviews.length > 0\n                        ? (campaignReviews.reduce((sum, r) => sum + r.rating, 0) / campaignReviews.length).toFixed(1)\n                        : \"0.0\";\n                      const responseRate = campaign.sentCount && campaign.sentCount > 0\n                        ? Math.round((campaign.responseCount / campaign.sentCount) * 100)\n                        : 0;\n\n                      return (\n                        <div key={campaign.id} className=\"p-4 border border-border rounded-lg\" data-testid={`campaign-${campaign.id}`}>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"font-medium\">{campaign.name}</h4>\n                            <div className=\"flex items-center gap-2\">\n                              <Badge className={getStatusColor(campaign.status)}>\n                                {campaign.status}\n                              </Badge>\n                              <Switch\n                                checked={campaign.status === 'active'}\n                                onCheckedChange={() => handleToggleCampaign(campaign.id, campaign.status)}\n                                data-testid={`toggle-campaign-${campaign.id}`}\n                              />\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground mb-3\">{campaign.description || 'No description'}</p>\n                          <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                            <div>\n                              <p className=\"text-muted-foreground\">Sent</p>\n                              <p className=\"font-medium\">{campaign.sentCount || 0}</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Response Rate</p>\n                              <p className=\"font-medium\">{responseRate}%</p>\n                            </div>\n                            <div>\n                              <p className=\"text-muted-foreground\">Avg Rating</p>\n                              <p className=\"font-medium\">{avgRating} ⭐</p>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Reviews</CardTitle>\n                <CardDescription>Latest customer feedback</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {reviewsLoading ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">Loading reviews...</div>\n                ) : recentReviews.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No reviews yet. Reviews will appear here once customers respond.\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {recentReviews.map((review) => (\n                      <div key={review.id} className=\"p-4 border border-border rounded-lg\" data-testid={`review-${review.id}`}>\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium\">Customer Review</h4>\n                          {review.platform && <Badge variant=\"outline\">{review.platform}</Badge>}\n                        </div>\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          {renderStars(review.rating)}\n                          <span className=\"text-sm text-muted-foreground\">\n                            {review.createdAt ? new Date(review.createdAt).toLocaleDateString() : 'N/A'}\n                          </span>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{review.comment || 'No comment provided'}</p>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4\">\n                    <Send className=\"text-blue-600 w-6 h-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-sent\">{metrics.totalSent}</p>\n                    <p className=\"text-sm text-muted-foreground\">Requests Sent</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4\">\n                    <Star className=\"text-green-600 w-6 h-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-received\">{metrics.totalResponses}</p>\n                    <p className=\"text-sm text-muted-foreground\">Reviews Received</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center mr-4\">\n                    <Percent className=\"text-yellow-600 w-6 h-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-response-rate\">{metrics.responseRate}%</p>\n                    <p className=\"text-sm text-muted-foreground\">Response Rate</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mr-4\">\n                    <Trophy className=\"text-purple-600 w-6 h-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-avg-rating\">{metrics.avgRating}</p>\n                    <p className=\"text-sm text-muted-foreground\">Avg Rating</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Dialog open={isCreateCampaignOpen} onOpenChange={setIsCreateCampaignOpen}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Create Review Campaign</DialogTitle>\n            <DialogDescription>\n              Set up an automated campaign to request reviews from customers\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmitCampaign)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Campaign Name</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"e.g., Post-Service Review Request\"\n                        data-testid=\"input-campaign-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        value={field.value || \"\"}\n                        placeholder=\"Describe the purpose of this campaign\"\n                        data-testid=\"input-campaign-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"trigger\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Trigger Event</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-trigger\">\n                          <SelectValue placeholder=\"Select when to send\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"post_service\">After Service Completion</SelectItem>\n                        <SelectItem value=\"monthly\">Monthly Follow-up</SelectItem>\n                        <SelectItem value=\"manual\">Manual Trigger</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"delayDays\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Delay (Days)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        min=\"0\"\n                        onChange={(e) => field.onChange(parseInt(e.target.value))}\n                        placeholder=\"Days to wait before sending\"\n                        data-testid=\"input-delay-days\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"emailTemplate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Template (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        value={field.value || \"\"}\n                        placeholder=\"Email message template\"\n                        data-testid=\"input-email-template\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"smsTemplate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>SMS Template (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        {...field}\n                        value={field.value || \"\"}\n                        placeholder=\"SMS message template\"\n                        data-testid=\"input-sms-template\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Initial Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-status\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"paused\">Paused</SelectItem>\n                        <SelectItem value=\"inactive\">Inactive</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setIsCreateCampaignOpen(false)}\n                  data-testid=\"button-cancel-campaign\"\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createCampaignMutation.isPending} data-testid=\"button-submit-campaign\">\n                  {createCampaignMutation.isPending ? \"Creating...\" : \"Create Campaign\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":19908},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/repair-orders.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertRepairOrderSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\nimport { z } from \"zod\";\n\ntype RepairOrder = {\n  id: string;\n  orderNumber: string;\n  customerId: string;\n  vehicleId: string;\n  technicianId: string | null;\n  status: string;\n  priority: string;\n  description: string;\n  diagnosis: string | null;\n  estimatedCost: string | null;\n  actualCost: string | null;\n  laborHours: string | null;\n  startedAt: string | null;\n  completedAt: string | null;\n  createdAt: string;\n};\n\nexport default function RepairOrders() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedOrder, setSelectedOrder] = useState<RepairOrder | null>(null);\n\n  const { data: repairOrders, isLoading } = useQuery({\n    queryKey: [\"/api/repair-orders\"],\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const form = useForm<z.infer<typeof insertRepairOrderSchema>>({\n    resolver: zodResolver(insertRepairOrderSchema),\n    defaultValues: {\n      orderNumber: `RO-${Date.now()}`,\n      customerId: \"\",\n      vehicleId: \"\",\n      technicianId: \"\",\n      status: \"created\",\n      priority: \"normal\",\n      description: \"\",\n      diagnosis: \"\",\n      estimatedCost: \"\",\n      actualCost: \"\",\n      laborHours: \"\",\n    },\n  });\n\n  const customerId = form.watch(\"customerId\");\n  \n  const { data: vehicles, isLoading: isLoadingVehicles } = useQuery({\n    queryKey: [\"/api/customers\", customerId, \"vehicles\"],\n    enabled: !!customerId,\n  });\n\n  useEffect(() => {\n    if (customerId) {\n      form.setValue(\"vehicleId\", \"\");\n    }\n  }, [customerId, form]);\n\n  const createRepairOrderMutation = useMutation({\n    mutationFn: async (repairOrderData: z.infer<typeof insertRepairOrderSchema>) => {\n      return await apiRequest(\"POST\", \"/api/repair-orders\", repairOrderData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/repair-orders\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Repair order created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create repair order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateRepairOrderMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof insertRepairOrderSchema> }) => {\n      return await apiRequest(\"PUT\", `/api/repair-orders/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/repair-orders\"] });\n      setIsEditDialogOpen(false);\n      setSelectedOrder(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Repair order updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update repair order\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const editForm = useForm<z.infer<typeof insertRepairOrderSchema>>({\n    resolver: zodResolver(insertRepairOrderSchema),\n    defaultValues: {\n      orderNumber: \"\",\n      customerId: \"\",\n      vehicleId: \"\",\n      technicianId: \"\",\n      status: \"created\",\n      priority: \"normal\",\n      description: \"\",\n      diagnosis: \"\",\n      estimatedCost: \"\",\n      actualCost: \"\",\n      laborHours: \"\",\n    },\n  });\n\n  const editCustomerId = editForm.watch(\"customerId\");\n  \n  const { data: editVehicles, isLoading: isLoadingEditVehicles } = useQuery({\n    queryKey: [\"/api/customers\", editCustomerId, \"vehicles\"],\n    enabled: !!editCustomerId && isEditDialogOpen,\n  });\n\n  useEffect(() => {\n    if (editCustomerId) {\n      editForm.setValue(\"vehicleId\", \"\");\n    }\n  }, [editCustomerId, editForm]);\n\n  const handleViewOrder = (order: RepairOrder) => {\n    setSelectedOrder(order);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleEditOrder = (order: RepairOrder) => {\n    setSelectedOrder(order);\n    editForm.reset({\n      orderNumber: order.orderNumber,\n      customerId: order.customerId,\n      vehicleId: order.vehicleId,\n      technicianId: order.technicianId || \"\",\n      status: order.status,\n      priority: order.priority,\n      description: order.description,\n      diagnosis: order.diagnosis || \"\",\n      estimatedCost: order.estimatedCost || \"\",\n      actualCost: order.actualCost || \"\",\n      laborHours: order.laborHours || \"\",\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const onSubmit = (data: z.infer<typeof insertRepairOrderSchema>) => {\n    // Convert string values to proper types\n    const formattedData = {\n      ...data,\n      estimatedCost: data.estimatedCost ? data.estimatedCost : null,\n      actualCost: data.actualCost ? data.actualCost : null,\n      laborHours: data.laborHours ? data.laborHours : null,\n      technicianId: data.technicianId || null,\n    };\n    createRepairOrderMutation.mutate(formattedData);\n  };\n\n  const onEditSubmit = (data: z.infer<typeof insertRepairOrderSchema>) => {\n    if (!selectedOrder) return;\n    // Convert string values to proper types\n    const formattedData = {\n      ...data,\n      estimatedCost: data.estimatedCost ? data.estimatedCost : null,\n      actualCost: data.actualCost ? data.actualCost : null,\n      laborHours: data.laborHours ? data.laborHours : null,\n      technicianId: data.technicianId || null,\n    };\n    updateRepairOrderMutation.mutate({ id: selectedOrder.id, data: formattedData });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"created\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"in_progress\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"awaiting_parts\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"completed\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"delivered\": return \"bg-green-100 text-green-800 border-green-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"low\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"normal\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"high\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"urgent\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const filteredRepairOrders = Array.isArray(repairOrders) ? repairOrders.filter((order: RepairOrder) => \n    statusFilter === \"all\" || order.status === statusFilter\n  ) : [];\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-h-screen\">\n        <header className=\"bg-card border-b border-border px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-repair-orders-title\">\n                Repair Orders\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Manage repair orders with real-time status tracking and comprehensive audit trails.\n              </p>\n            </div>\n            \n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-repair-order\">\n                  <i className=\"fas fa-wrench mr-2\"></i>\n                  Create Repair Order\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[700px] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Create New Repair Order</DialogTitle>\n                  <DialogDescription>\n                    Create a new repair order with secure data persistence and audit trails.\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"orderNumber\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Order Number</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field} \n                                data-testid=\"input-order-number\"\n                                readOnly\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"customerId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Customer</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-customer\">\n                                  <SelectValue placeholder=\"Select a customer\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {Array.isArray(customers) ? customers.map((customer: any) => (\n                                  <SelectItem key={customer.id} value={customer.id}>\n                                    {customer.firstName} {customer.lastName}\n                                  </SelectItem>\n                                )) : null}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"vehicleId\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Vehicle</FormLabel>\n                            <Select \n                              onValueChange={field.onChange} \n                              defaultValue={field.value}\n                              disabled={!customerId || isLoadingVehicles}\n                            >\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-vehicle\">\n                                  <SelectValue \n                                    placeholder={\n                                      !customerId ? \"Select a customer first\" :\n                                      isLoadingVehicles ? \"Loading vehicles...\" :\n                                      \"Select a vehicle\"\n                                    } \n                                  />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                {Array.isArray(vehicles) ? vehicles.map((vehicle: any) => (\n                                  <SelectItem key={vehicle.id} value={vehicle.id}>\n                                    {vehicle.year} {vehicle.make} {vehicle.model} - {vehicle.licensePlate}\n                                  </SelectItem>\n                                )) : null}\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"priority\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Priority</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value || \"normal\"}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-priority\">\n                                  <SelectValue placeholder=\"Select priority\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"low\">Low</SelectItem>\n                                <SelectItem value=\"normal\">Normal</SelectItem>\n                                <SelectItem value=\"high\">High</SelectItem>\n                                <SelectItem value=\"urgent\">Urgent</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"estimatedCost\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Estimated Cost</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                step=\"0.01\"\n                                placeholder=\"0.00\" \n                                {...field} \n                                value={field.value || \"\"}\n                                data-testid=\"input-estimated-cost\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Describe the repair work needed...\" \n                              {...field} \n                              value={field.value || \"\"}\n                              data-testid=\"textarea-description\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"diagnosis\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Diagnosis (Optional)</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Initial diagnosis or notes...\" \n                              {...field} \n                              value={field.value || \"\"}\n                              data-testid=\"textarea-diagnosis\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end gap-2 pt-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setIsDialogOpen(false)}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={createRepairOrderMutation.isPending}\n                        data-testid=\"button-submit-repair-order\"\n                      >\n                        {createRepairOrderMutation.isPending ? \"Creating...\" : \"Create Repair Order\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </header>\n\n        {/* View Repair Order Dialog */}\n        <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>\n          <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>View Repair Order</DialogTitle>\n              <DialogDescription>\n                Repair order details (read-only)\n              </DialogDescription>\n            </DialogHeader>\n            \n            {selectedOrder && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Order Number</label>\n                    <p className=\"font-medium\">{selectedOrder.orderNumber}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Status</label>\n                    <div className=\"mt-1\">\n                      <Badge className={getStatusColor(selectedOrder.status)}>\n                        {selectedOrder.status.replace('_', ' ')}\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Priority</label>\n                    <div className=\"mt-1\">\n                      <Badge className={getPriorityColor(selectedOrder.priority)}>\n                        {selectedOrder.priority}\n                      </Badge>\n                    </div>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Created</label>\n                    <p>{new Date(selectedOrder.createdAt).toLocaleDateString()}</p>\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Description</label>\n                  <p className=\"mt-1 text-sm bg-muted p-3 rounded border\">{selectedOrder.description}</p>\n                </div>\n                \n                {selectedOrder.diagnosis && (\n                  <div>\n                    <label className=\"text-sm font-medium text-muted-foreground\">Diagnosis</label>\n                    <p className=\"mt-1 text-sm bg-muted p-3 rounded border\">{selectedOrder.diagnosis}</p>\n                  </div>\n                )}\n                \n                <div className=\"grid grid-cols-3 gap-4\">\n                  {selectedOrder.estimatedCost && (\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Estimated Cost</label>\n                      <p className=\"font-medium\">${selectedOrder.estimatedCost}</p>\n                    </div>\n                  )}\n                  {selectedOrder.actualCost && (\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Actual Cost</label>\n                      <p className=\"font-medium\">${selectedOrder.actualCost}</p>\n                    </div>\n                  )}\n                  {selectedOrder.laborHours && (\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Labor Hours</label>\n                      <p className=\"font-medium\">{selectedOrder.laborHours}h</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n            \n            <div className=\"flex justify-end\">\n              <Button onClick={() => setIsViewDialogOpen(false)} data-testid=\"button-close-view\">\n                Close\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Repair Order Dialog */}\n        <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n          <DialogContent className=\"sm:max-w-[700px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Repair Order</DialogTitle>\n              <DialogDescription>\n                Update repair order details\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"orderNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Order Number</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            data-testid=\"input-edit-order-number\"\n                            readOnly\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"status\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Status</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || \"created\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-status\">\n                              <SelectValue placeholder=\"Select status\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"created\">Created</SelectItem>\n                            <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                            <SelectItem value=\"awaiting_parts\">Awaiting Parts</SelectItem>\n                            <SelectItem value=\"completed\">Completed</SelectItem>\n                            <SelectItem value=\"delivered\">Delivered</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"customerId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Customer</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-customer\">\n                              <SelectValue placeholder=\"Select a customer\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.isArray(customers) ? customers.map((customer: any) => (\n                              <SelectItem key={customer.id} value={customer.id}>\n                                {customer.firstName} {customer.lastName}\n                              </SelectItem>\n                            )) : null}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"vehicleId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vehicle</FormLabel>\n                        <Select \n                          onValueChange={field.onChange} \n                          value={field.value}\n                          disabled={!editCustomerId || isLoadingEditVehicles}\n                        >\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-vehicle\">\n                              <SelectValue \n                                placeholder={\n                                  !editCustomerId ? \"Select a customer first\" :\n                                  isLoadingEditVehicles ? \"Loading vehicles...\" :\n                                  \"Select a vehicle\"\n                                } \n                              />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {Array.isArray(editVehicles) ? editVehicles.map((vehicle: any) => (\n                              <SelectItem key={vehicle.id} value={vehicle.id}>\n                                {vehicle.year} {vehicle.make} {vehicle.model} - {vehicle.licensePlate}\n                              </SelectItem>\n                            )) : null}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"priority\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Priority</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value || \"normal\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-edit-priority\">\n                              <SelectValue placeholder=\"Select priority\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"low\">Low</SelectItem>\n                            <SelectItem value=\"normal\">Normal</SelectItem>\n                            <SelectItem value=\"high\">High</SelectItem>\n                            <SelectItem value=\"urgent\">Urgent</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"estimatedCost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Estimated Cost</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\"\n                            placeholder=\"0.00\" \n                            {...field} \n                            value={field.value || \"\"}\n                            data-testid=\"input-edit-estimated-cost\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"actualCost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Actual Cost</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\"\n                            placeholder=\"0.00\" \n                            {...field} \n                            value={field.value || \"\"}\n                            data-testid=\"input-edit-actual-cost\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"laborHours\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Labor Hours</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.5\"\n                            placeholder=\"0\" \n                            {...field} \n                            value={field.value || \"\"}\n                            data-testid=\"input-edit-labor-hours\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe the repair work needed...\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"textarea-edit-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={editForm.control}\n                  name=\"diagnosis\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Diagnosis</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Updated diagnosis or notes...\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"textarea-edit-diagnosis\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsEditDialogOpen(false)}\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateRepairOrderMutation.isPending}\n                    data-testid=\"button-submit-edit-repair-order\"\n                  >\n                    {updateRepairOrderMutation.isPending ? \"Updating...\" : \"Update Repair Order\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        <div className=\"flex-1 p-8 space-y-6\">\n          {/* Status Filter */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Filter Repair Orders</CardTitle>\n              <CardDescription>\n                Filter repair orders by status\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1 max-w-xs\">\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"Filter by status\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Statuses</SelectItem>\n                      <SelectItem value=\"created\">Created</SelectItem>\n                      <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                      <SelectItem value=\"awaiting_parts\">Awaiting Parts</SelectItem>\n                      <SelectItem value=\"completed\">Completed</SelectItem>\n                      <SelectItem value=\"delivered\">Delivered</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Repair Orders List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                Repair Orders ({filteredRepairOrders.length})\n              </CardTitle>\n              <CardDescription>\n                All repair order data is securely stored with comprehensive audit trails\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"flex items-center gap-4 p-4 border rounded-lg animate-pulse\">\n                      <div className=\"w-12 h-12 bg-muted rounded-lg\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      </div>\n                      <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : filteredRepairOrders.length === 0 ? (\n                <div className=\"text-center py-12\" data-testid=\"text-no-repair-orders\">\n                  <i className=\"fas fa-wrench text-4xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No repair orders found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {statusFilter !== \"all\" ? \"No repair orders match the selected filter\" : \"Get started by creating your first repair order\"}\n                  </p>\n                  {statusFilter === \"all\" && (\n                    <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-create-first-repair-order\">\n                      <i className=\"fas fa-wrench mr-2\"></i>\n                      Create First Repair Order\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredRepairOrders.map((order: RepairOrder) => (\n                    <div \n                      key={order.id} \n                      className=\"flex items-start gap-4 p-4 border border-border rounded-lg hover:bg-accent transition-colors\"\n                      data-testid={`card-repair-order-${order.id}`}\n                    >\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <i className=\"fas fa-wrench text-primary\"></i>\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <h3 className=\"font-semibold text-foreground\">\n                            {order.orderNumber}\n                          </h3>\n                          <Badge className={getStatusColor(order.status)}>\n                            {order.status.replace('_', ' ')}\n                          </Badge>\n                          <Badge className={getPriorityColor(order.priority)}>\n                            {order.priority}\n                          </Badge>\n                        </div>\n                        \n                        <p className=\"text-sm text-muted-foreground mb-2\">\n                          {order.description}\n                        </p>\n                        \n                        <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                          <span>\n                            <i className=\"fas fa-calendar mr-1\"></i>\n                            Created: {new Date(order.createdAt).toLocaleDateString()}\n                          </span>\n                          {order.estimatedCost && (\n                            <span>\n                              <i className=\"fas fa-dollar-sign mr-1\"></i>\n                              Est: ${order.estimatedCost}\n                            </span>\n                          )}\n                          {order.laborHours && (\n                            <span>\n                              <i className=\"fas fa-clock mr-1\"></i>\n                              {order.laborHours}h\n                            </span>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleViewOrder(order)}\n                          data-testid={`button-view-repair-order-${order.id}`}\n                        >\n                          <i className=\"fas fa-eye mr-1\"></i>\n                          View\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => handleEditOrder(order)}\n                          data-testid={`button-edit-repair-order-${order.id}`}\n                        >\n                          <i className=\"fas fa-edit mr-1\"></i>\n                          Edit\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":40706},"RUN_LOCALLY.md":{"content":"# How to Run AutoFlow GMS Locally\n\nThis guide explains how to set up and run the AutoFlow Garage Management System on your local computer.\n\n## System Requirements\n\n### Required Software\n1. **Node.js** - Version 18.x or 20.x (required for all dependencies)\n2. **npm** - Comes with Node.js (for package management)\n3. **Database**: Either PostgreSQL OR Neon Database (cloud PostgreSQL)\n\n## Project Dependencies\n\n### Production Dependencies (81 packages)\nThe project uses these key libraries:\n- **Frontend**: React 18.3.1, TypeScript, Vite\n- **UI Components**: Radix UI (18 components), Tailwind CSS, Framer Motion\n- **State Management**: TanStack React Query\n- **Backend**: Express.js, Passport.js for authentication\n- **Database**: Drizzle ORM, PostgreSQL/Neon\n- **Forms**: React Hook Form with Zod validation\n\n### Development Dependencies (22 packages)\n- TypeScript compilation and type definitions\n- Vite for build tooling\n- Tailwind CSS and PostCSS for styling\n- Drizzle Kit for database management\n- ESBuild for production builds\n\n## Required Environment Variables\n\nCreate a `.env` file in your project root with these variables:\n\n```env\n# Database Connection\nDATABASE_URL=postgresql://user:password@host:port/database_name\n\n# Authentication & Security\nSESSION_SECRET=your-super-secret-session-key-make-it-very-long-and-random\nREPL_ID=your-app-identifier\nREPLIT_DOMAINS=localhost,your-domain.com\nISSUER_URL=https://replit.com/oidc\n\n# Server Configuration\nPORT=5000\nNODE_ENV=development\n```\n\n## Database Setup Options\n\n### Option 1: Local PostgreSQL\n1. Download and install PostgreSQL from https://www.postgresql.org/download/\n2. Create a database and user:\n   ```sql\n   CREATE DATABASE garage_management;\n   CREATE USER garage_user WITH PASSWORD 'your_password';\n   GRANT ALL PRIVILEGES ON DATABASE garage_management TO garage_user;\n   ```\n3. Use this DATABASE_URL format:\n   ```\n   DATABASE_URL=postgresql://garage_user:your_password@localhost:5432/garage_management\n   ```\n\n### Option 2: Neon Cloud Database\n1. Go to https://neon.tech and create a free account\n2. Create a new project called \"garage-management\"\n3. Copy the connection string from your dashboard\n4. Use the provided connection string (includes `?sslmode=require`)\n\n## Setup Steps\n\n### 1. Extract Project Files\n- Extract your downloaded project ZIP to a folder\n- Navigate to the project folder in terminal/command prompt\n\n### 2. Install Dependencies\n```bash\nnpm install\n```\n\n### 3. Set Up Database Schema\n```bash\nnpm run db:push\n```\n\n### 4. Start Development Server\n```bash\nnpm run dev\n```\n\nThe application will start with:\n- **Backend**: http://localhost:5000 (Express API server)\n- **Frontend**: Served by Vite through Express (same port)\n\n## Available Scripts\n\n### Development\n- `npm run dev` - Starts development server with hot reloading\n- `npm run check` - TypeScript type checking\n\n### Database\n- `npm run db:push` - Creates/updates database schema using Drizzle\n\n### Build & Production\n- `npm run build` - Builds both frontend and backend for production\n- `npm run start` - Starts production server\n\n## Project Structure\n\n```\nyour-project/\n├── .env (you need to create this)\n├── package.json\n├── tsconfig.json\n├── vite.config.ts\n├── drizzle.config.ts\n├── tailwind.config.ts\n├── postcss.config.js\n├── client/\n│   ├── index.html\n│   └── src/\n│       ├── components/    (UI components)\n│       ├── pages/        (Application pages)\n│       ├── hooks/        (Custom React hooks)\n│       ├── lib/          (Utilities)\n│       ├── App.tsx       (Main app component)\n│       └── main.tsx      (React entry point)\n├── server/\n│   ├── index.ts          (Express server)\n│   ├── routes.ts         (API endpoints)\n│   ├── db.ts            (Database connection)\n│   ├── storage.ts       (Data access layer)\n│   ├── replitAuth.ts    (Authentication)\n│   └── vite.ts          (Vite integration)\n├── shared/\n│   └── schema.ts         (Database schema)\n└── migrations/           (Created by Drizzle)\n```\n\n## Important Notes\n\n### Authentication\n- The project uses Replit's OpenID Connect for authentication\n- Authentication will not work locally (expected behavior)\n- You'll see the login page but authentication will fail in local development\n\n### Ports and Proxying\n- Backend runs on port 5000 (Express server)\n- Frontend is served through the same port via Vite integration\n- All `/api` requests are handled by the Express backend\n\n### Database Features\n- Uses Drizzle ORM for type-safe database operations\n- Supports both local PostgreSQL and Neon cloud databases\n- Automatic schema migrations with `npm run db:push`\n- Sample data can be added through the application interface\n\n## Troubleshooting\n\n### Common Issues\n\n**npm install fails:**\n- Ensure you have Node.js 18+ installed\n- Try clearing npm cache: `npm cache clean --force`\n- Delete `node_modules` and `package-lock.json`, then try again\n\n**Database connection fails:**\n- Verify your DATABASE_URL in `.env` is correct\n- For local PostgreSQL: ensure the service is running\n- For Neon: ensure connection string includes `?sslmode=require`\n\n**Port 5000 already in use:**\n- Kill the process using port 5000\n- Or change the PORT in your `.env` file\n\n**TypeScript errors:**\n- Run `npm run check` to see detailed type errors\n- Ensure all dependencies are installed correctly\n\n**Build failures:**\n- Ensure all environment variables are set\n- Check that the database is accessible\n- Verify all required files are present\n\n## Development Tips\n\n1. **Hot Reloading**: Changes to frontend code reload automatically\n2. **API Changes**: Backend changes require restarting the dev server\n3. **Database Changes**: Run `npm run db:push` after schema modifications\n4. **Type Safety**: The project uses TypeScript throughout for better development experience\n5. **UI Components**: Built with Radix UI primitives and Tailwind CSS for consistency\n\nYour AutoFlow Garage Management System should now be running locally with full functionality including customer management, appointments, digital inspections, and all other features!","size_bytes":6219},"client/src/pages/inventory.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Plus, Package, DollarSign, AlertTriangle, ShoppingCart, Edit, Trash2 } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\n// Inventory item type\ntype InventoryItem = {\n  id: string;\n  partNumber: string;\n  name: string;\n  description: string | null;\n  category: string;\n  quantity: number;\n  minStock: number;\n  unitCost: string;\n  sellingPrice: string | null;\n  supplier: string | null;\n  supplierPartNumber: string | null;\n  location: string | null;\n  lastOrdered: string | null;\n  notes: string | null;\n  createdAt: string;\n  updatedAt: string;\n};\n\n// Form validation schema\nconst inventoryItemSchema = z.object({\n  partNumber: z.string().min(1, \"Part number is required\"),\n  name: z.string().min(1, \"Name is required\"),\n  description: z.string().optional(),\n  category: z.string().min(1, \"Category is required\"),\n  quantity: z.coerce.number().int().min(0, \"Quantity must be 0 or greater\"),\n  minStock: z.coerce.number().int().min(0, \"Min stock must be 0 or greater\"),\n  unitCost: z.string().min(1, \"Unit cost is required\").refine(\n    (val) => !isNaN(parseFloat(val)) && parseFloat(val) >= 0,\n    { message: \"Unit cost must be a valid positive number\" }\n  ),\n  sellingPrice: z.string().optional().refine(\n    (val) => !val || (!isNaN(parseFloat(val)) && parseFloat(val) >= 0),\n    { message: \"Selling price must be a valid positive number\" }\n  ),\n  supplier: z.string().optional(),\n  supplierPartNumber: z.string().optional(),\n  location: z.string().optional(),\n  notes: z.string().optional(),\n});\n\ntype InventoryItemFormData = z.infer<typeof inventoryItemSchema>;\n\nexport default function Inventory() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [editingItem, setEditingItem] = useState<InventoryItem | null>(null);\n  const [deletingItem, setDeletingItem] = useState<InventoryItem | null>(null);\n\n  // Fetch inventory items\n  const { data: inventoryItems = [], isLoading } = useQuery<InventoryItem[]>({\n    queryKey: [\"/api/inventory\"],\n  });\n\n  // Fetch low stock items\n  const { data: lowStockItems = [] } = useQuery<InventoryItem[]>({\n    queryKey: [\"/api/inventory/low-stock\"],\n  });\n\n  // Create inventory item mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: InventoryItemFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/inventory\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory/low-stock\"] });\n      toast({\n        title: \"Success\",\n        description: \"Inventory item created successfully\",\n      });\n      setShowAddModal(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create inventory item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update inventory item mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InventoryItemFormData> }) => {\n      const res = await apiRequest(\"PATCH\", `/api/inventory/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory/low-stock\"] });\n      toast({\n        title: \"Success\",\n        description: \"Inventory item updated successfully\",\n      });\n      setEditingItem(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update inventory item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete inventory item mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/inventory/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/inventory/low-stock\"] });\n      toast({\n        title: \"Success\",\n        description: \"Inventory item deleted successfully\",\n      });\n      setDeletingItem(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete inventory item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add form\n  const addForm = useForm<InventoryItemFormData>({\n    resolver: zodResolver(inventoryItemSchema),\n    defaultValues: {\n      partNumber: \"\",\n      name: \"\",\n      description: \"\",\n      category: \"\",\n      quantity: 0,\n      minStock: 0,\n      unitCost: 0,\n      sellingPrice: 0,\n      supplier: \"\",\n      supplierPartNumber: \"\",\n      location: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Edit form\n  const editForm = useForm<InventoryItemFormData>({\n    resolver: zodResolver(inventoryItemSchema),\n  });\n\n  // Calculate metrics\n  const totalItems = inventoryItems.length;\n  const inventoryValue = inventoryItems.reduce((sum, item) => sum + (Number(item.unitCost) * item.quantity), 0);\n  const lowStockCount = lowStockItems.length;\n  const pendingOrders = 0; // This would come from purchase orders in a full implementation\n\n  // Get stock status\n  const getStockStatus = (quantity: number, minStock: number) => {\n    if (quantity <= minStock) return { status: \"Low Stock\", color: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\" };\n    if (quantity <= minStock * 1.5) return { status: \"Medium\", color: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\" };\n    return { status: \"In Stock\", color: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\" };\n  };\n\n  // Filter items based on search\n  const filteredItems = inventoryItems.filter(item =>\n    item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.partNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    item.category.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const handleAdd = (data: InventoryItemFormData) => {\n    createMutation.mutate(data);\n  };\n\n  const handleEdit = (data: InventoryItemFormData) => {\n    if (editingItem) {\n      updateMutation.mutate({ id: editingItem.id, data });\n    }\n  };\n\n  const handleDelete = () => {\n    if (deletingItem) {\n      deleteMutation.mutate(deletingItem.id);\n    }\n  };\n\n  const openEditModal = (item: InventoryItem) => {\n    setEditingItem(item);\n    editForm.reset({\n      partNumber: item.partNumber,\n      name: item.name,\n      description: item.description || \"\",\n      category: item.category,\n      quantity: item.quantity,\n      minStock: item.minStock,\n      unitCost: item.unitCost,\n      sellingPrice: item.sellingPrice || undefined,\n      supplier: item.supplier || \"\",\n      supplierPartNumber: item.supplierPartNumber || \"\",\n      location: item.location || \"\",\n      notes: item.notes || \"\",\n    });\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-inventory\">Inventory</h1>\n              <p className=\"text-muted-foreground\">Manage parts and supplies inventory</p>\n            </div>\n            <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-item\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Item\n            </Button>\n          </div>\n\n          {/* Metrics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mr-4\">\n                    <Package className=\"text-blue-600 dark:text-blue-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\">{totalItems}</p>\n                    <p className=\"text-sm text-muted-foreground\">Total Items</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mr-4\">\n                    <DollarSign className=\"text-green-600 dark:text-green-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\">${inventoryValue.toFixed(2)}</p>\n                    <p className=\"text-sm text-muted-foreground\">Inventory Value</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center mr-4\">\n                    <AlertTriangle className=\"text-yellow-600 dark:text-yellow-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\">{lowStockCount}</p>\n                    <p className=\"text-sm text-muted-foreground\">Low Stock</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center mr-4\">\n                    <ShoppingCart className=\"text-purple-600 dark:text-purple-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\">{pendingOrders}</p>\n                    <p className=\"text-sm text-muted-foreground\">Pending Orders</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Inventory Table */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Inventory Items</CardTitle>\n                  <CardDescription>Track parts, supplies, and stock levels</CardDescription>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Input \n                    placeholder=\"Search items...\" \n                    className=\"w-64\" \n                    data-testid=\"input-search-inventory\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                  />\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg animate-pulse\">\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n                      </div>\n                      <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : filteredItems.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Package className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No inventory items found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchTerm ? \"Try adjusting your search\" : \"Add your first inventory item to get started\"}\n                  </p>\n                  {!searchTerm && (\n                    <Button onClick={() => setShowAddModal(true)}>\n                      <Plus className=\"mr-2 h-4 w-4\" />\n                      Add First Item\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"border-b border-border\">\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Part Number</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Name</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Category</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Quantity</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Unit Cost</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Status</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredItems.map((item) => {\n                        const stockStatus = getStockStatus(item.quantity, item.minStock);\n                        return (\n                          <tr key={item.id} className=\"border-b border-border hover:bg-accent\" data-testid={`row-item-${item.id}`}>\n                            <td className=\"py-3 px-4 font-mono text-sm\">{item.partNumber}</td>\n                            <td className=\"py-3 px-4 font-medium\">{item.name}</td>\n                            <td className=\"py-3 px-4 text-muted-foreground\">{item.category}</td>\n                            <td className=\"py-3 px-4\">\n                              <div>\n                                <span className=\"font-medium\">{item.quantity}</span>\n                                <span className=\"text-muted-foreground text-xs ml-1\">(min: {item.minStock})</span>\n                              </div>\n                            </td>\n                            <td className=\"py-3 px-4 font-medium\">${Number(item.unitCost).toFixed(2)}</td>\n                            <td className=\"py-3 px-4\">\n                              <Badge className={stockStatus.color}>\n                                {stockStatus.status}\n                              </Badge>\n                            </td>\n                            <td className=\"py-3 px-4\">\n                              <div className=\"flex gap-2\">\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\" \n                                  onClick={() => openEditModal(item)}\n                                  data-testid={`button-edit-${item.id}`}\n                                >\n                                  <Edit className=\"h-4 w-4\" />\n                                </Button>\n                                <Button \n                                  variant=\"outline\" \n                                  size=\"sm\"\n                                  onClick={() => setDeletingItem(item)}\n                                  data-testid={`button-delete-${item.id}`}\n                                >\n                                  <Trash2 className=\"h-4 w-4 text-destructive\" />\n                                </Button>\n                              </div>\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Add Item Modal */}\n        <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n          <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add Inventory Item</DialogTitle>\n              <DialogDescription>\n                Add a new part or supply to your inventory\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...addForm}>\n              <form onSubmit={addForm.handleSubmit(handleAdd)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addForm.control}\n                    name=\"partNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Part Number *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-part-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={addForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={addForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} data-testid=\"input-description\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addForm.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category *</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-category\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={addForm.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-location\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addForm.control}\n                    name=\"quantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quantity *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" {...field} data-testid=\"input-quantity\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={addForm.control}\n                    name=\"minStock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Minimum Stock *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" {...field} data-testid=\"input-min-stock\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addForm.control}\n                    name=\"unitCost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Unit Cost *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-unit-cost\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={addForm.control}\n                    name=\"sellingPrice\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Selling Price</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} data-testid=\"input-selling-price\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={addForm.control}\n                    name=\"supplier\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-supplier\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={addForm.control}\n                    name=\"supplierPartNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier Part Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-supplier-part-number\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={addForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} data-testid=\"input-notes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setShowAddModal(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={createMutation.isPending} data-testid=\"button-submit-add\">\n                    {createMutation.isPending ? \"Adding...\" : \"Add Item\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Item Modal */}\n        <Dialog open={!!editingItem} onOpenChange={() => setEditingItem(null)}>\n          <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Edit Inventory Item</DialogTitle>\n              <DialogDescription>\n                Update inventory item details\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...editForm}>\n              <form onSubmit={editForm.handleSubmit(handleEdit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"partNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Part Number *</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category *</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"quantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Quantity *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"minStock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Minimum Stock *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"unitCost\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Unit Cost *</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"sellingPrice\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Selling Price</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" step=\"0.01\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"supplier\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={editForm.control}\n                    name=\"supplierPartNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Supplier Part Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={editForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setEditingItem(null)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateMutation.isPending}>\n                    {updateMutation.isPending ? \"Updating...\" : \"Update Item\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Delete Confirmation Modal */}\n        <Dialog open={!!deletingItem} onOpenChange={() => setDeletingItem(null)}>\n          <DialogContent className=\"sm:max-w-[400px]\">\n            <DialogHeader>\n              <DialogTitle>Delete Inventory Item</DialogTitle>\n              <DialogDescription>\n                Are you sure you want to delete this item? This action cannot be undone.\n              </DialogDescription>\n            </DialogHeader>\n            \n            {deletingItem && (\n              <div className=\"py-4\">\n                <p className=\"font-medium\">{deletingItem.name}</p>\n                <p className=\"text-sm text-muted-foreground\">Part Number: {deletingItem.partNumber}</p>\n              </div>\n            )}\n\n            <div className=\"flex justify-end gap-2\">\n              <Button variant=\"outline\" onClick={() => setDeletingItem(null)}>\n                Cancel\n              </Button>\n              <Button \n                variant=\"destructive\" \n                onClick={handleDelete}\n                disabled={deleteMutation.isPending}\n                data-testid=\"button-confirm-delete\"\n              >\n                {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":33600},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./localAuth\";\nimport { \n  adminOnly, \n  technicianOrAdmin, \n  clientOrAdmin, \n  authenticatedOnly,\n  filterDataByRole,\n  ensureOwnership,\n  createClientOwnershipMiddleware\n} from \"./rbacMiddleware\";\nimport { \n  insertCustomerSchema,\n  insertVehicleSchema,\n  insertAppointmentSchema,\n  insertRepairOrderSchema,\n  insertInvoiceSchema,\n  insertInspectionSchema,\n  insertInventorySchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Create ownership middleware with storage access\n  const clientOwnershipMiddleware = createClientOwnershipMiddleware(storage);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = req.user;\n      res.json({\n        id: user.id,\n        username: user.username,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        role: user.role\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  app.post('/api/logout', isAuthenticated, async (req: any, res) => {\n    try {\n      req.logout((err: any) => {\n        if (err) {\n          console.error(\"Error during logout:\", err);\n          return res.status(500).json({ message: \"Failed to logout\" });\n        }\n        req.session.destroy((err: any) => {\n          if (err) {\n            console.error(\"Error destroying session:\", err);\n            return res.status(500).json({ message: \"Failed to logout\" });\n          }\n          res.clearCookie('connect.sid');\n          res.json({ message: \"Logged out successfully\" });\n        });\n      });\n    } catch (error) {\n      console.error(\"Error during logout:\", error);\n      res.status(500).json({ message: \"Failed to logout\" });\n    }\n  });\n\n  // Dashboard metrics - Admin only\n  app.get('/api/dashboard/metrics', adminOnly, async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching dashboard metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Analytics endpoints - Admin only\n  app.get('/api/analytics/revenue', adminOnly, async (req, res) => {\n    try {\n      const startDate = req.query.startDate ? new Date(req.query.startDate as string) : undefined;\n      const endDate = req.query.endDate ? new Date(req.query.endDate as string) : undefined;\n      const analytics = await storage.getRevenueAnalytics(startDate, endDate);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching revenue analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch revenue analytics\" });\n    }\n  });\n\n  app.get('/api/analytics/customers', adminOnly, async (req, res) => {\n    try {\n      const analytics = await storage.getCustomerAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching customer analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer analytics\" });\n    }\n  });\n\n  app.get('/api/analytics/technicians', adminOnly, async (req, res) => {\n    try {\n      const analytics = await storage.getTechnicianAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching technician analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch technician analytics\" });\n    }\n  });\n\n  app.get('/api/analytics/inventory', adminOnly, async (req, res) => {\n    try {\n      const analytics = await storage.getInventoryAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching inventory analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory analytics\" });\n    }\n  });\n\n  // Settings endpoints - Admin only\n  app.get('/api/settings/business', adminOnly, async (req, res) => {\n    try {\n      const settings = await storage.getBusinessSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching business settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch business settings\" });\n    }\n  });\n\n  app.put('/api/settings/business', adminOnly, async (req, res) => {\n    try {\n      const { insertBusinessSettingsSchema } = await import('@shared/schema');\n      const updateSchema = insertBusinessSettingsSchema.partial();\n      const validatedData = updateSchema.parse(req.body);\n      const settings = await storage.updateBusinessSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating business settings:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid data provided\" });\n      }\n      res.status(500).json({ message: \"Failed to update business settings\" });\n    }\n  });\n\n  app.get('/api/settings/hours', adminOnly, async (req, res) => {\n    try {\n      const hours = await storage.getOperatingHours();\n      res.json(hours);\n    } catch (error) {\n      console.error(\"Error fetching operating hours:\", error);\n      res.status(500).json({ message: \"Failed to fetch operating hours\" });\n    }\n  });\n\n  app.put('/api/settings/hours', adminOnly, async (req, res) => {\n    try {\n      const { insertOperatingHoursSchema } = await import('@shared/schema');\n      const { z } = await import('zod');\n      const hoursArraySchema = z.array(insertOperatingHoursSchema);\n      const validatedData = hoursArraySchema.parse(req.body);\n      const hours = await storage.updateOperatingHours(validatedData);\n      res.json(hours);\n    } catch (error) {\n      console.error(\"Error updating operating hours:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid data provided\" });\n      }\n      res.status(500).json({ message: \"Failed to update operating hours\" });\n    }\n  });\n\n  app.get('/api/settings/notifications', adminOnly, async (req, res) => {\n    try {\n      const settings = await storage.getNotificationSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching notification settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch notification settings\" });\n    }\n  });\n\n  app.put('/api/settings/notifications', adminOnly, async (req, res) => {\n    try {\n      const { insertNotificationSettingsSchema } = await import('@shared/schema');\n      const updateSchema = insertNotificationSettingsSchema.partial();\n      const validatedData = updateSchema.parse(req.body);\n      const settings = await storage.updateNotificationSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating notification settings:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid data provided\" });\n      }\n      res.status(500).json({ message: \"Failed to update notification settings\" });\n    }\n  });\n\n  app.get('/api/settings/billing', adminOnly, async (req, res) => {\n    try {\n      const settings = await storage.getBillingSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching billing settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch billing settings\" });\n    }\n  });\n\n  app.put('/api/settings/billing', adminOnly, async (req, res) => {\n    try {\n      const { insertBillingSettingsSchema } = await import('@shared/schema');\n      const updateSchema = insertBillingSettingsSchema.partial();\n      const validatedData = updateSchema.parse(req.body);\n      const settings = await storage.updateBillingSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating billing settings:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid data provided\" });\n      }\n      res.status(500).json({ message: \"Failed to update billing settings\" });\n    }\n  });\n\n  app.get('/api/settings/integrations', adminOnly, async (req, res) => {\n    try {\n      const settings = await storage.getIntegrationSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching integration settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch integration settings\" });\n    }\n  });\n\n  app.put('/api/settings/integrations', adminOnly, async (req, res) => {\n    try {\n      const { insertIntegrationSettingsSchema } = await import('@shared/schema');\n      const updateSchema = insertIntegrationSettingsSchema.partial();\n      const validatedData = updateSchema.parse(req.body);\n      const settings = await storage.updateIntegrationSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating integration settings:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid data provided\" });\n      }\n      res.status(500).json({ message: \"Failed to update integration settings\" });\n    }\n  });\n\n  app.get('/api/settings/security', adminOnly, async (req, res) => {\n    try {\n      const settings = await storage.getSecuritySettings();\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error fetching security settings:\", error);\n      res.status(500).json({ message: \"Failed to fetch security settings\" });\n    }\n  });\n\n  app.put('/api/settings/security', adminOnly, async (req, res) => {\n    try {\n      const { insertSecuritySettingsSchema } = await import('@shared/schema');\n      const updateSchema = insertSecuritySettingsSchema.partial();\n      const validatedData = updateSchema.parse(req.body);\n      const settings = await storage.updateSecuritySettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error(\"Error updating security settings:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid data provided\" });\n      }\n      res.status(500).json({ message: \"Failed to update security settings\" });\n    }\n  });\n\n  // System Health - Admin only\n  app.get('/api/system/health', adminOnly, async (req, res) => {\n    try {\n      const healthRecords = await storage.getSystemHealth();\n      res.json(healthRecords);\n    } catch (error) {\n      console.error(\"Error fetching system health:\", error);\n      res.status(500).json({ message: \"Failed to fetch system health\" });\n    }\n  });\n\n  app.post('/api/system/health', adminOnly, async (req, res) => {\n    try {\n      const { component, status, responseTime, details } = req.body;\n      const healthRecord = await storage.recordSystemHealth(component, status, responseTime, details);\n      res.json(healthRecord);\n    } catch (error) {\n      console.error(\"Error recording system health:\", error);\n      res.status(500).json({ message: \"Failed to record system health\" });\n    }\n  });\n\n  // Audit Logs - Admin only\n  app.get('/api/audit-logs', adminOnly, async (req, res) => {\n    try {\n      const limit = req.query.limit ? Number(req.query.limit) : 50;\n      const auditLogs = await storage.getAuditLogs(limit);\n      res.json(auditLogs);\n    } catch (error) {\n      console.error(\"Error fetching audit logs:\", error);\n      res.status(500).json({ message: \"Failed to fetch audit logs\" });\n    }\n  });\n\n  // Customer routes - Admin only for full customer management\n  app.get('/api/customers', adminOnly, async (req, res) => {\n    try {\n      const customers = await storage.getCustomers();\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.get('/api/customers/:id', adminOnly, ensureOwnership('customer'), async (req, res) => {\n    try {\n      const customer = await storage.getCustomer(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error fetching customer:\", error);\n      res.status(500).json({ message: \"Failed to fetch customer\" });\n    }\n  });\n\n  app.post('/api/customers', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_CUSTOMER\",\n        entityType: \"customer\",\n        entityId: customer.id,\n        newValues: customer,\n        status: \"success\",\n      });\n\n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid customer data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create customer\" });\n    }\n  });\n\n  app.patch('/api/customers/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const oldCustomer = await storage.getCustomer(req.params.id);\n      if (!oldCustomer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      const customer = await storage.updateCustomer(req.params.id, customerData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_CUSTOMER\",\n        entityType: \"customer\",\n        entityId: customer.id,\n        oldValues: oldCustomer,\n        newValues: customer,\n        status: \"success\",\n      });\n\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid customer data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  app.delete('/api/customers/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const customer = await storage.getCustomer(req.params.id);\n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n\n      await storage.deleteCustomer(req.params.id);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"DELETE_CUSTOMER\",\n        entityType: \"customer\",\n        entityId: req.params.id,\n        oldValues: customer,\n        status: \"success\",\n      });\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting customer:\", error);\n      res.status(500).json({ message: \"Failed to delete customer\" });\n    }\n  });\n\n  // Vehicle routes - with role-based access control\n  app.get('/api/customers/:customerId/vehicles', isAuthenticated, filterDataByRole, async (req: any, res) => {\n    try {\n      const roleContext = req.roleContext;\n      const { customerId } = req.params;\n      \n      // For clients, ensure they can only access their own vehicles\n      if (roleContext.role === 'client') {\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer || customer.id !== customerId) {\n          return res.status(403).json({ message: \"Access denied - you can only view your own vehicles\" });\n        }\n      }\n      \n      const vehicles = await storage.getVehiclesByCustomer(customerId);\n      res.json(vehicles);\n    } catch (error) {\n      console.error(\"Error fetching vehicles:\", error);\n      res.status(500).json({ message: \"Failed to fetch vehicles\" });\n    }\n  });\n\n  // Create vehicle for a specific customer\n  app.post('/api/customers/:customerId/vehicles', isAuthenticated, filterDataByRole, async (req: any, res) => {\n    try {\n      const { customerId } = req.params;\n      const roleContext = req.roleContext;\n      \n      // For clients, ensure they can only create vehicles for their own customer\n      if (roleContext.role === 'client') {\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer || customer.id !== customerId) {\n          return res.status(403).json({ message: \"Access denied - you can only create vehicles for your own profile\" });\n        }\n      }\n      \n      // Parse and validate vehicle data\n      const vehicleData = insertVehicleSchema.parse({\n        ...req.body,\n        customerId, // Override customerId from URL param\n      });\n      \n      const vehicle = await storage.createVehicle(vehicleData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_VEHICLE\",\n        entityType: \"vehicle\",\n        entityId: vehicle.id,\n        newValues: vehicle,\n        status: \"success\",\n      });\n\n      res.status(201).json(vehicle);\n    } catch (error) {\n      console.error(\"Error creating vehicle:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid vehicle data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create vehicle\" });\n    }\n  });\n\n  app.post('/api/vehicles', isAuthenticated, clientOwnershipMiddleware, async (req: any, res) => {\n    try {\n      const vehicleData = insertVehicleSchema.parse(req.body);\n      \n      // For clients, ensure they can only create vehicles for their own customer\n      if (req.user.role === 'client' && req.clientCustomer) {\n        vehicleData.customerId = req.clientCustomer.id;\n      }\n      \n      const vehicle = await storage.createVehicle(vehicleData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_VEHICLE\",\n        entityType: \"vehicle\",\n        entityId: vehicle.id,\n        newValues: vehicle,\n        status: \"success\",\n      });\n\n      res.status(201).json(vehicle);\n    } catch (error) {\n      console.error(\"Error creating vehicle:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid vehicle data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create vehicle\" });\n    }\n  });\n\n  // Appointment routes\n  app.get('/api/appointments', isAuthenticated, filterDataByRole, async (req: any, res) => {\n    try {\n      const startDate = req.query.startDate ? new Date(req.query.startDate as string) : undefined;\n      const endDate = req.query.endDate ? new Date(req.query.endDate as string) : undefined;\n      const roleContext = req.roleContext;\n      \n      let appointments;\n      \n      if (roleContext.canAccessAll) {\n        // Admins see all appointments\n        appointments = await storage.getAppointments(startDate, endDate);\n      } else if (roleContext.role === 'client') {\n        // Clients see only their own appointments\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer) {\n          return res.status(404).json({ message: \"Customer profile not found\" });\n        }\n        appointments = await storage.getAppointmentsByCustomer(customer.id, startDate, endDate);\n      } else if (roleContext.canAccessAssigned) {\n        // Technicians see only appointments for jobs assigned to them\n        appointments = await storage.getAppointmentsByTechnician(roleContext.userId, startDate, endDate);\n      } else {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(appointments);\n    } catch (error) {\n      console.error(\"Error fetching appointments:\", error);\n      res.status(500).json({ message: \"Failed to fetch appointments\" });\n    }\n  });\n\n  app.post('/api/appointments', isAuthenticated, clientOwnershipMiddleware, async (req: any, res) => {\n    try {\n      const appointmentData = insertAppointmentSchema.parse({\n        ...req.body,\n        scheduledDate: new Date(req.body.scheduledDate)\n      });\n      \n      // For clients, ensure they can only create appointments for their own customer\n      if (req.user.role === 'client' && req.clientCustomer) {\n        appointmentData.customerId = req.clientCustomer.id;\n      }\n      \n      const appointment = await storage.createAppointment(appointmentData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_APPOINTMENT\",\n        entityType: \"appointment\",\n        entityId: appointment.id,\n        newValues: appointment,\n        status: \"success\",\n      });\n\n      res.status(201).json(appointment);\n    } catch (error) {\n      console.error(\"Error creating appointment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid appointment data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create appointment\" });\n    }\n  });\n\n  app.patch('/api/appointments/:id', isAuthenticated, clientOwnershipMiddleware, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userRole = req.user?.role;\n      \n      // Verify ownership before updating\n      const existingAppointment = await storage.getAppointment(id);\n      if (!existingAppointment) {\n        return res.status(404).json({ message: \"Appointment not found\" });\n      }\n      \n      // For clients, ensure they can only update their own appointments\n      if (userRole === 'client') {\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer || existingAppointment.customerId !== customer.id) {\n          return res.status(403).json({ message: \"Access denied - you can only update your own appointments\" });\n        }\n      }\n      \n      const appointmentData = insertAppointmentSchema.partial().parse({\n        ...req.body,\n        scheduledDate: req.body.scheduledDate ? new Date(req.body.scheduledDate) : undefined\n      });\n      \n      const appointment = await storage.updateAppointment(id, appointmentData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_APPOINTMENT\",\n        entityType: \"appointment\",\n        entityId: appointment.id,\n        newValues: appointment,\n        status: \"success\",\n      });\n\n      res.json(appointment);\n    } catch (error) {\n      console.error(\"Error updating appointment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid appointment data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update appointment\" });\n    }\n  });\n\n  // Repair Order routes - Technicians and Admins only\n  app.get('/api/repair-orders', isAuthenticated, filterDataByRole, async (req: any, res) => {\n    try {\n      const roleContext = req.roleContext;\n      let repairOrders;\n      \n      if (roleContext.canAccessAll) {\n        // Admins see all repair orders\n        repairOrders = await storage.getRepairOrders();\n      } else if (roleContext.canAccessAssigned) {\n        // Technicians see only assigned repair orders\n        repairOrders = await storage.getRepairOrdersByTechnician(roleContext.userId);\n      } else if (roleContext.role === 'client') {\n        // Clients see only their own repair orders\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer) {\n          return res.status(404).json({ message: \"Customer profile not found\" });\n        }\n        repairOrders = await storage.getRepairOrdersByCustomer(customer.id);\n      } else {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(repairOrders);\n    } catch (error) {\n      console.error(\"Error fetching repair orders:\", error);\n      res.status(500).json({ message: \"Failed to fetch repair orders\" });\n    }\n  });\n\n  app.post('/api/repair-orders', isAuthenticated, clientOwnershipMiddleware, async (req: any, res) => {\n    try {\n      const repairOrderData = insertRepairOrderSchema.parse(req.body);\n      \n      // For clients, ensure they can only create repair orders for their own customer\n      if (req.user.role === 'client' && req.clientCustomer) {\n        repairOrderData.customerId = req.clientCustomer.id;\n      }\n      \n      const repairOrder = await storage.createRepairOrder(repairOrderData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_REPAIR_ORDER\",\n        entityType: \"repair_order\",\n        entityId: repairOrder.id,\n        newValues: repairOrder,\n        status: \"success\",\n      });\n\n      res.status(201).json(repairOrder);\n    } catch (error) {\n      console.error(\"Error creating repair order:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid repair order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create repair order\" });\n    }\n  });\n\n  app.put('/api/repair-orders/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userRole = req.user?.role;\n      \n      // Verify ownership/assignment before updating\n      const existingRepairOrder = await storage.getRepairOrder(id);\n      if (!existingRepairOrder) {\n        return res.status(404).json({ message: \"Repair order not found\" });\n      }\n      \n      // For technicians, ensure they can only update assigned repair orders\n      if (userRole === 'user' && existingRepairOrder.technicianId !== req.user.id) {\n        return res.status(403).json({ message: \"Access denied - you can only update repair orders assigned to you\" });\n      }\n      \n      // For clients, ensure they can only update their own repair orders\n      if (userRole === 'client') {\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer || existingRepairOrder.customerId !== customer.id) {\n          return res.status(403).json({ message: \"Access denied - you can only update your own repair orders\" });\n        }\n      }\n      \n      // Parse and validate the request body\n      const repairOrderData = insertRepairOrderSchema.partial().parse(req.body);\n      \n      const repairOrder = await storage.updateRepairOrder(id, repairOrderData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_REPAIR_ORDER\",\n        entityType: \"repair_order\",\n        entityId: repairOrder.id,\n        newValues: repairOrder,\n        status: \"success\",\n      });\n\n      res.json(repairOrder);\n    } catch (error) {\n      console.error(\"Error updating repair order:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid repair order data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update repair order\" });\n    }\n  });\n\n  // Invoice routes - Admin only for all invoices, clients see their own\n  app.get('/api/invoices', isAuthenticated, filterDataByRole, async (req: any, res) => {\n    try {\n      const roleContext = req.roleContext;\n      let invoices;\n      \n      if (roleContext.canAccessAll) {\n        // Admins see all invoices\n        invoices = await storage.getInvoices();\n      } else if (roleContext.role === 'client') {\n        // Clients see only their own invoices\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer) {\n          return res.status(404).json({ message: \"Customer profile not found\" });\n        }\n        invoices = await storage.getInvoicesByCustomer(customer.id);\n      } else {\n        // Technicians have no access to invoices\n        return res.status(403).json({ message: \"Access denied - technicians cannot view invoices\" });\n      }\n      \n      res.json(invoices);\n    } catch (error) {\n      console.error(\"Error fetching invoices:\", error);\n      res.status(500).json({ message: \"Failed to fetch invoices\" });\n    }\n  });\n\n  app.post('/api/invoices', adminOnly, async (req: any, res) => {\n    try {\n      const invoiceData = insertInvoiceSchema.parse(req.body);\n      const invoice = await storage.createInvoice(invoiceData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_INVOICE\",\n        entityType: \"invoice\",\n        entityId: invoice.id,\n        newValues: invoice,\n        status: \"success\",\n      });\n\n      res.status(201).json(invoice);\n    } catch (error) {\n      console.error(\"Error creating invoice:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid invoice data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create invoice\" });\n    }\n  });\n\n  // Digital Inspection routes - Technicians and Admins only, clients can see their own\n  app.get('/api/inspections', isAuthenticated, filterDataByRole, async (req: any, res) => {\n    try {\n      const roleContext = req.roleContext;\n      let inspections;\n      \n      if (roleContext.canAccessAll) {\n        // Admins see all inspections\n        inspections = await storage.getInspections();\n      } else if (roleContext.canAccessAssigned) {\n        // Technicians see only inspections for jobs assigned to them\n        inspections = await storage.getInspectionsByTechnician(roleContext.userId);\n      } else if (roleContext.role === 'client') {\n        // Clients can see their own inspections\n        const customer = await storage.getCustomerByEmail(req.user.email);\n        if (!customer) {\n          return res.status(404).json({ message: \"Customer profile not found\" });\n        }\n        inspections = await storage.getInspectionsByCustomer(customer.id);\n      } else {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(inspections);\n    } catch (error) {\n      console.error(\"Error fetching inspections:\", error);\n      res.status(500).json({ message: \"Failed to fetch inspections\" });\n    }\n  });\n\n  app.post('/api/inspections', isAuthenticated, clientOwnershipMiddleware, async (req: any, res) => {\n    try {\n      const inspectionData = insertInspectionSchema.parse(req.body);\n      \n      // For clients, ensure they can only create inspections for their own customer\n      if (req.user.role === 'client' && req.clientCustomer) {\n        inspectionData.customerId = req.clientCustomer.id;\n      }\n      \n      const inspection = await storage.createInspection(inspectionData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_INSPECTION\",\n        entityType: \"inspection\",\n        entityId: inspection.id,\n        newValues: inspection,\n        status: \"success\",\n      });\n\n      res.status(201).json(inspection);\n    } catch (error) {\n      console.error(\"Error creating inspection:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid inspection data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create inspection\" });\n    }\n  });\n\n  app.put('/api/inspections/:id', isAuthenticated, clientOwnershipMiddleware, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userRole = req.user?.role;\n      \n      // Verify inspection exists\n      const existingInspection = await storage.getInspection(id);\n      if (!existingInspection) {\n        return res.status(404).json({ message: \"Inspection not found\" });\n      }\n      \n      // Parse and validate the request body\n      const inspectionData = insertInspectionSchema.partial().parse(req.body);\n      \n      // For clients, override customerId to ensure they can only update their own data\n      if (userRole === 'client' && req.clientCustomer) {\n        // Verify they own this inspection\n        if (existingInspection.customerId !== req.clientCustomer.id) {\n          return res.status(403).json({ message: \"Access denied - you can only update your own inspections\" });\n        }\n        inspectionData.customerId = req.clientCustomer.id;\n      }\n      \n      const inspection = await storage.updateInspection(id, inspectionData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_INSPECTION\",\n        entityType: \"inspection\",\n        entityId: inspection.id,\n        newValues: inspection,\n        status: \"success\",\n      });\n\n      res.json(inspection);\n    } catch (error) {\n      console.error(\"Error updating inspection:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid inspection data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update inspection\" });\n    }\n  });\n\n  // User routes\n  app.get('/api/users', adminOnly, async (req, res) => {\n    try {\n      const users = await storage.getUsers();\n      // Don't include password in response\n      const safeUsers = users.map(({ password, ...user }) => user);\n      res.json(safeUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch('/api/users/:id/role', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { role } = req.body;\n\n      // Validate role\n      if (!['client', 'user', 'admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role. Must be 'client', 'user', or 'admin'\" });\n      }\n\n      const updatedUser = await storage.updateUser(id, { role });\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_USER_ROLE\",\n        entityType: \"user\",\n        entityId: id,\n        oldValues: { role: \"previous_role\" }, // Would need to fetch previous value in a real implementation\n        newValues: { role },\n        status: \"success\",\n      });\n\n      // Don't include password in response\n      const { password, ...safeUser } = updatedUser;\n      res.json(safeUser);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  // Inventory routes - Technicians and Admins only\n  app.get('/api/inventory', technicianOrAdmin, async (req, res) => {\n    try {\n      const items = await storage.getInventoryItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching inventory:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory items\" });\n    }\n  });\n\n  app.get('/api/inventory/low-stock', technicianOrAdmin, async (req, res) => {\n    try {\n      const items = await storage.getLowStockItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching low stock items:\", error);\n      res.status(500).json({ message: \"Failed to fetch low stock items\" });\n    }\n  });\n\n  app.get('/api/inventory/:id', technicianOrAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const item = await storage.getInventoryItem(id);\n      if (!item) {\n        return res.status(404).json({ message: \"Inventory item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error fetching inventory item:\", error);\n      res.status(500).json({ message: \"Failed to fetch inventory item\" });\n    }\n  });\n\n  app.post('/api/inventory', adminOnly, async (req: any, res) => {\n    try {\n      const itemData = insertInventorySchema.parse(req.body);\n      const item = await storage.createInventoryItem(itemData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_INVENTORY_ITEM\",\n        entityType: \"inventory\",\n        entityId: item.id,\n        newValues: item,\n        status: \"success\",\n      });\n\n      res.status(201).json(item);\n    } catch (error) {\n      console.error(\"Error creating inventory item:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid inventory data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create inventory item\" });\n    }\n  });\n\n  app.patch('/api/inventory/:id', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const itemData = insertInventorySchema.partial().parse(req.body);\n      const item = await storage.updateInventoryItem(id, itemData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_INVENTORY_ITEM\",\n        entityType: \"inventory\",\n        entityId: id,\n        newValues: itemData,\n        status: \"success\",\n      });\n\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating inventory item:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid inventory data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update inventory item\" });\n    }\n  });\n\n  app.patch('/api/inventory/:id/quantity', technicianOrAdmin, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { quantity } = req.body;\n      \n      if (typeof quantity !== 'number' || quantity < 0) {\n        return res.status(400).json({ message: \"Invalid quantity\" });\n      }\n      \n      const item = await storage.updateInventoryQuantity(id, quantity);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_INVENTORY_QUANTITY\",\n        entityType: \"inventory\",\n        entityId: id,\n        newValues: { quantity },\n        status: \"success\",\n      });\n\n      res.json(item);\n    } catch (error) {\n      console.error(\"Error updating inventory quantity:\", error);\n      res.status(500).json({ message: \"Failed to update inventory quantity\" });\n    }\n  });\n\n  app.delete('/api/inventory/:id', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteInventoryItem(id);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"DELETE_INVENTORY_ITEM\",\n        entityType: \"inventory\",\n        entityId: id,\n        status: \"success\",\n      });\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting inventory item:\", error);\n      res.status(500).json({ message: \"Failed to delete inventory item\" });\n    }\n  });\n\n  // Review Campaign Routes (Admin only)\n  app.get('/api/campaigns', adminOnly, async (req, res) => {\n    try {\n      const campaigns = await storage.getReviewCampaigns();\n      res.json(campaigns);\n    } catch (error) {\n      console.error(\"Error fetching review campaigns:\", error);\n      res.status(500).json({ message: \"Failed to fetch review campaigns\" });\n    }\n  });\n\n  app.get('/api/campaigns/:id', adminOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const campaign = await storage.getReviewCampaign(id);\n      \n      if (!campaign) {\n        return res.status(404).json({ message: \"Campaign not found\" });\n      }\n      \n      res.json(campaign);\n    } catch (error) {\n      console.error(\"Error fetching review campaign:\", error);\n      res.status(500).json({ message: \"Failed to fetch review campaign\" });\n    }\n  });\n\n  app.post('/api/campaigns', adminOnly, async (req: any, res) => {\n    try {\n      const { insertReviewCampaignSchema } = await import('@shared/schema');\n      const validatedData = insertReviewCampaignSchema.parse(req.body);\n      const campaign = await storage.createReviewCampaign(validatedData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_CAMPAIGN\",\n        entityType: \"review_campaigns\",\n        entityId: campaign.id,\n        status: \"success\",\n      });\n      \n      res.status(201).json(campaign);\n    } catch (error) {\n      console.error(\"Error creating review campaign:\", error);\n      if (error instanceof Error && error.name === 'ZodError') {\n        return res.status(400).json({ message: \"Invalid campaign data\", errors: error });\n      }\n      res.status(500).json({ message: \"Failed to create review campaign\" });\n    }\n  });\n\n  app.patch('/api/campaigns/:id', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const campaign = await storage.updateReviewCampaign(id, req.body);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_CAMPAIGN\",\n        entityType: \"review_campaigns\",\n        entityId: id,\n        status: \"success\",\n      });\n      \n      res.json(campaign);\n    } catch (error) {\n      console.error(\"Error updating review campaign:\", error);\n      res.status(500).json({ message: \"Failed to update review campaign\" });\n    }\n  });\n\n  app.patch('/api/campaigns/:id/status', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { status } = req.body;\n      const campaign = await storage.updateCampaignStatus(id, status);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_CAMPAIGN_STATUS\",\n        entityType: \"review_campaigns\",\n        entityId: id,\n        status: \"success\",\n      });\n      \n      res.json(campaign);\n    } catch (error) {\n      console.error(\"Error updating campaign status:\", error);\n      res.status(500).json({ message: \"Failed to update campaign status\" });\n    }\n  });\n\n  app.delete('/api/campaigns/:id', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteReviewCampaign(id);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"DELETE_CAMPAIGN\",\n        entityType: \"review_campaigns\",\n        entityId: id,\n        status: \"success\",\n      });\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting review campaign:\", error);\n      res.status(500).json({ message: \"Failed to delete review campaign\" });\n    }\n  });\n\n  // Review Routes (Admin only)\n  app.get('/api/reviews', adminOnly, async (req, res) => {\n    try {\n      const { campaignId } = req.query;\n      \n      let reviews;\n      if (campaignId && typeof campaignId === 'string') {\n        reviews = await storage.getReviewsByCampaign(campaignId);\n      } else {\n        reviews = await storage.getReviews();\n      }\n      \n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.get('/api/reviews/:id', adminOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const review = await storage.getReview(id);\n      \n      if (!review) {\n        return res.status(404).json({ message: \"Review not found\" });\n      }\n      \n      res.json(review);\n    } catch (error) {\n      console.error(\"Error fetching review:\", error);\n      res.status(500).json({ message: \"Failed to fetch review\" });\n    }\n  });\n\n  app.post('/api/reviews', adminOnly, async (req: any, res) => {\n    try {\n      const review = await storage.createReview(req.body);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_REVIEW\",\n        entityType: \"reviews\",\n        entityId: review.id,\n        status: \"success\",\n      });\n      \n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  app.patch('/api/reviews/:id', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const review = await storage.updateReview(id, req.body);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_REVIEW\",\n        entityType: \"reviews\",\n        entityId: id,\n        status: \"success\",\n      });\n      \n      res.json(review);\n    } catch (error) {\n      console.error(\"Error updating review:\", error);\n      res.status(500).json({ message: \"Failed to update review\" });\n    }\n  });\n\n  app.delete('/api/reviews/:id', adminOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteReview(id);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"DELETE_REVIEW\",\n        entityType: \"reviews\",\n        entityId: id,\n        status: \"success\",\n      });\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting review:\", error);\n      res.status(500).json({ message: \"Failed to delete review\" });\n    }\n  });\n\n  // Conversation Routes (Messaging System)\n  app.get('/api/conversations', authenticatedOnly, async (req, res) => {\n    try {\n      const conversations = await storage.getConversations();\n      res.json(conversations);\n    } catch (error) {\n      console.error(\"Error fetching conversations:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversations\" });\n    }\n  });\n\n  app.get('/api/conversations/:id', authenticatedOnly, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const conversation = await storage.getConversation(id);\n      \n      if (!conversation) {\n        return res.status(404).json({ message: \"Conversation not found\" });\n      }\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error fetching conversation:\", error);\n      res.status(500).json({ message: \"Failed to fetch conversation\" });\n    }\n  });\n\n  app.post('/api/conversations', authenticatedOnly, async (req: any, res) => {\n    try {\n      const conversation = await storage.createConversation(req.body);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"CREATE_CONVERSATION\",\n        entityType: \"conversations\",\n        entityId: conversation.id,\n        status: \"success\",\n      });\n      \n      res.status(201).json(conversation);\n    } catch (error) {\n      console.error(\"Error creating conversation:\", error);\n      res.status(500).json({ message: \"Failed to create conversation\" });\n    }\n  });\n\n  app.patch('/api/conversations/:id', authenticatedOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const conversation = await storage.updateConversation(id, req.body);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"UPDATE_CONVERSATION\",\n        entityType: \"conversations\",\n        entityId: id,\n        status: \"success\",\n      });\n      \n      res.json(conversation);\n    } catch (error) {\n      console.error(\"Error updating conversation:\", error);\n      res.status(500).json({ message: \"Failed to update conversation\" });\n    }\n  });\n\n  app.delete('/api/conversations/:id', authenticatedOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteConversation(id);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"DELETE_CONVERSATION\",\n        entityType: \"conversations\",\n        entityId: id,\n        status: \"success\",\n      });\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting conversation:\", error);\n      res.status(500).json({ message: \"Failed to delete conversation\" });\n    }\n  });\n\n  // Message Routes\n  app.get('/api/conversations/:conversationId/messages', authenticatedOnly, async (req, res) => {\n    try {\n      const { conversationId } = req.params;\n      const messages = await storage.getMessagesByConversation(conversationId);\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  app.post('/api/conversations/:conversationId/messages', authenticatedOnly, async (req: any, res) => {\n    try {\n      const { conversationId } = req.params;\n      const messageData = {\n        ...req.body,\n        conversationId,\n      };\n      \n      const message = await storage.createMessage(messageData);\n      \n      // Audit log\n      await storage.createAuditLog({\n        userId: req.user.id,\n        operation: \"SEND_MESSAGE\",\n        entityType: \"messages\",\n        entityId: message.id,\n        status: \"success\",\n      });\n      \n      res.status(201).json(message);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n      res.status(500).json({ message: \"Failed to send message\" });\n    }\n  });\n\n  app.patch('/api/messages/:id/read', authenticatedOnly, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const message = await storage.markMessageAsRead(id);\n      res.json(message);\n    } catch (error) {\n      console.error(\"Error marking message as read:\", error);\n      res.status(500).json({ message: \"Failed to mark message as read\" });\n    }\n  });\n\n  app.patch('/api/conversations/:conversationId/read-all', authenticatedOnly, async (req: any, res) => {\n    try {\n      const { conversationId } = req.params;\n      await storage.markConversationMessagesAsRead(conversationId);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error marking messages as read:\", error);\n      res.status(500).json({ message: \"Failed to mark messages as read\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":50330},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  decimal,\n  integer,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for local authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\", { length: 50 }).unique().notNull(),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\", { length: 255 }).notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"client\"), // admin (shop manager), user (technician), client\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  firstName: varchar(\"first_name\", { length: 100 }).notNull(),\n  lastName: varchar(\"last_name\", { length: 100 }).notNull(),\n  email: varchar(\"email\", { length: 255 }).unique(),\n  phone: varchar(\"phone\", { length: 20 }),\n  address: text(\"address\"),\n  city: varchar(\"city\", { length: 100 }),\n  state: varchar(\"state\", { length: 50 }),\n  zipCode: varchar(\"zip_code\", { length: 10 }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vehicles table\nexport const vehicles = pgTable(\"vehicles\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  year: integer(\"year\").notNull(),\n  make: varchar(\"make\", { length: 50 }).notNull(),\n  model: varchar(\"model\", { length: 50 }).notNull(),\n  vin: varchar(\"vin\", { length: 17 }).unique(),\n  licensePlate: varchar(\"license_plate\", { length: 20 }),\n  color: varchar(\"color\", { length: 30 }),\n  mileage: integer(\"mileage\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Appointments table\nexport const appointments = pgTable(\"appointments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  vehicleId: uuid(\"vehicle_id\").references(() => vehicles.id).notNull(),\n  scheduledDate: timestamp(\"scheduled_date\").notNull(),\n  duration: integer(\"duration\").default(60), // minutes\n  serviceType: varchar(\"service_type\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 20 }).default(\"scheduled\"), // scheduled, confirmed, in_progress, completed, cancelled\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Repair Orders table\nexport const repairOrders = pgTable(\"repair_orders\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderNumber: varchar(\"order_number\", { length: 50 }).unique().notNull(),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  vehicleId: uuid(\"vehicle_id\").references(() => vehicles.id).notNull(),\n  appointmentId: uuid(\"appointment_id\").references(() => appointments.id),\n  technicianId: varchar(\"technician_id\").references(() => users.id),\n  status: varchar(\"status\", { length: 20 }).default(\"created\"), // created, in_progress, awaiting_parts, completed, delivered\n  priority: varchar(\"priority\", { length: 10 }).default(\"normal\"), // low, normal, high, urgent\n  description: text(\"description\").notNull(),\n  diagnosis: text(\"diagnosis\"),\n  estimatedCost: decimal(\"estimated_cost\", { precision: 10, scale: 2 }),\n  actualCost: decimal(\"actual_cost\", { precision: 10, scale: 2 }),\n  laborHours: decimal(\"labor_hours\", { precision: 5, scale: 2 }),\n  startedAt: timestamp(\"started_at\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Invoices table\nexport const invoices = pgTable(\"invoices\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  invoiceNumber: varchar(\"invoice_number\", { length: 50 }).unique().notNull(),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  repairOrderId: uuid(\"repair_order_id\").references(() => repairOrders.id),\n  subtotal: decimal(\"subtotal\", { precision: 10, scale: 2 }).notNull(),\n  tax: decimal(\"tax\", { precision: 10, scale: 2 }).default(\"0\"),\n  total: decimal(\"total\", { precision: 10, scale: 2 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, paid, overdue, cancelled\n  dueDate: timestamp(\"due_date\"),\n  paidAt: timestamp(\"paid_at\"),\n  paymentMethod: varchar(\"payment_method\", { length: 50 }),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Digital Inspections table\nexport const inspections = pgTable(\"inspections\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id).notNull(),\n  vehicleId: uuid(\"vehicle_id\").references(() => vehicles.id).notNull(),\n  repairOrderId: uuid(\"repair_order_id\").references(() => repairOrders.id), // nullable - links inspection to specific repair order\n  vehicleInfo: text(\"vehicle_info\").notNull(), // e.g., \"2020 Honda Civic - ABC123\"\n  customerName: varchar(\"customer_name\", { length: 200 }).notNull(),\n  serviceType: varchar(\"service_type\", { length: 100 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"pending\"), // pending, in-progress, completed\n  checklistItems: integer(\"checklist_items\").default(12),\n  completedItems: integer(\"completed_items\").default(0),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Audit Log table for tracking all operations\nexport const auditLog = pgTable(\"audit_log\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  operation: varchar(\"operation\", { length: 100 }).notNull(),\n  entityType: varchar(\"entity_type\", { length: 50 }).notNull(),\n  entityId: varchar(\"entity_id\", { length: 255 }),\n  oldValues: jsonb(\"old_values\"),\n  newValues: jsonb(\"new_values\"),\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  userAgent: text(\"user_agent\"),\n  status: varchar(\"status\", { length: 20 }).default(\"success\"), // success, error\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// System Health table for monitoring\nexport const systemHealth = pgTable(\"system_health\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  component: varchar(\"component\", { length: 50 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull(), // healthy, warning, error\n  responseTime: integer(\"response_time\"), // in milliseconds\n  details: jsonb(\"details\"),\n  checkedAt: timestamp(\"checked_at\").defaultNow(),\n});\n\n// Inventory table for parts and supplies\nexport const inventory = pgTable(\"inventory\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  partNumber: varchar(\"part_number\", { length: 100 }).unique().notNull(),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  category: varchar(\"category\", { length: 100 }).notNull(),\n  quantity: integer(\"quantity\").default(0).notNull(),\n  minStock: integer(\"min_stock\").default(0).notNull(),\n  unitCost: decimal(\"unit_cost\", { precision: 10, scale: 2 }).notNull(),\n  sellingPrice: decimal(\"selling_price\", { precision: 10, scale: 2 }),\n  supplier: varchar(\"supplier\", { length: 200 }),\n  supplierPartNumber: varchar(\"supplier_part_number\", { length: 100 }),\n  location: varchar(\"location\", { length: 100 }),\n  lastOrdered: timestamp(\"last_ordered\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Business Settings table\nexport const businessSettings = pgTable(\"business_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  businessName: varchar(\"business_name\", { length: 200 }),\n  phone: varchar(\"phone\", { length: 50 }),\n  email: varchar(\"email\", { length: 100 }),\n  website: varchar(\"website\", { length: 200 }),\n  address: text(\"address\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Operating Hours table\nexport const operatingHours = pgTable(\"operating_hours\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  dayOfWeek: integer(\"day_of_week\").notNull(), // 0 = Sunday, 1 = Monday, etc.\n  isOpen: boolean(\"is_open\").default(true).notNull(),\n  openTime: varchar(\"open_time\", { length: 10 }), // HH:MM format\n  closeTime: varchar(\"close_time\", { length: 10 }), // HH:MM format\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notification Settings table\nexport const notificationSettings = pgTable(\"notification_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  emailNotifications: boolean(\"email_notifications\").default(true).notNull(),\n  smsNotifications: boolean(\"sms_notifications\").default(false).notNull(),\n  appointmentReminders: boolean(\"appointment_reminders\").default(true).notNull(),\n  paymentNotifications: boolean(\"payment_notifications\").default(true).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Billing Settings table\nexport const billingSettings = pgTable(\"billing_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  planName: varchar(\"plan_name\", { length: 100 }),\n  planPrice: varchar(\"plan_price\", { length: 20 }),\n  billingCycle: varchar(\"billing_cycle\", { length: 20 }), // monthly, yearly\n  paymentMethod: varchar(\"payment_method\", { length: 50 }),\n  cardLast4: varchar(\"card_last4\", { length: 4 }),\n  cardExpiry: varchar(\"card_expiry\", { length: 10 }),\n  nextBillingDate: timestamp(\"next_billing_date\"),\n  autoRenew: boolean(\"auto_renew\").default(true).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Integration Settings table\nexport const integrationSettings = pgTable(\"integration_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  googleReviewsEnabled: boolean(\"google_reviews_enabled\").default(false).notNull(),\n  googleReviewsApiKey: text(\"google_reviews_api_key\"),\n  stripeEnabled: boolean(\"stripe_enabled\").default(false).notNull(),\n  stripeApiKey: text(\"stripe_api_key\"),\n  stripePublishableKey: text(\"stripe_publishable_key\"),\n  twilioEnabled: boolean(\"twilio_enabled\").default(false).notNull(),\n  twilioAccountSid: text(\"twilio_account_sid\"),\n  twilioAuthToken: text(\"twilio_auth_token\"),\n  twilioPhoneNumber: varchar(\"twilio_phone_number\", { length: 20 }),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Security Settings table\nexport const securitySettings = pgTable(\"security_settings\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  twoFactorEnabled: boolean(\"two_factor_enabled\").default(false).notNull(),\n  sessionTimeout: integer(\"session_timeout\").default(30).notNull(), // minutes\n  passwordMinLength: integer(\"password_min_length\").default(8).notNull(),\n  requireSpecialChar: boolean(\"require_special_char\").default(true).notNull(),\n  requireNumbers: boolean(\"require_numbers\").default(true).notNull(),\n  requireUppercase: boolean(\"require_uppercase\").default(true).notNull(),\n  ipWhitelist: text(\"ip_whitelist\").array(),\n  loginAttemptsLimit: integer(\"login_attempts_limit\").default(5).notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Review Campaigns table\nexport const reviewCampaigns = pgTable(\"review_campaigns\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 200 }).notNull(),\n  description: text(\"description\"),\n  status: varchar(\"status\", { length: 20 }).default(\"active\").notNull(), // active, paused, inactive\n  trigger: varchar(\"trigger\", { length: 50 }).notNull(), // post_service, monthly, manual\n  delayDays: integer(\"delay_days\").default(1).notNull(), // days after trigger\n  emailTemplate: text(\"email_template\"),\n  smsTemplate: text(\"sms_template\"),\n  sentCount: integer(\"sent_count\").default(0).notNull(),\n  responseCount: integer(\"response_count\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id),\n  campaignId: uuid(\"campaign_id\").references(() => reviewCampaigns.id),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  platform: varchar(\"platform\", { length: 50 }), // Google, Yelp, Facebook, etc.\n  isPublic: boolean(\"is_public\").default(true).notNull(),\n  responseText: text(\"response_text\"), // Business response to review\n  respondedAt: timestamp(\"responded_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const customerRelations = relations(customers, ({ many }) => ({\n  vehicles: many(vehicles),\n  appointments: many(appointments),\n  repairOrders: many(repairOrders),\n  invoices: many(invoices),\n  inspections: many(inspections),\n}));\n\nexport const vehicleRelations = relations(vehicles, ({ one, many }) => ({\n  customer: one(customers, {\n    fields: [vehicles.customerId],\n    references: [customers.id],\n  }),\n  appointments: many(appointments),\n  repairOrders: many(repairOrders),\n  inspections: many(inspections),\n}));\n\nexport const appointmentRelations = relations(appointments, ({ one, many }) => ({\n  customer: one(customers, {\n    fields: [appointments.customerId],\n    references: [customers.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [appointments.vehicleId],\n    references: [vehicles.id],\n  }),\n  repairOrders: many(repairOrders),\n}));\n\nexport const repairOrderRelations = relations(repairOrders, ({ one }) => ({\n  customer: one(customers, {\n    fields: [repairOrders.customerId],\n    references: [customers.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [repairOrders.vehicleId],\n    references: [vehicles.id],\n  }),\n  appointment: one(appointments, {\n    fields: [repairOrders.appointmentId],\n    references: [appointments.id],\n  }),\n  technician: one(users, {\n    fields: [repairOrders.technicianId],\n    references: [users.id],\n  }),\n  invoice: one(invoices, {\n    fields: [repairOrders.id],\n    references: [invoices.repairOrderId],\n  }),\n}));\n\nexport const invoiceRelations = relations(invoices, ({ one }) => ({\n  customer: one(customers, {\n    fields: [invoices.customerId],\n    references: [customers.id],\n  }),\n  repairOrder: one(repairOrders, {\n    fields: [invoices.repairOrderId],\n    references: [repairOrders.id],\n  }),\n}));\n\nexport const inspectionRelations = relations(inspections, ({ one }) => ({\n  customer: one(customers, {\n    fields: [inspections.customerId],\n    references: [customers.id],\n  }),\n  vehicle: one(vehicles, {\n    fields: [inspections.vehicleId],\n    references: [vehicles.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVehicleSchema = createInsertSchema(vehicles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAppointmentSchema = createInsertSchema(appointments)\n  .omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n  })\n  .extend({\n    scheduledDate: z.coerce.date(),\n  });\n\nexport const insertRepairOrderSchema = createInsertSchema(repairOrders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInvoiceSchema = createInsertSchema(invoices).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertInspectionSchema = createInsertSchema(inspections).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLog).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertInventorySchema = createInsertSchema(inventory)\n  .omit({\n    id: true,\n    createdAt: true,\n    updatedAt: true,\n  })\n  .extend({\n    unitCost: z.coerce.number().min(0, \"Unit cost must be positive\"),\n    sellingPrice: z.coerce.number().min(0, \"Selling price must be positive\").optional(),\n    quantity: z.coerce.number().int().min(0, \"Quantity must be 0 or greater\"),\n    minStock: z.coerce.number().int().min(0, \"Min stock must be 0 or greater\"),\n  });\n\n// User registration schema\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// User login schema\nexport const loginUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type Vehicle = typeof vehicles.$inferSelect;\nexport type InsertVehicle = z.infer<typeof insertVehicleSchema>;\nexport type Appointment = typeof appointments.$inferSelect;\nexport type InsertAppointment = z.infer<typeof insertAppointmentSchema>;\nexport type RepairOrder = typeof repairOrders.$inferSelect;\nexport type InsertRepairOrder = z.infer<typeof insertRepairOrderSchema>;\nexport type Invoice = typeof invoices.$inferSelect;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\nexport type Inspection = typeof inspections.$inferSelect;\nexport type InsertInspection = z.infer<typeof insertInspectionSchema>;\nexport type AuditLog = typeof auditLog.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type SystemHealth = typeof systemHealth.$inferSelect;\nexport type InventoryItem = typeof inventory.$inferSelect;\nexport type InsertInventoryItem = z.infer<typeof insertInventorySchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\n\n// Settings schemas\nexport const insertBusinessSettingsSchema = createInsertSchema(businessSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertOperatingHoursSchema = createInsertSchema(operatingHours).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSettingsSchema = createInsertSchema(notificationSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertBillingSettingsSchema = createInsertSchema(billingSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertIntegrationSettingsSchema = createInsertSchema(integrationSettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertSecuritySettingsSchema = createInsertSchema(securitySettings).omit({\n  id: true,\n  updatedAt: true,\n});\n\n// Settings types\nexport type BusinessSettings = typeof businessSettings.$inferSelect;\nexport type InsertBusinessSettings = z.infer<typeof insertBusinessSettingsSchema>;\nexport type OperatingHours = typeof operatingHours.$inferSelect;\nexport type InsertOperatingHours = z.infer<typeof insertOperatingHoursSchema>;\nexport type NotificationSettings = typeof notificationSettings.$inferSelect;\nexport type InsertNotificationSettings = z.infer<typeof insertNotificationSettingsSchema>;\nexport type BillingSettings = typeof billingSettings.$inferSelect;\nexport type InsertBillingSettings = z.infer<typeof insertBillingSettingsSchema>;\nexport type IntegrationSettings = typeof integrationSettings.$inferSelect;\nexport type InsertIntegrationSettings = z.infer<typeof insertIntegrationSettingsSchema>;\nexport type SecuritySettings = typeof securitySettings.$inferSelect;\nexport type InsertSecuritySettings = z.infer<typeof insertSecuritySettingsSchema>;\n\n// Review Campaign schemas\nexport const insertReviewCampaignSchema = createInsertSchema(reviewCampaigns).omit({\n  id: true,\n  sentCount: true,\n  responseCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Review types\nexport type ReviewCampaign = typeof reviewCampaigns.$inferSelect;\nexport type InsertReviewCampaign = z.infer<typeof insertReviewCampaignSchema>;\nexport type Review = typeof reviews.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\n// Conversations table for two-way texting\nexport const conversations = pgTable(\"conversations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: uuid(\"customer_id\").references(() => customers.id),\n  customerName: varchar(\"customer_name\", { length: 200 }).notNull(),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }).notNull(),\n  lastMessage: text(\"last_message\"),\n  lastMessageAt: timestamp(\"last_message_at\"),\n  status: varchar(\"status\", { length: 20 }).default(\"active\").notNull(), // active, archived\n  unreadCount: integer(\"unread_count\").default(0).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Messages table for SMS messages\nexport const messages = pgTable(\"messages\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  conversationId: uuid(\"conversation_id\").references(() => conversations.id).notNull(),\n  direction: varchar(\"direction\", { length: 20 }).notNull(), // inbound, outbound\n  content: text(\"content\").notNull(),\n  phoneFrom: varchar(\"phone_from\", { length: 20 }).notNull(),\n  phoneTo: varchar(\"phone_to\", { length: 20 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).default(\"sent\").notNull(), // sent, delivered, failed, received\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  twilioSid: varchar(\"twilio_sid\", { length: 100 }), // Twilio message SID if sent via Twilio\n  sentBy: uuid(\"sent_by\").references(() => users.id), // User who sent the message (for outbound)\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Messaging schemas\nexport const insertConversationSchema = createInsertSchema(conversations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Messaging types\nexport type Conversation = typeof conversations.$inferSelect;\nexport type InsertConversation = z.infer<typeof insertConversationSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\n","size_bytes":23145},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"README.Docker.md":{"content":"# 🐳 AutoFlow GMS - Docker Deployment Guide\n\nComplete guide to run AutoFlow Garage Management System using Docker.\n\n---\n\n## 📋 Prerequisites\n\n- **Docker** (v20.10 or later)\n- **Docker Compose** (v2.0 or later)\n- At least **2GB RAM** and **10GB disk space**\n\n### Install Docker\n\n**Ubuntu/Debian:**\n```bash\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\nsudo usermod -aG docker $USER\n```\n\n**CentOS/RHEL:**\n```bash\nsudo yum install -y docker docker-compose\nsudo systemctl start docker\nsudo systemctl enable docker\n```\n\n**macOS/Windows:**\nDownload and install [Docker Desktop](https://www.docker.com/products/docker-desktop)\n\n---\n\n## 🚀 Quick Start\n\n### 1. Clone the Repository\n```bash\ngit clone <your-repository-url>\ncd autoflow-gms\n```\n\n### 2. Configure Environment\n```bash\n# Copy example environment file\ncp .env.example .env\n\n# Edit with your settings\nnano .env\n```\n\n**Required Settings:**\n- `PGPASSWORD` - Change the default database password\n- `SESSION_SECRET` - Generate a random string (use: `openssl rand -hex 32`)\n\n### 3. Start the Application\n```bash\n# Build and start all services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Check status\ndocker-compose ps\n```\n\n### 4. Initialize Database\n```bash\n# Run database migrations\ndocker-compose exec app npm run db:push\n```\n\n### 5. Access the Application\nOpen your browser and navigate to:\n- **Application:** http://localhost:5000\n- **PostgreSQL:** localhost:5432\n\n---\n\n## 🔧 Docker Commands\n\n### Service Management\n```bash\n# Start services\ndocker-compose up -d\n\n# Stop services\ndocker-compose down\n\n# Restart services\ndocker-compose restart\n\n# Stop and remove volumes (deletes data!)\ndocker-compose down -v\n```\n\n### Logs and Debugging\n```bash\n# View all logs\ndocker-compose logs -f\n\n# View app logs only\ndocker-compose logs -f app\n\n# View database logs\ndocker-compose logs -f postgres\n\n# Execute commands in container\ndocker-compose exec app sh\ndocker-compose exec postgres psql -U autoflow_user -d autoflow_gms\n```\n\n### Database Operations\n```bash\n# Run migrations\ndocker-compose exec app npm run db:push\n\n# Backup database\ndocker-compose exec postgres pg_dump -U autoflow_user autoflow_gms > backup.sql\n\n# Restore database\ndocker-compose exec -T postgres psql -U autoflow_user autoflow_gms < backup.sql\n\n# Access PostgreSQL shell\ndocker-compose exec postgres psql -U autoflow_user -d autoflow_gms\n```\n\n### Application Updates\n```bash\n# Pull latest code\ngit pull\n\n# Rebuild and restart\ndocker-compose up -d --build\n\n# Run migrations after update\ndocker-compose exec app npm run db:push\n```\n\n---\n\n## 📦 Production Deployment\n\n### 1. Using Docker Compose (Simple)\n\n**Step 1:** Configure production environment\n```bash\n# Edit .env file\nnano .env\n```\n\nSet production values:\n```env\nNODE_ENV=production\nSESSION_SECRET=<generate-strong-random-string>\nPGPASSWORD=<strong-database-password>\n```\n\n**Step 2:** Deploy\n```bash\ndocker-compose up -d\n```\n\n### 2. Using Docker Swarm (Scalable)\n\n**Initialize Swarm:**\n```bash\ndocker swarm init\n```\n\n**Deploy Stack:**\n```bash\ndocker stack deploy -c docker-compose.yml autoflow\n```\n\n**Scale Services:**\n```bash\ndocker service scale autoflow_app=3\n```\n\n### 3. Behind Reverse Proxy (Nginx/Traefik)\n\n**Nginx Configuration:**\n```nginx\nserver {\n    listen 80;\n    server_name yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n**Traefik Labels (add to docker-compose.yml):**\n```yaml\nlabels:\n  - \"traefik.enable=true\"\n  - \"traefik.http.routers.autoflow.rule=Host(`yourdomain.com`)\"\n  - \"traefik.http.routers.autoflow.entrypoints=websecure\"\n  - \"traefik.http.routers.autoflow.tls.certresolver=letsencrypt\"\n```\n\n---\n\n## 🔒 Security Best Practices\n\n1. **Change Default Passwords:**\n   ```bash\n   # Generate strong password\n   openssl rand -base64 32\n   ```\n\n2. **Use Secrets Management:**\n   ```bash\n   # Docker secrets (Swarm mode)\n   echo \"my-secret-password\" | docker secret create db_password -\n   ```\n\n3. **Limit Exposed Ports:**\n   ```yaml\n   # In docker-compose.yml, remove port mapping for postgres\n   # postgres:\n   #   ports:\n   #     - \"5432:5432\"  # Remove this line\n   ```\n\n4. **Regular Updates:**\n   ```bash\n   docker-compose pull\n   docker-compose up -d --build\n   ```\n\n5. **Enable SSL/TLS:**\n   Use reverse proxy with Let's Encrypt or your own certificates\n\n---\n\n## 🗄️ Data Persistence\n\n### Backup Strategy\n```bash\n# Automated daily backup script\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\ndocker-compose exec -T postgres pg_dump -U autoflow_user autoflow_gms | gzip > \"backup_${DATE}.sql.gz\"\n\n# Keep only last 7 days\nfind . -name \"backup_*.sql.gz\" -mtime +7 -delete\n```\n\n### Volume Management\n```bash\n# List volumes\ndocker volume ls\n\n# Inspect volume\ndocker volume inspect autoflow-gms_postgres_data\n\n# Backup volume\ndocker run --rm -v autoflow-gms_postgres_data:/data -v $(pwd):/backup alpine tar czf /backup/postgres_data.tar.gz /data\n\n# Restore volume\ndocker run --rm -v autoflow-gms_postgres_data:/data -v $(pwd):/backup alpine tar xzf /backup/postgres_data.tar.gz -C /\n```\n\n---\n\n## 🐛 Troubleshooting\n\n### Application won't start\n```bash\n# Check logs\ndocker-compose logs app\n\n# Verify database is ready\ndocker-compose exec postgres pg_isready -U autoflow_user\n\n# Restart services\ndocker-compose restart\n```\n\n### Database connection errors\n```bash\n# Check if postgres is running\ndocker-compose ps postgres\n\n# Test connection\ndocker-compose exec app sh -c 'echo \"SELECT 1\" | psql $DATABASE_URL'\n\n# Reset database (WARNING: deletes all data)\ndocker-compose down -v\ndocker-compose up -d\n```\n\n### Port already in use\n```bash\n# Find what's using port 5000\nlsof -i :5000\n\n# Change port in .env\nPORT=3000\n```\n\n### Performance issues\n```bash\n# Check resource usage\ndocker stats\n\n# Increase resources in Docker Desktop settings\n# Or add resource limits to docker-compose.yml:\ndeploy:\n  resources:\n    limits:\n      cpus: '2'\n      memory: 2G\n```\n\n---\n\n## 📊 Monitoring\n\n### Health Checks\n```bash\n# Check service health\ndocker-compose ps\n\n# Manual health check\ncurl http://localhost:5000/api/health\n```\n\n### Resource Monitoring\n```bash\n# Real-time stats\ndocker stats\n\n# Container logs\ndocker-compose logs --tail=100 -f app\n```\n\n---\n\n## 🔄 CI/CD Integration\n\n### GitHub Actions Example\n```yaml\nname: Deploy\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      \n      - name: Deploy to server\n        uses: appleboy/ssh-action@master\n        with:\n          host: ${{ secrets.HOST }}\n          username: ${{ secrets.USERNAME }}\n          key: ${{ secrets.SSH_KEY }}\n          script: |\n            cd /path/to/autoflow-gms\n            git pull\n            docker-compose up -d --build\n            docker-compose exec -T app npm run db:push\n```\n\n---\n\n## 📝 Environment Variables Reference\n\n| Variable | Description | Default | Required |\n|----------|-------------|---------|----------|\n| `NODE_ENV` | Environment mode | production | Yes |\n| `PORT` | Application port | 5000 | Yes |\n| `PGHOST` | Database host | postgres | Yes |\n| `PGPORT` | Database port | 5432 | Yes |\n| `PGDATABASE` | Database name | autoflow_gms | Yes |\n| `PGUSER` | Database user | autoflow_user | Yes |\n| `PGPASSWORD` | Database password | changeme123 | Yes |\n| `SESSION_SECRET` | Session encryption key | - | Yes |\n| `ISSUER_URL` | OIDC provider URL | - | No |\n| `CLIENT_ID` | OIDC client ID | - | No |\n| `CLIENT_SECRET` | OIDC client secret | - | No |\n\n---\n\n## 🎯 Next Steps\n\n1. **Configure SSL/TLS** - Set up reverse proxy with SSL\n2. **Set up backups** - Implement automated backup schedule\n3. **Configure monitoring** - Add Prometheus/Grafana\n4. **Scale horizontally** - Use Docker Swarm or Kubernetes\n5. **Add CI/CD** - Automate deployments\n\n---\n\n## 📞 Support\n\nFor issues or questions:\n- Check logs: `docker-compose logs -f`\n- Review [Docker documentation](https://docs.docker.com/)\n- Open an issue in the repository\n\n---\n\n**Note:** This Docker setup is production-ready but remember to:\n- Change all default passwords\n- Use strong SESSION_SECRET\n- Configure proper backups\n- Set up SSL/TLS for HTTPS\n- Monitor resource usage\n","size_bytes":8544},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCustomerSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\nimport { z } from \"zod\";\n\ntype Customer = {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string | null;\n  phone: string | null;\n  address: string | null;\n  city: string | null;\n  state: string | null;\n  zipCode: string | null;\n  createdAt: string;\n};\n\nexport default function Customers() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [viewingCustomer, setViewingCustomer] = useState<Customer | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: customers, isLoading } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (customerData: z.infer<typeof insertCustomerSchema>) => {\n      return await apiRequest(\"POST\", \"/api/customers\", customerData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Customer created successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to create customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof insertCustomerSchema>>({\n    resolver: zodResolver(insertCustomerSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      city: \"\",\n      state: \"\",\n      zipCode: \"\",\n      notes: \"\",\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof insertCustomerSchema>) => {\n    createCustomerMutation.mutate(data);\n  };\n\n  const filteredCustomers = Array.isArray(customers) ? customers.filter((customer: Customer) =>\n    `${customer.firstName} ${customer.lastName}`.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.phone?.includes(searchTerm)\n  ) : [];\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-h-screen\">\n        <header className=\"bg-card border-b border-border px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-customers-title\">\n                Customer Management\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Manage customer information and service history with reliable data persistence.\n              </p>\n            </div>\n            \n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-customer\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Add Customer\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Customer</DialogTitle>\n                  <DialogDescription>\n                    Enter customer information. All data will be securely stored with audit trails.\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"John\" \n                                {...field} \n                                data-testid=\"input-first-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Doe\" \n                                {...field} \n                                data-testid=\"input-last-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"email\" \n                                placeholder=\"john@example.com\" \n                                {...field} \n                                value={field.value || \"\"}\n                                data-testid=\"input-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Phone</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"(555) 123-4567\" \n                                {...field} \n                                value={field.value || \"\"}\n                                data-testid=\"input-phone\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"address\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Address</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"123 Main St\" \n                              {...field} \n                              value={field.value || \"\"}\n                              data-testid=\"input-address\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-3 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"city\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>City</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"Anytown\" \n                                {...field} \n                                value={field.value || \"\"}\n                                data-testid=\"input-city\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"state\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>State</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"CA\" \n                                {...field} \n                                value={field.value || \"\"}\n                                data-testid=\"input-state\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"zipCode\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>ZIP Code</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"12345\" \n                                {...field} \n                                value={field.value || \"\"}\n                                data-testid=\"input-zip\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <div className=\"flex justify-end gap-2 pt-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setIsDialogOpen(false)}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={createCustomerMutation.isPending}\n                        data-testid=\"button-submit-customer\"\n                      >\n                        {createCustomerMutation.isPending ? \"Creating...\" : \"Create Customer\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </header>\n\n        <div className=\"flex-1 p-8 space-y-6\">\n          {/* Search and Filter */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Search Customers</CardTitle>\n              <CardDescription>\n                Find customers by name, email, or phone number\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4\">\n                <div className=\"flex-1\">\n                  <Label htmlFor=\"search\">Search</Label>\n                  <Input\n                    id=\"search\"\n                    placeholder=\"Search by name, email, or phone...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    data-testid=\"input-search-customers\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Customer List */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                Customers ({filteredCustomers.length})\n              </CardTitle>\n              <CardDescription>\n                All customer data is securely stored with comprehensive audit trails\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <div key={i} className=\"flex items-center gap-4 p-4 border rounded-lg animate-pulse\">\n                      <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n                      </div>\n                      <div className=\"h-6 bg-muted rounded w-16\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : filteredCustomers.length === 0 ? (\n                <div className=\"text-center py-12\" data-testid=\"text-no-customers\">\n                  <i className=\"fas fa-users text-4xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No customers found</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {searchTerm ? \"Try adjusting your search terms\" : \"Get started by adding your first customer\"}\n                  </p>\n                  {!searchTerm && (\n                    <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-add-first-customer\">\n                      <i className=\"fas fa-plus mr-2\"></i>\n                      Add First Customer\n                    </Button>\n                  )}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredCustomers.map((customer: Customer) => (\n                    <div \n                      key={customer.id} \n                      className=\"flex items-center gap-4 p-4 border border-border rounded-lg hover:bg-accent transition-colors\"\n                      data-testid={`card-customer-${customer.id}`}\n                    >\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-full flex items-center justify-center\">\n                        <span className=\"text-primary font-semibold\">\n                          {customer.firstName[0]}{customer.lastName[0]}\n                        </span>\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <h3 className=\"font-semibold text-foreground\">\n                          {customer.firstName} {customer.lastName}\n                        </h3>\n                        <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                          {customer.email && (\n                            <span>\n                              <i className=\"fas fa-envelope mr-1\"></i>\n                              {customer.email}\n                            </span>\n                          )}\n                          {customer.phone && (\n                            <span>\n                              <i className=\"fas fa-phone mr-1\"></i>\n                              {customer.phone}\n                            </span>\n                          )}\n                        </div>\n                        {(customer.city && customer.state) && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                            {customer.city}, {customer.state}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"secondary\">\n                          Member since {new Date(customer.createdAt).getFullYear()}\n                        </Badge>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => setViewingCustomer(customer)}\n                          data-testid={`button-view-customer-${customer.id}`}\n                        >\n                          <i className=\"fas fa-eye mr-1\"></i>\n                          View\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* View Customer Dialog */}\n        <Dialog open={!!viewingCustomer} onOpenChange={() => setViewingCustomer(null)}>\n          <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Customer Details</DialogTitle>\n              <DialogDescription>\n                View customer information and contact details\n              </DialogDescription>\n            </DialogHeader>\n            \n            {viewingCustomer && (\n              <div className=\"space-y-6\">\n                {/* Customer Name */}\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                    <span className=\"text-primary font-bold text-2xl\">\n                      {viewingCustomer.firstName[0]}{viewingCustomer.lastName[0]}\n                    </span>\n                  </div>\n                  <div>\n                    <h3 className=\"text-2xl font-semibold text-foreground\">\n                      {viewingCustomer.firstName} {viewingCustomer.lastName}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Member since {new Date(viewingCustomer.createdAt).toLocaleDateString('en-US', { \n                        year: 'numeric', \n                        month: 'long', \n                        day: 'numeric' \n                      })}\n                    </p>\n                  </div>\n                </div>\n\n                {/* Contact Information */}\n                <div>\n                  <h4 className=\"font-semibold mb-3 text-foreground\">Contact Information</h4>\n                  <div className=\"space-y-3\">\n                    {viewingCustomer.email && (\n                      <div className=\"flex items-center gap-3 p-3 bg-accent rounded-lg\">\n                        <div className=\"w-10 h-10 bg-background rounded-full flex items-center justify-center\">\n                          <i className=\"fas fa-envelope text-primary\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-muted-foreground\">Email</p>\n                          <p className=\"font-medium\">{viewingCustomer.email}</p>\n                        </div>\n                      </div>\n                    )}\n                    \n                    {viewingCustomer.phone && (\n                      <div className=\"flex items-center gap-3 p-3 bg-accent rounded-lg\">\n                        <div className=\"w-10 h-10 bg-background rounded-full flex items-center justify-center\">\n                          <i className=\"fas fa-phone text-primary\"></i>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-muted-foreground\">Phone</p>\n                          <p className=\"font-medium\">{viewingCustomer.phone}</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Address Information */}\n                {(viewingCustomer.address || viewingCustomer.city || viewingCustomer.state || viewingCustomer.zipCode) && (\n                  <div>\n                    <h4 className=\"font-semibold mb-3 text-foreground\">Address</h4>\n                    <div className=\"p-3 bg-accent rounded-lg\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"w-10 h-10 bg-background rounded-full flex items-center justify-center flex-shrink-0\">\n                          <i className=\"fas fa-map-marker-alt text-primary\"></i>\n                        </div>\n                        <div>\n                          {viewingCustomer.address && (\n                            <p className=\"font-medium\">{viewingCustomer.address}</p>\n                          )}\n                          {(viewingCustomer.city || viewingCustomer.state || viewingCustomer.zipCode) && (\n                            <p className=\"text-muted-foreground\">\n                              {[viewingCustomer.city, viewingCustomer.state, viewingCustomer.zipCode]\n                                .filter(Boolean)\n                                .join(', ')}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Action Button */}\n                <div className=\"flex justify-end pt-4\">\n                  <Button onClick={() => setViewingCustomer(null)} data-testid=\"button-close-view\">\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}\n","size_bytes":22599},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Loader2, User, Mail, Lock, UserPlus, LogIn, Eye, EyeOff } from \"lucide-react\";\n\nexport default function Landing() {\n  const [isSignIn, setIsSignIn] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const { toast } = useToast();\n  \n  const [signInData, setSignInData] = useState({\n    username: \"\",\n    password: \"\",\n  });\n  \n  const [signUpData, setSignUpData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  const handleSignIn = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    \n    try {\n      await apiRequest(\"POST\", \"/api/login\", signInData);\n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignUp = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (signUpData.password !== signUpData.confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"Passwords do not match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      await apiRequest(\"POST\", \"/api/register\", {\n        username: signUpData.username,\n        email: signUpData.email,\n        password: signUpData.password,\n        firstName: signUpData.firstName,\n        lastName: signUpData.lastName,\n      });\n      \n      window.location.href = \"/\";\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Registration failed\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100 dark:from-slate-950 dark:via-blue-950 dark:to-indigo-950 relative overflow-hidden\">\n      {/* Animated background elements */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        <div className=\"absolute -top-40 -right-40 w-80 h-80 bg-blue-400/20 dark:bg-blue-600/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute top-1/2 -left-40 w-96 h-96 bg-indigo-400/20 dark:bg-indigo-600/10 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute -bottom-40 right-1/4 w-80 h-80 bg-purple-400/20 dark:bg-purple-600/10 rounded-full blur-3xl animate-pulse delay-500\"></div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-8 relative z-10\">\n        {/* Header */}\n        <div className=\"text-center mb-12 animate-fade-in\">\n          <div className=\"flex items-center justify-center gap-4 mb-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-indigo-600 dark:from-blue-500 dark:to-indigo-500 rounded-2xl flex items-center justify-center shadow-lg shadow-blue-500/30 transform hover:scale-110 transition-transform duration-300\">\n              <i className=\"fas fa-car text-white text-2xl\"></i>\n            </div>\n            <div className=\"text-left\">\n              <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 dark:from-blue-400 dark:to-indigo-400 bg-clip-text text-transparent\">\n                AutoFlow GMS\n              </h1>\n              <p className=\"text-lg text-slate-600 dark:text-slate-400\">Garage Management System</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Authentication Form - Modern Centered Design */}\n        <div className=\"max-w-md mx-auto mb-12\">\n          <Card className=\"border-0 shadow-2xl shadow-slate-200/50 dark:shadow-slate-900/50 bg-white/80 dark:bg-slate-900/80 backdrop-blur-xl\">\n            <CardHeader className=\"space-y-1 pb-8 pt-8\">\n              <div className=\"flex items-center justify-center mb-6\">\n                <div className={`w-16 h-16 rounded-full flex items-center justify-center transition-all duration-500 ${\n                  isSignIn \n                    ? 'bg-gradient-to-br from-blue-500 to-indigo-600 shadow-lg shadow-blue-500/30' \n                    : 'bg-gradient-to-br from-purple-500 to-pink-600 shadow-lg shadow-purple-500/30'\n                }`}>\n                  {isSignIn ? (\n                    <LogIn className=\"h-8 w-8 text-white\" />\n                  ) : (\n                    <UserPlus className=\"h-8 w-8 text-white\" />\n                  )}\n                </div>\n              </div>\n              <CardTitle className=\"text-3xl font-bold text-center bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-100 dark:to-slate-300 bg-clip-text text-transparent\">\n                {isSignIn ? \"Welcome Back\" : \"Create Account\"}\n              </CardTitle>\n              <CardDescription className=\"text-center text-base\">\n                {isSignIn \n                  ? \"Sign in to access your dashboard\"\n                  : \"Join us to manage your garage\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"pb-8\">\n              {isSignIn ? (\n                <form onSubmit={handleSignIn} className=\"space-y-5\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signin-username\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                      Username\n                    </Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400\" />\n                      <Input\n                        id=\"signin-username\"\n                        type=\"text\"\n                        placeholder=\"Enter your username\"\n                        value={signInData.username}\n                        onChange={(e) => setSignInData({ ...signInData, username: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-username\"\n                        className=\"pl-11 h-12 border-slate-200 dark:border-slate-700 focus:border-blue-500 dark:focus:border-blue-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signin-password\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                      Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400\" />\n                      <Input\n                        id=\"signin-password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        value={signInData.password}\n                        onChange={(e) => setSignInData({ ...signInData, password: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-password\"\n                        className=\"pl-11 pr-11 h-12 border-slate-200 dark:border-slate-700 focus:border-blue-500 dark:focus:border-blue-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 transition-colors\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                      </button>\n                    </div>\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full h-12 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold shadow-lg shadow-blue-500/30 transition-all duration-300 transform hover:scale-[1.02]\"\n                    disabled={isLoading}\n                    data-testid=\"button-signin\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                        Signing In...\n                      </>\n                    ) : (\n                      <>\n                        <LogIn className=\"mr-2 h-5 w-5\" />\n                        Sign In\n                      </>\n                    )}\n                  </Button>\n                  <div className=\"text-center mt-6\">\n                    <button\n                      type=\"button\"\n                      onClick={() => setIsSignIn(false)}\n                      className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium transition-colors\"\n                      data-testid=\"link-signup\"\n                    >\n                      Don't have an account? <span className=\"underline\">Sign up</span>\n                    </button>\n                  </div>\n                </form>\n              ) : (\n                <form onSubmit={handleSignUp} className=\"space-y-5\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"signup-firstName\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                        First Name\n                      </Label>\n                      <Input\n                        id=\"signup-firstName\"\n                        type=\"text\"\n                        placeholder=\"First name\"\n                        value={signUpData.firstName}\n                        onChange={(e) => setSignUpData({ ...signUpData, firstName: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-firstname\"\n                        className=\"h-12 border-slate-200 dark:border-slate-700 focus:border-purple-500 dark:focus:border-purple-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"signup-lastName\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                        Last Name\n                      </Label>\n                      <Input\n                        id=\"signup-lastName\"\n                        type=\"text\"\n                        placeholder=\"Last name\"\n                        value={signUpData.lastName}\n                        onChange={(e) => setSignUpData({ ...signUpData, lastName: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-lastname\"\n                        className=\"h-12 border-slate-200 dark:border-slate-700 focus:border-purple-500 dark:focus:border-purple-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-username\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                      Username\n                    </Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400\" />\n                      <Input\n                        id=\"signup-username\"\n                        type=\"text\"\n                        placeholder=\"Choose a username\"\n                        value={signUpData.username}\n                        onChange={(e) => setSignUpData({ ...signUpData, username: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-signup-username\"\n                        className=\"pl-11 h-12 border-slate-200 dark:border-slate-700 focus:border-purple-500 dark:focus:border-purple-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-email\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                      Email\n                    </Label>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400\" />\n                      <Input\n                        id=\"signup-email\"\n                        type=\"email\"\n                        placeholder=\"your@email.com\"\n                        value={signUpData.email}\n                        onChange={(e) => setSignUpData({ ...signUpData, email: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-email\"\n                        className=\"pl-11 h-12 border-slate-200 dark:border-slate-700 focus:border-purple-500 dark:focus:border-purple-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-password\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                      Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400\" />\n                      <Input\n                        id=\"signup-password\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Create a password\"\n                        value={signUpData.password}\n                        onChange={(e) => setSignUpData({ ...signUpData, password: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-signup-password\"\n                        className=\"pl-11 pr-11 h-12 border-slate-200 dark:border-slate-700 focus:border-purple-500 dark:focus:border-purple-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 transition-colors\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                      </button>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"signup-confirmPassword\" className=\"text-slate-700 dark:text-slate-300 font-medium\">\n                      Confirm Password\n                    </Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-slate-400\" />\n                      <Input\n                        id=\"signup-confirmPassword\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm your password\"\n                        value={signUpData.confirmPassword}\n                        onChange={(e) => setSignUpData({ ...signUpData, confirmPassword: e.target.value })}\n                        required\n                        disabled={isLoading}\n                        data-testid=\"input-confirm-password\"\n                        className=\"pl-11 pr-11 h-12 border-slate-200 dark:border-slate-700 focus:border-purple-500 dark:focus:border-purple-500 bg-white dark:bg-slate-800 transition-all duration-300\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        className=\"absolute right-3 top-1/2 -translate-y-1/2 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300 transition-colors\"\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                      </button>\n                    </div>\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    className=\"w-full h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-semibold shadow-lg shadow-purple-500/30 transition-all duration-300 transform hover:scale-[1.02]\"\n                    disabled={isLoading}\n                    data-testid=\"button-signup\"\n                  >\n                    {isLoading ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                        Creating Account...\n                      </>\n                    ) : (\n                      <>\n                        <UserPlus className=\"mr-2 h-5 w-5\" />\n                        Create Account\n                      </>\n                    )}\n                  </Button>\n                  <div className=\"text-center mt-6\">\n                    <button\n                      type=\"button\"\n                      onClick={() => setIsSignIn(true)}\n                      className=\"text-sm text-purple-600 dark:text-purple-400 hover:text-purple-700 dark:hover:text-purple-300 font-medium transition-colors\"\n                      data-testid=\"link-signin\"\n                    >\n                      Already have an account? <span className=\"underline\">Sign in</span>\n                    </button>\n                  </div>\n                </form>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Features Section - Compact Modern Cards */}\n        <div className=\"max-w-6xl mx-auto mb-12\">\n          <h2 className=\"text-2xl font-bold text-center mb-8 bg-gradient-to-r from-slate-900 to-slate-700 dark:from-slate-100 dark:to-slate-300 bg-clip-text text-transparent\">\n            Why Choose AutoFlow GMS?\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"border-0 shadow-lg bg-white/60 dark:bg-slate-900/60 backdrop-blur-sm hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 dark:from-blue-600 dark:to-blue-700 rounded-xl flex items-center justify-center mb-4 shadow-md shadow-blue-500/30\">\n                  <i className=\"fas fa-shield-alt text-white text-xl\"></i>\n                </div>\n                <CardTitle className=\"text-lg\">Data Integrity</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  PostgreSQL database with comprehensive validation and real-time error detection.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg bg-white/60 dark:bg-slate-900/60 backdrop-blur-sm hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-gradient-to-br from-green-500 to-green-600 dark:from-green-600 dark:to-green-700 rounded-xl flex items-center justify-center mb-4 shadow-md shadow-green-500/30\">\n                  <i className=\"fas fa-users text-white text-xl\"></i>\n                </div>\n                <CardTitle className=\"text-lg\">Customer Portal</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Secure authentication and access to complete service history.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"border-0 shadow-lg bg-white/60 dark:bg-slate-900/60 backdrop-blur-sm hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-gradient-to-br from-purple-500 to-purple-600 dark:from-purple-600 dark:to-purple-700 rounded-xl flex items-center justify-center mb-4 shadow-md shadow-purple-500/30\">\n                  <i className=\"fas fa-chart-line text-white text-xl\"></i>\n                </div>\n                <CardTitle className=\"text-lg\">Analytics</CardTitle>\n                <CardDescription className=\"text-sm\">\n                  Comprehensive reporting with audit trails for all operations.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <footer className=\"text-center text-slate-600 dark:text-slate-400 text-sm\">\n          <p>&copy; 2025 AutoFlow GMS. All rights reserved.</p>\n          <p className=\"mt-1\">Powered by Replit Infrastructure</p>\n        </footer>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21842},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Sidebar from \"@/components/sidebar\";\nimport SystemHealth from \"@/components/system-health\";\nimport ErrorNotification from \"@/components/error-notification\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { \n  ClipboardCheck, \n  Wrench, \n  UserPlus, \n  BarChart3, \n  CalendarPlus, \n  Car, \n  History, \n  ListTodo, \n  User,\n  Plus,\n  Calendar\n} from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const { user, isLoading: authLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<Metrics>({\n    queryKey: [\"/api/dashboard/metrics\"],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const { data: auditLogs } = useQuery({\n    queryKey: [\"/api/audit-logs\"],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const { data: repairOrders, isError: repairOrdersError } = useQuery({\n    queryKey: [\"/api/repair-orders\"],\n    enabled: !!user && (user.role === 'admin' || user.role === 'user'),\n  });\n\n  // Add role-specific data fetching\n  const { data: appointments, isError: appointmentsError } = useQuery({\n    queryKey: [\"/api/appointments\"],\n    enabled: !!user && (user.role === 'admin' || user.role === 'client'),\n  });\n\n  const { data: inspections, isError: inspectionsError } = useQuery({\n    queryKey: [\"/api/inspections\"],\n    enabled: !!user && (user.role === 'admin' || user.role === 'user'),\n  });\n\n  const { data: customerVehicles } = useQuery({\n    queryKey: [\"/api/vehicles\"],\n    enabled: !!user && user.role === 'client',\n  });\n\n  const { data: customerInvoices } = useQuery({\n    queryKey: [\"/api/invoices\"],\n    enabled: !!user && user.role === 'client',\n  });\n\n  const activeRepairOrders = Array.isArray(repairOrders) ? repairOrders.filter((order: any) => \n    [\"created\", \"in_progress\"].includes(order.status)\n  ).slice(0, 3) : [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"in_progress\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"completed\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"urgent\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-blue-100 text-blue-800 border-blue-200\";\n    }\n  };\n\n  const handleNewAppointment = () => {\n    toast({\n      title: \"Appointment Creation\",\n      description: \"Redirecting to appointment scheduling...\",\n    });\n    // Navigate to appointments page\n    window.location.href = \"/appointments\";\n  };\n\n  // Show loading if authentication is still in progress\n  if (authLoading) {\n    return (\n      <div className=\"h-screen flex bg-background overflow-hidden\">\n        <Sidebar />\n        <main className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-pulse\">\n              <div className=\"h-8 bg-muted rounded w-48 mb-4\"></div>\n              <div className=\"h-4 bg-muted rounded w-32\"></div>\n            </div>\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  // Role-based content rendering\n  const userRole = user?.role || 'client';\n  const isAdmin = userRole === 'admin';\n  const isTechnician = userRole === 'user';\n  const isClient = userRole === 'client';\n\n  // Define types for better TypeScript support\n  interface User {\n    id: string;\n    username: string;\n    email: string;\n    firstName?: string;\n    lastName?: string;\n    role: 'admin' | 'user' | 'client';\n  }\n\n  interface Metrics {\n    todayAppointments: number;\n    activeRepairOrders: number;\n    totalCustomers: number;\n    todayRevenue: number;\n  }\n\n  return (\n    <div className=\"h-screen flex bg-background overflow-hidden\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col overflow-hidden\">\n        {/* Header */}\n        <header className=\"bg-card border-b border-border px-4 sm:px-6 lg:px-8 py-4 flex-shrink-0\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4\">\n            <div className=\"flex-1\">\n              <h2 className=\"text-xl sm:text-2xl font-bold text-foreground\" data-testid=\"text-dashboard-title\">\n                {isAdmin ? 'Manager Dashboard' : isTechnician ? 'Technician Dashboard' : 'My Garage Portal'}\n              </h2>\n              <p className=\"text-sm text-muted-foreground mt-1\">\n                {isAdmin ? \n                  'Complete overview of all garage operations and performance metrics.' :\n                  isTechnician ? \n                  'Your assigned repair orders, inspections, and job board.' :\n                  'Manage your vehicle information, service history, and appointments.'\n                }\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-3 flex-shrink-0\">\n              <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">\n                <User className=\"w-4 h-4 mr-1\" />\n                {isAdmin ? 'Shop Manager' : isTechnician ? 'Technician' : 'Client'}\n              </Badge>\n              {(isAdmin || isClient) && (\n                <Button \n                  onClick={handleNewAppointment}\n                  data-testid=\"button-new-appointment\"\n                  className=\"hidden sm:flex\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Appointment\n                </Button>\n              )}\n            </div>\n          </div>\n        </header>\n\n        <div className=\"flex-1 overflow-y-auto\">\n          <div className=\"max-w-7xl mx-auto p-4 sm:p-6 lg:p-8 space-y-6 sm:space-y-8\">\n          {/* System Health - Admin only */}\n          {isAdmin && <SystemHealth />}\n\n          {/* Role-based Content */}\n          {isAdmin && (\n            <>\n              {/* Key Performance Metrics - Admin Full View */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 sm:gap-6\">\n                <div className=\"lg:col-span-2\">\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <CardTitle>Today's Operations</CardTitle>\n                        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span data-testid=\"text-current-date\">\n                            {new Date().toLocaleDateString(\"en-US\", { \n                              year: \"numeric\", \n                              month: \"long\", \n                              day: \"numeric\" \n                            })}\n                          </span>\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      {metricsLoading ? (\n                        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n                          {[...Array(4)].map((_, i) => (\n                            <div key={i} className=\"text-center p-3 sm:p-4 bg-accent rounded-lg animate-pulse\">\n                              <div className=\"h-8 bg-muted rounded mb-2\"></div>\n                              <div className=\"h-4 bg-muted rounded\"></div>\n                            </div>\n                          ))}\n                        </div>\n                      ) : (\n                        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n                          <div className=\"text-center p-3 sm:p-4 bg-accent rounded-lg\">\n                            <div className=\"text-xl sm:text-2xl font-bold text-blue-600\" data-testid=\"metric-appointments\">\n                              {(metrics as Metrics)?.todayAppointments || 0}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-muted-foreground mt-1\">Appointments</div>\n                          </div>\n                          <div className=\"text-center p-3 sm:p-4 bg-accent rounded-lg\">\n                            <div className=\"text-xl sm:text-2xl font-bold text-orange-600\" data-testid=\"metric-repair-orders\">\n                              {(metrics as Metrics)?.activeRepairOrders || 0}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-muted-foreground mt-1\">Repair Orders</div>\n                          </div>\n                          <div className=\"text-center p-3 sm:p-4 bg-accent rounded-lg\">\n                            <div className=\"text-xl sm:text-2xl font-bold text-green-600\" data-testid=\"metric-customers\">\n                              {(metrics as Metrics)?.totalCustomers || 0}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-muted-foreground mt-1\">Total Customers</div>\n                          </div>\n                          <div className=\"text-center p-3 sm:p-4 bg-accent rounded-lg\">\n                            <div className=\"text-xl sm:text-2xl font-bold text-purple-600\" data-testid=\"metric-revenue\">\n                              ${(metrics as Metrics)?.todayRevenue || 0}\n                            </div>\n                            <div className=\"text-xs sm:text-sm text-muted-foreground mt-1\">Today's Revenue</div>\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>System Alerts</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start gap-3 p-3 bg-green-50 border border-green-200 rounded-lg\">\n                        <i className=\"fas fa-check-circle text-green-600 mt-0.5\"></i>\n                        <div>\n                          <p className=\"text-sm font-medium text-green-800\">Migration Successful</p>\n                          <p className=\"text-xs text-green-600\">All data transferred to Replit infrastructure</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-start gap-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                        <i className=\"fas fa-info-circle text-blue-600 mt-0.5\"></i>\n                        <div>\n                          <p className=\"text-sm font-medium text-blue-800\">Backup Completed</p>\n                          <p className=\"text-xs text-blue-600\">Daily backup ran successfully at 2:00 AM</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n\n          {isTechnician && (\n            <>\n              {/* Technician Metrics - Limited View */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>My Work Today</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-orange-600\" data-testid=\"metric-my-repair-orders\">\n                        {Array.isArray(repairOrders) ? repairOrders.filter((order: any) => \n                          [\"created\", \"in_progress\"].includes(order.status)\n                        ).length : 0}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Assigned Orders</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Inspections</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-blue-600\" data-testid=\"metric-inspections\">\n                        {Array.isArray(inspections) ? inspections.filter((inspection: any) => \n                          [\"pending\", \"in_progress\"].includes(inspection.status)\n                        ).length : 0}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Pending</div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Today's Progress</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-green-600\" data-testid=\"metric-completed-today\">\n                        {Array.isArray(repairOrders) ? repairOrders.filter((order: any) => \n                          order.status === \"completed\"\n                        ).length : 0}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Completed</div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n\n          {isClient && (\n            <>\n              {/* Client Overview */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>My Vehicles</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {Array.isArray(customerVehicles) && customerVehicles.length > 0 ? (\n                        customerVehicles.slice(0, 2).map((vehicle: any) => (\n                          <div key={vehicle.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                            <div className=\"flex items-center gap-3\">\n                              <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                                <i className=\"fas fa-car text-blue-600\"></i>\n                              </div>\n                              <div>\n                                <p className=\"font-medium\">{vehicle.year} {vehicle.make} {vehicle.model}</p>\n                                <p className=\"text-sm text-muted-foreground\">License: {vehicle.licensePlate}</p>\n                              </div>\n                            </div>\n                            <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                              Active\n                            </Badge>\n                          </div>\n                        ))\n                      ) : (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          <i className=\"fas fa-car text-4xl mb-4 opacity-50\"></i>\n                          <p>No vehicles registered</p>\n                          <p className=\"text-sm\">Contact us to add your vehicle</p>\n                        </div>\n                      )}\n\n                      {Array.isArray(appointments) && appointments.length > 0 && (\n                        <div className=\"flex items-center justify-between p-4 border border-border rounded-lg bg-orange-50\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\n                              <i className=\"fas fa-calendar text-orange-600\"></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">Next Service</p>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {new Date(appointments[0].scheduledDate).toLocaleDateString()}\n                              </p>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">\n                            {appointments[0].status}\n                          </Badge>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Recent Activity</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start gap-3 p-3 bg-accent rounded-lg\">\n                        <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                          <i className=\"fas fa-check text-green-600 text-sm\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Service Completed</p>\n                          <p className=\"text-xs text-muted-foreground\">Oil change - 2 weeks ago</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-start gap-3 p-3 bg-accent rounded-lg\">\n                        <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                          <i className=\"fas fa-calendar text-blue-600 text-sm\"></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">Appointment Booked</p>\n                          <p className=\"text-xs text-muted-foreground\">Brake inspection - Next week</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </>\n          )}\n\n          {/* Role-based Work Lists */}\n          {(isAdmin || isTechnician) && (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Active Repair Orders */}\n              <Card>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle>\n                      {isAdmin ? 'Active Repair Orders' : 'My Assigned Orders'}\n                    </CardTitle>\n                    <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-view-all-repair-orders\">\n                      View All <i className=\"fas fa-arrow-right ml-1\"></i>\n                    </Button>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {activeRepairOrders.length === 0 ? (\n                      <p className=\"text-center text-muted-foreground py-8\" data-testid=\"text-no-active-orders\">\n                        {isAdmin ? 'No active repair orders' : 'No assigned repair orders'}\n                      </p>\n                    ) : (\n                      activeRepairOrders.map((order: any) => (\n                        <div \n                          key={order.id} \n                          className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-accent transition-colors\"\n                          data-testid={`card-repair-order-${order.id}`}\n                        >\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                              <i className=\"fas fa-wrench text-blue-600\"></i>\n                            </div>\n                            <div>\n                              <p className=\"font-medium\">{order.orderNumber}</p>\n                              <p className=\"text-sm text-muted-foreground\">{order.description}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <Badge className={getStatusColor(order.status)}>\n                              {order.status.replace('_', ' ')}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Role-specific second panel */}\n              {isAdmin && (\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <CardTitle>Customer Portal Activity</CardTitle>\n                      <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-portal-settings\">\n                        Portal Settings <i className=\"fas fa-cog ml-1\"></i>\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"bg-accent p-4 rounded-lg text-center\">\n                          <div className=\"text-xl font-bold text-blue-600\" data-testid=\"metric-registered-users\">\n                            {(metrics as Metrics)?.totalCustomers || 0}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Registered Users</div>\n                        </div>\n                        <div className=\"bg-accent p-4 rounded-lg text-center\">\n                          <div className=\"text-xl font-bold text-green-600\" data-testid=\"metric-active-today\">\n                            {Math.floor(((metrics as Metrics)?.totalCustomers || 0) * 0.17)}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\">Active Today</div>\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-3\">\n                        <h4 className=\"text-sm font-medium text-muted-foreground\">Recent Activity</h4>\n                        \n                        <div className=\"flex items-center gap-3 p-3 bg-accent rounded-lg\">\n                          <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\n                            <i className=\"fas fa-user-plus text-green-600 text-sm\"></i>\n                          </div>\n                          <div className=\"flex-1\">\n                            <p className=\"text-sm font-medium\">System Ready</p>\n                            <p className=\"text-xs text-muted-foreground\">All services operational</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {isTechnician && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Digital Inspections</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                            <i className=\"fas fa-clipboard-check text-blue-600\"></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">Vehicle Safety Check</p>\n                            <p className=\"text-sm text-muted-foreground\">2021 Honda Civic</p>\n                          </div>\n                        </div>\n                        <Badge className=\"bg-orange-100 text-orange-800 border-orange-200\">\n                          Pending\n                        </Badge>\n                      </div>\n\n                      <div className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                            <i className=\"fas fa-check-circle text-green-600\"></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">Brake System Inspection</p>\n                            <p className=\"text-sm text-muted-foreground\">2019 Toyota Camry</p>\n                          </div>\n                        </div>\n                        <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                          Complete\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n\n          {isClient && (\n            <Card>\n              <CardHeader>\n                <CardTitle>My Service History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Array.isArray(appointments) && appointments.length > 0 ? (\n                    appointments.filter((appt: any) => appt.status === 'completed').slice(0, 3).map((appointment: any) => (\n                      <div key={appointment.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                            <i className=\"fas fa-calendar-check text-blue-600\"></i>\n                          </div>\n                          <div>\n                            <p className=\"font-medium\">{appointment.serviceType || 'Service Appointment'}</p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {appointment.scheduledDate ? new Date(appointment.scheduledDate).toLocaleDateString() : 'Recent'}\n                            </p>\n                          </div>\n                        </div>\n                        <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                          Completed\n                        </Badge>\n                      </div>\n                    ))\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <i className=\"fas fa-history text-4xl mb-4 opacity-50\"></i>\n                      <p>No service history available</p>\n                      <p className=\"text-sm\">Your completed services will appear here</p>\n                    </div>\n                  )}\n\n                  {Array.isArray(customerInvoices) && customerInvoices.length > 0 && (\n                    <div className=\"mt-4 pt-4 border-t border-border\">\n                      <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">Recent Invoices</h4>\n                      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n                        {customerInvoices.slice(0, 2).map((invoice: any) => (\n                          <div key={invoice.id} className=\"p-3 bg-accent rounded-lg\">\n                            <div className=\"flex justify-between items-start\">\n                              <div>\n                                <p className=\"font-medium text-sm\">{invoice.invoiceNumber}</p>\n                                <p className=\"text-xs text-muted-foreground\">\n                                  {invoice.createdAt ? new Date(invoice.createdAt).toLocaleDateString() : 'Recent'}\n                                </p>\n                              </div>\n                              <div className=\"text-right\">\n                                <p className=\"font-bold text-sm\">${invoice.total}</p>\n                                <Badge \n                                  className={`text-xs ${\n                                    invoice.status === 'paid' \n                                      ? 'bg-green-100 text-green-800 border-green-200'\n                                      : 'bg-orange-100 text-orange-800 border-orange-200'\n                                  }`}\n                                >\n                                  {invoice.status}\n                                </Badge>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Data Integrity and Audit Trail - Admin only */}\n          {isAdmin && (\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>Data Integrity & Audit Trail</CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Button variant=\"secondary\" size=\"sm\" data-testid=\"button-export-audit\">\n                      <i className=\"fas fa-download mr-1\"></i>\n                      Export\n                    </Button>\n                    <Button size=\"sm\" data-testid=\"button-run-backup\">\n                      <i className=\"fas fa-shield-alt mr-1\"></i>\n                      Run Backup\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"border-b border-border\">\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Timestamp</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Operation</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Entity</th>\n                        <th className=\"text-left py-3 px-4 font-medium text-muted-foreground\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {Array.isArray(auditLogs) && auditLogs.length > 0 ? auditLogs.slice(0, 5).map((entry: any) => (\n                        <tr key={entry.id} className=\"border-b border-border hover:bg-accent\">\n                          <td className=\"py-3 px-4 text-muted-foreground\">\n                            {new Date(entry.createdAt).toLocaleString()}\n                          </td>\n                          <td className=\"py-3 px-4\">{entry.operation}</td>\n                          <td className=\"py-3 px-4\">{entry.entityType}</td>\n                          <td className=\"py-3 px-4\">\n                            <Badge className={getStatusColor(entry.status)}>\n                              {entry.status}\n                            </Badge>\n                          </td>\n                        </tr>\n                      )) : (\n                        <tr>\n                          <td colSpan={4} className=\"py-8 text-center text-muted-foreground\" data-testid=\"text-no-audit-logs\">\n                            No audit logs available\n                          </td>\n                        </tr>\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Role-based Quick Actions Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {isAdmin && (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3 sm:gap-4\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-new-inspection\"\n                    onClick={() => setLocation('/inspections')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <ClipboardCheck className=\"text-blue-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">New Inspection</span>\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-create-repair-order\"\n                    onClick={() => setLocation('/repair-orders')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                      <Wrench className=\"text-orange-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Create Repair Order</span>\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-add-customer\"\n                    onClick={() => setLocation('/customers')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <UserPlus className=\"text-green-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Add Customer</span>\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-generate-report\"\n                    onClick={() => setLocation('/reporting')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                      <BarChart3 className=\"text-purple-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Generate Report</span>\n                  </Button>\n                </div>\n              )}\n\n              {isTechnician && (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-new-inspection\"\n                    onClick={() => setLocation('/inspections')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <ClipboardCheck className=\"text-blue-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Start Inspection</span>\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-update-repair-order\"\n                    onClick={() => setLocation('/repair-orders')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                      <Wrench className=\"text-orange-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Update Order</span>\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-view-job-board\"\n                    onClick={() => setLocation('/job-board')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <ListTodo className=\"text-green-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Job Board</span>\n                  </Button>\n                </div>\n              )}\n\n              {isClient && (\n                <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-book-appointment\"\n                    onClick={handleNewAppointment}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                      <CalendarPlus className=\"text-blue-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Book Appointment</span>\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-view-vehicles\"\n                    onClick={() => setLocation('/customer-portal')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                      <Car className=\"text-green-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">My Vehicles</span>\n                  </Button>\n\n                  <Button \n                    variant=\"outline\" \n                    className=\"flex flex-col items-center gap-2 sm:gap-3 p-4 sm:p-6 h-auto\"\n                    data-testid=\"button-service-history\"\n                    onClick={() => setLocation('/customer-portal')}\n                  >\n                    <div className=\"w-10 h-10 sm:w-12 sm:h-12 bg-orange-100 rounded-lg flex items-center justify-center\">\n                      <History className=\"text-orange-600 w-5 h-5 sm:w-6 sm:h-6\" />\n                    </div>\n                    <span className=\"text-xs sm:text-sm font-medium\">Service History</span>\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n          </div>\n        </div>\n      </main>\n\n      <ErrorNotification />\n    </div>\n  );\n}\n","size_bytes":39389},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { roleDisplayNames, type UserRole } from \"@/utils/roleAccess\";\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  role: UserRole;\n  createdAt: string;\n}\n\nexport default function UsersPage() {\n  const { toast } = useToast();\n  const [editingRoles, setEditingRoles] = useState<Record<string, UserRole>>({});\n\n  const { data: users, isLoading } = useQuery<User[]>({\n    queryKey: ['/api/users'],\n  });\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: UserRole }) => {\n      return apiRequest('PATCH', `/api/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n      setEditingRoles({});\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRoleChange = (userId: string, newRole: UserRole) => {\n    setEditingRoles(prev => ({\n      ...prev,\n      [userId]: newRole\n    }));\n  };\n\n  const handleUpdateRole = (userId: string) => {\n    const newRole = editingRoles[userId];\n    if (newRole) {\n      updateRoleMutation.mutate({ userId, role: newRole });\n    }\n  };\n\n  const handleCancelEdit = (userId: string) => {\n    setEditingRoles(prev => {\n      const updated = { ...prev };\n      delete updated[userId];\n      return updated;\n    });\n  };\n\n  const getRoleBadgeColor = (role: UserRole) => {\n    switch (role) {\n      case 'admin': return 'bg-red-500 hover:bg-red-600';\n      case 'user': return 'bg-blue-500 hover:bg-blue-600';\n      case 'client': return 'bg-green-500 hover:bg-green-600';\n      default: return 'bg-gray-500 hover:bg-gray-600';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"animate-pulse space-y-4\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div key={i} className=\"h-16 bg-gray-200 rounded-lg\"></div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\">User Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage user roles and access permissions\n          </p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>System Users</CardTitle>\n          <CardDescription>\n            View and manage user roles. Only Shop Managers can modify user permissions.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {users && users.length > 0 ? (\n              users.map((user) => {\n                const isEditing = editingRoles[user.id] !== undefined;\n                const currentRole = isEditing ? editingRoles[user.id] : user.role;\n                \n                return (\n                  <div\n                    key={user.id}\n                    className=\"flex items-center justify-between p-4 border rounded-lg\"\n                    data-testid={`user-row-${user.id}`}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                          <h3 className=\"font-medium\" data-testid={`text-username-${user.id}`}>\n                            {user.firstName && user.lastName \n                              ? `${user.firstName} ${user.lastName}` \n                              : user.username}\n                          </h3>\n                          {!isEditing && (\n                            <Badge \n                              className={getRoleBadgeColor(user.role)}\n                              data-testid={`badge-role-${user.id}`}\n                            >\n                              {roleDisplayNames[user.role]}\n                            </Badge>\n                          )}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\" data-testid={`text-email-${user.id}`}>\n                          {user.email}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Username: {user.username}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      {isEditing ? (\n                        <>\n                          <Select\n                            value={currentRole}\n                            onValueChange={(value) => handleRoleChange(user.id, value as UserRole)}\n                            data-testid={`select-role-${user.id}`}\n                          >\n                            <SelectTrigger className=\"w-40\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"client\">Client</SelectItem>\n                              <SelectItem value=\"user\">Technician</SelectItem>\n                              <SelectItem value=\"admin\">Shop Manager</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Button\n                            onClick={() => handleUpdateRole(user.id)}\n                            size=\"sm\"\n                            disabled={updateRoleMutation.isPending}\n                            data-testid={`button-save-${user.id}`}\n                          >\n                            Save\n                          </Button>\n                          <Button\n                            onClick={() => handleCancelEdit(user.id)}\n                            variant=\"outline\"\n                            size=\"sm\"\n                            data-testid={`button-cancel-${user.id}`}\n                          >\n                            Cancel\n                          </Button>\n                        </>\n                      ) : (\n                        <Button\n                          onClick={() => handleRoleChange(user.id, user.role)}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          data-testid={`button-edit-${user.id}`}\n                        >\n                          Edit Role\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                );\n              })\n            ) : (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No users found\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":7547},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/pages/invoices.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { DollarSign, FileText, Clock, AlertTriangle, Plus, Banknote, CreditCard, FileCheck, Building2 } from \"lucide-react\";\nimport Sidebar from \"@/components/sidebar\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { z } from \"zod\";\n\ntype Invoice = {\n  id: string;\n  invoiceNumber: string;\n  customerId: string;\n  repairOrderId: string | null;\n  amount: number;\n  taxAmount: number | null;\n  totalAmount: number;\n  status: string;\n  dueDate: string;\n  paidDate: string | null;\n  paymentMethod: string | null;\n  notes: string | null;\n  createdAt: string;\n};\n\ntype Customer = {\n  id: string;\n  name: string;\n  email: string;\n};\n\ntype RepairOrder = {\n  id: string;\n  orderNumber: string;\n  customerId: string;\n};\n\n// Form validation schema\nconst invoiceSchema = z.object({\n  customerId: z.string().min(1, \"Customer is required\"),\n  repairOrderId: z.string().optional(),\n  amount: z.string().min(1, \"Amount is required\").refine(\n    (val) => !isNaN(parseFloat(val)) && parseFloat(val) > 0,\n    { message: \"Amount must be a positive number\" }\n  ),\n  taxAmount: z.string().optional().refine(\n    (val) => !val || (!isNaN(parseFloat(val)) && parseFloat(val) >= 0),\n    { message: \"Tax amount must be a valid number\" }\n  ),\n  dueDate: z.string().min(1, \"Due date is required\"),\n  notes: z.string().optional(),\n});\n\ntype InvoiceFormData = z.infer<typeof invoiceSchema>;\n\nexport default function Invoices() {\n  const { toast } = useToast();\n  const [viewingInvoice, setViewingInvoice] = useState<Invoice | null>(null);\n  const [collectingPayment, setCollectingPayment] = useState<Invoice | null>(null);\n  const [showCreateModal, setShowCreateModal] = useState(false);\n\n  const { data: invoices, isLoading } = useQuery<Invoice[]>({\n    queryKey: [\"/api/invoices\"],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: repairOrders = [] } = useQuery<RepairOrder[]>({\n    queryKey: [\"/api/repair-orders\"],\n  });\n\n  // Form for creating invoices\n  const form = useForm<InvoiceFormData>({\n    resolver: zodResolver(invoiceSchema),\n    defaultValues: {\n      customerId: \"\",\n      repairOrderId: \"\",\n      amount: \"\",\n      taxAmount: \"\",\n      dueDate: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Create invoice mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: InvoiceFormData) => {\n      const payload = {\n        customerId: data.customerId,\n        repairOrderId: data.repairOrderId || null,\n        amount: parseFloat(data.amount),\n        taxAmount: data.taxAmount ? parseFloat(data.taxAmount) : null,\n        dueDate: data.dueDate,\n        notes: data.notes || null,\n      };\n      const res = await apiRequest(\"POST\", \"/api/invoices\", payload);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/invoices\"] });\n      toast({\n        title: \"Success\",\n        description: \"Invoice created successfully\",\n      });\n      setShowCreateModal(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create invoice\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate dynamic metrics\n  const metrics = useMemo(() => {\n    const displayInvoices = Array.isArray(invoices) ? invoices : [];\n    const totalRevenue = displayInvoices\n      .filter(inv => inv.status === 'paid')\n      .reduce((sum, inv) => sum + inv.totalAmount, 0);\n    \n    const invoicesSent = displayInvoices.length;\n    const pendingPayment = displayInvoices.filter(inv => inv.status === 'pending').length;\n    const overdue = displayInvoices.filter(inv => inv.status === 'overdue').length;\n\n    return { totalRevenue, invoicesSent, pendingPayment, overdue };\n  }, [invoices]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"paid\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"overdue\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const handleCollectPayment = (invoice: Invoice) => {\n    setCollectingPayment(invoice);\n  };\n\n  const handleViewInvoice = (invoice: Invoice) => {\n    setViewingInvoice(invoice);\n  };\n\n  const handleCreate = (data: InvoiceFormData) => {\n    createMutation.mutate(data);\n  };\n\n  // Use real invoices data or empty array\n  const displayInvoices = Array.isArray(invoices) ? invoices : [];\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-invoices\">Invoices & Payments</h1>\n              <p className=\"text-muted-foreground\">Manage billing and payment processing</p>\n            </div>\n            <Button onClick={() => setShowCreateModal(true)} data-testid=\"button-new-invoice\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Invoice\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mr-4\">\n                    <DollarSign className=\"text-green-600 dark:text-green-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-total-revenue\">\n                      ${metrics.totalRevenue.toFixed(2)}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center mr-4\">\n                    <FileText className=\"text-blue-600 dark:text-blue-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-invoices-sent\">\n                      {metrics.invoicesSent}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Invoices Sent</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-yellow-100 dark:bg-yellow-900 rounded-lg flex items-center justify-center mr-4\">\n                    <Clock className=\"text-yellow-600 dark:text-yellow-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-pending-payment\">\n                      {metrics.pendingPayment}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Pending Payment</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-red-100 dark:bg-red-900 rounded-lg flex items-center justify-center mr-4\">\n                    <AlertTriangle className=\"text-red-600 dark:text-red-200 h-6 w-6\" />\n                  </div>\n                  <div>\n                    <p className=\"text-2xl font-bold\" data-testid=\"metric-overdue\">\n                      {metrics.overdue}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Overdue</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle>Recent Invoices</CardTitle>\n                  <CardDescription>Track payments and billing status</CardDescription>\n                </div>\n                <Input placeholder=\"Search invoices...\" className=\"w-64\" data-testid=\"input-search-invoices\" />\n              </div>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-center justify-between p-4 border rounded-lg animate-pulse\">\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-1/4\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/3\"></div>\n                      </div>\n                      <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : displayInvoices.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <FileText className=\"mx-auto h-12 w-12 text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No invoices found</h3>\n                  <p className=\"text-muted-foreground mb-4\">Create your first invoice to get started</p>\n                  <Button onClick={() => setShowCreateModal(true)}>\n                    <Plus className=\"mr-2 h-4 w-4\" />\n                    Create First Invoice\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {displayInvoices.map((invoice: Invoice) => (\n                    <div key={invoice.id} className=\"flex items-center justify-between p-4 border border-border rounded-lg hover:bg-accent\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-4 mb-2\">\n                          <h4 className=\"font-medium\">{invoice.invoiceNumber}</h4>\n                          <Badge className={getStatusColor(invoice.status)}>\n                            {invoice.status}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Invoice ID: {invoice.id.substring(0, 8)}...\n                        </p>\n                      </div>\n                      <div className=\"text-right mr-4\">\n                        <p className=\"text-lg font-bold\">${invoice.totalAmount.toFixed(2)}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Due: {new Date(invoice.dueDate).toLocaleDateString()}\n                        </p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\"\n                          onClick={() => handleViewInvoice(invoice)}\n                          data-testid={`button-view-${invoice.id}`}\n                        >\n                          View\n                        </Button>\n                        {invoice.status === \"pending\" && (\n                          <Button \n                            size=\"sm\"\n                            onClick={() => handleCollectPayment(invoice)}\n                            data-testid={`button-collect-${invoice.id}`}\n                          >\n                            Collect Payment\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* View Invoice Modal */}\n        <Dialog open={!!viewingInvoice} onOpenChange={() => setViewingInvoice(null)}>\n          <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Invoice Details</DialogTitle>\n              <DialogDescription>\n                View complete invoice information\n              </DialogDescription>\n            </DialogHeader>\n            \n            {viewingInvoice && (\n              <div className=\"space-y-6\">\n                {/* Invoice Header */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-2xl font-bold\">{viewingInvoice.invoiceNumber}</h3>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Created {new Date(viewingInvoice.createdAt).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <Badge className={getStatusColor(viewingInvoice.status)}>\n                    {viewingInvoice.status.toUpperCase()}\n                  </Badge>\n                </div>\n\n                {/* Invoice Details */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label className=\"text-muted-foreground\">Invoice ID</Label>\n                    <p className=\"font-medium\">{viewingInvoice.id.substring(0, 13)}...</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-muted-foreground\">Customer ID</Label>\n                    <p className=\"font-medium\">{viewingInvoice.customerId.substring(0, 13)}...</p>\n                  </div>\n                </div>\n\n                {/* Amount Details */}\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-semibold mb-3\">Amount Breakdown</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-muted-foreground\">Subtotal</span>\n                      <span className=\"font-medium\">${viewingInvoice.amount.toFixed(2)}</span>\n                    </div>\n                    {viewingInvoice.taxAmount && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-muted-foreground\">Tax</span>\n                        <span className=\"font-medium\">${viewingInvoice.taxAmount.toFixed(2)}</span>\n                      </div>\n                    )}\n                    <div className=\"flex justify-between text-lg font-bold border-t pt-2\">\n                      <span>Total</span>\n                      <span>${viewingInvoice.totalAmount.toFixed(2)}</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Payment Info */}\n                <div className=\"border-t pt-4\">\n                  <h4 className=\"font-semibold mb-3\">Payment Information</h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-muted-foreground\">Due Date</Label>\n                      <p className=\"font-medium\">{new Date(viewingInvoice.dueDate).toLocaleDateString()}</p>\n                    </div>\n                    {viewingInvoice.paidDate && (\n                      <div>\n                        <Label className=\"text-muted-foreground\">Paid Date</Label>\n                        <p className=\"font-medium\">{new Date(viewingInvoice.paidDate).toLocaleDateString()}</p>\n                      </div>\n                    )}\n                    {viewingInvoice.paymentMethod && (\n                      <div>\n                        <Label className=\"text-muted-foreground\">Payment Method</Label>\n                        <p className=\"font-medium\">{viewingInvoice.paymentMethod}</p>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {viewingInvoice.notes && (\n                  <div className=\"border-t pt-4\">\n                    <Label className=\"text-muted-foreground\">Notes</Label>\n                    <p className=\"mt-2 p-3 bg-accent rounded-md\">{viewingInvoice.notes}</p>\n                  </div>\n                )}\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button variant=\"outline\" onClick={() => setViewingInvoice(null)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Collect Payment Modal */}\n        <Dialog open={!!collectingPayment} onOpenChange={() => setCollectingPayment(null)}>\n          <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Collect Payment</DialogTitle>\n              <DialogDescription>\n                Process payment for invoice {collectingPayment?.invoiceNumber}\n              </DialogDescription>\n            </DialogHeader>\n            \n            {collectingPayment && (\n              <div className=\"space-y-6\">\n                {/* Invoice Summary */}\n                <div className=\"p-4 bg-accent rounded-lg\">\n                  <div className=\"flex justify-between mb-2\">\n                    <span className=\"text-muted-foreground\">Invoice</span>\n                    <span className=\"font-semibold\">{collectingPayment.invoiceNumber}</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-bold\">\n                    <span>Total Due</span>\n                    <span>${collectingPayment.totalAmount.toFixed(2)}</span>\n                  </div>\n                </div>\n\n                {/* Payment Method Selection */}\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-semibold\">Select Payment Method</h4>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-20 flex flex-col gap-2\"\n                      onClick={() => {\n                        toast({\n                          title: \"Payment Processing\",\n                          description: \"Cash payment recorded for \" + collectingPayment.invoiceNumber,\n                        });\n                        setCollectingPayment(null);\n                      }}\n                    >\n                      <Banknote className=\"h-8 w-8 text-green-600\" />\n                      <span>Cash</span>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-20 flex flex-col gap-2\"\n                      onClick={() => {\n                        toast({\n                          title: \"Payment Processing\",\n                          description: \"Card payment recorded for \" + collectingPayment.invoiceNumber,\n                        });\n                        setCollectingPayment(null);\n                      }}\n                    >\n                      <CreditCard className=\"h-8 w-8 text-blue-600\" />\n                      <span>Card</span>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-20 flex flex-col gap-2\"\n                      onClick={() => {\n                        toast({\n                          title: \"Payment Processing\",\n                          description: \"Check payment recorded for \" + collectingPayment.invoiceNumber,\n                        });\n                        setCollectingPayment(null);\n                      }}\n                    >\n                      <FileCheck className=\"h-8 w-8 text-purple-600\" />\n                      <span>Check</span>\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      className=\"h-20 flex flex-col gap-2\"\n                      onClick={() => {\n                        toast({\n                          title: \"Payment Processing\",\n                          description: \"Bank transfer recorded for \" + collectingPayment.invoiceNumber,\n                        });\n                        setCollectingPayment(null);\n                      }}\n                    >\n                      <Building2 className=\"h-8 w-8 text-orange-600\" />\n                      <span>Transfer</span>\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4 border-t\">\n                  <Button variant=\"outline\" onClick={() => setCollectingPayment(null)}>\n                    Cancel\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Create Invoice Modal */}\n        <Dialog open={showCreateModal} onOpenChange={setShowCreateModal}>\n          <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Create New Invoice</DialogTitle>\n              <DialogDescription>\n                Generate a new invoice for a customer\n              </DialogDescription>\n            </DialogHeader>\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleCreate)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"customerId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Customer *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-customer\">\n                            <SelectValue placeholder=\"Select customer\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {customers.map((customer) => (\n                            <SelectItem key={customer.id} value={customer.id}>\n                              {customer.name} ({customer.email})\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"repairOrderId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Repair Order (Optional)</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-repair-order\">\n                            <SelectValue placeholder=\"Select repair order\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {repairOrders.map((ro) => (\n                            <SelectItem key={ro.id} value={ro.id}>\n                              {ro.orderNumber}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"amount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Amount *</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            data-testid=\"input-amount\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"taxAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Tax Amount</FormLabel>\n                        <FormControl>\n                          <Input\n                            type=\"number\"\n                            step=\"0.01\"\n                            placeholder=\"0.00\"\n                            data-testid=\"input-tax-amount\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"dueDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Due Date *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"date\"\n                          data-testid=\"input-due-date\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          placeholder=\"Additional invoice notes...\"\n                          className=\"resize-none\"\n                          rows={3}\n                          data-testid=\"input-notes\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setShowCreateModal(false);\n                      form.reset();\n                    }}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createMutation.isPending}\n                    data-testid=\"button-submit-invoice\"\n                  >\n                    {createMutation.isPending ? \"Creating...\" : \"Create Invoice\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}","size_bytes":28310},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/pages/reporting.tsx":{"content":"import { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, LineChart, Line, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport { DollarSign, Users, Wrench, Package, TrendingUp, Calendar, AlertCircle } from \"lucide-react\";\n\ninterface RevenueAnalytics {\n  totalRevenue: number;\n  paidInvoices: number;\n  averageInvoiceAmount: number;\n  revenueByMonth: Array<{ month: string; revenue: number }>;\n}\n\ninterface CustomerAnalytics {\n  totalCustomers: number;\n  newCustomersThisMonth: number;\n  totalVehicles: number;\n  activeCustomers: number;\n  customersByMonth: Array<{ month: string; count: number }>;\n}\n\ninterface TechnicianAnalytics {\n  technicianId: string;\n  technicianName: string;\n  completedJobs: number;\n  activeJobs: number;\n  totalRevenue: number;\n  averageCompletionTime: number;\n}\n\ninterface InventoryAnalytics {\n  totalItems: number;\n  totalValue: number;\n  lowStockItems: number;\n  categoriesCount: number;\n  valueByCategory: Array<{ category: string; value: number }>;\n}\n\nexport default function Reporting() {\n  const { data: revenueData, isLoading: revenueLoading, isError: revenueError } = useQuery<RevenueAnalytics>({\n    queryKey: ['/api/analytics/revenue'],\n  });\n\n  const { data: customerData, isLoading: customerLoading, isError: customerError } = useQuery<CustomerAnalytics>({\n    queryKey: ['/api/analytics/customers'],\n  });\n\n  const { data: technicianData, isLoading: technicianLoading, isError: technicianError } = useQuery<TechnicianAnalytics[]>({\n    queryKey: ['/api/analytics/technicians'],\n  });\n\n  const { data: inventoryData, isLoading: inventoryLoading, isError: inventoryError } = useQuery<InventoryAnalytics>({\n    queryKey: ['/api/analytics/inventory'],\n  });\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n    }).format(value);\n  };\n\n  const formatMonth = (monthStr: string) => {\n    const [year, month] = monthStr.split('-');\n    return new Date(parseInt(year), parseInt(month) - 1).toLocaleDateString('en-US', { \n      month: 'short', \n      year: 'numeric' \n    });\n  };\n\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884d8', '#82ca9d'];\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-reporting\">Analytics & Reporting</h1>\n              <p className=\"text-muted-foreground\">Business insights and performance metrics</p>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                {revenueLoading ? (\n                  <div className=\"flex items-center\">\n                    <Skeleton className=\"w-12 h-12 rounded-lg mr-4\" />\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-8 w-20\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-300 rounded-lg flex items-center justify-center mr-4\">\n                      <DollarSign className=\"w-6 h-6\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold\" data-testid=\"stat-total-revenue\">\n                        {formatCurrency(revenueData?.totalRevenue || 0)}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                {customerLoading ? (\n                  <div className=\"flex items-center\">\n                    <Skeleton className=\"w-12 h-12 rounded-lg mr-4\" />\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-8 w-20\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 rounded-lg flex items-center justify-center mr-4\">\n                      <Users className=\"w-6 h-6\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold\" data-testid=\"stat-total-customers\">\n                        {customerData?.totalCustomers || 0}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">Total Customers</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                {technicianLoading ? (\n                  <div className=\"flex items-center\">\n                    <Skeleton className=\"w-12 h-12 rounded-lg mr-4\" />\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-8 w-20\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-300 rounded-lg flex items-center justify-center mr-4\">\n                      <Wrench className=\"w-6 h-6\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold\" data-testid=\"stat-total-jobs\">\n                        {technicianData?.reduce((sum, tech) => sum + tech.completedJobs, 0) || 0}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">Completed Jobs</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                {inventoryLoading ? (\n                  <div className=\"flex items-center\">\n                    <Skeleton className=\"w-12 h-12 rounded-lg mr-4\" />\n                    <div className=\"space-y-2\">\n                      <Skeleton className=\"h-8 w-20\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    <div className=\"w-12 h-12 bg-orange-100 dark:bg-orange-900 text-orange-600 dark:text-orange-300 rounded-lg flex items-center justify-center mr-4\">\n                      <Package className=\"w-6 h-6\" />\n                    </div>\n                    <div>\n                      <p className=\"text-2xl font-bold\" data-testid=\"stat-inventory-value\">\n                        {formatCurrency(inventoryData?.totalValue || 0)}\n                      </p>\n                      <p className=\"text-sm text-muted-foreground\">Inventory Value</p>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Revenue Analytics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Revenue Overview\n                </CardTitle>\n                <CardDescription>Revenue metrics and trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {revenueLoading ? (\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Total Revenue</span>\n                      <span className=\"font-bold\" data-testid=\"revenue-total\">\n                        {formatCurrency(revenueData?.totalRevenue || 0)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Paid Invoices</span>\n                      <span className=\"font-bold\" data-testid=\"revenue-paid-invoices\">\n                        {revenueData?.paidInvoices || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Average Invoice</span>\n                      <span className=\"font-bold\" data-testid=\"revenue-average\">\n                        {formatCurrency(revenueData?.averageInvoiceAmount || 0)}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"w-5 h-5\" />\n                  Revenue by Month\n                </CardTitle>\n                <CardDescription>Monthly revenue trends</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {revenueLoading ? (\n                  <Skeleton className=\"h-64 w-full\" />\n                ) : revenueError || !revenueData?.revenueByMonth?.length ? (\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    <div className=\"text-center\">\n                      <TrendingUp className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                      <p>{revenueError ? \"Failed to load revenue data\" : \"No revenue data available\"}</p>\n                    </div>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <BarChart data={revenueData.revenueByMonth.map(item => ({\n                      month: formatMonth(item.month),\n                      revenue: item.revenue,\n                    }))}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                      <Bar dataKey=\"revenue\" fill=\"#0088FE\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Customer Analytics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"w-5 h-5\" />\n                  Customer Metrics\n                </CardTitle>\n                <CardDescription>Customer growth and activity</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {customerLoading ? (\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Total Customers</span>\n                      <span className=\"font-bold\" data-testid=\"customer-total\">\n                        {customerData?.totalCustomers || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">New This Month</span>\n                      <span className=\"font-bold text-green-600 dark:text-green-400\" data-testid=\"customer-new\">\n                        +{customerData?.newCustomersThisMonth || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Active Customers</span>\n                      <span className=\"font-bold\" data-testid=\"customer-active\">\n                        {customerData?.activeCustomers || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Total Vehicles</span>\n                      <span className=\"font-bold\" data-testid=\"customer-vehicles\">\n                        {customerData?.totalVehicles || 0}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"w-5 h-5\" />\n                  Customer Growth\n                </CardTitle>\n                <CardDescription>New customers over time</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {customerLoading ? (\n                  <Skeleton className=\"h-64 w-full\" />\n                ) : customerError || !customerData?.customersByMonth?.length ? (\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    <div className=\"text-center\">\n                      <Users className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                      <p>{customerError ? \"Failed to load customer data\" : \"No customer data available\"}</p>\n                    </div>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <LineChart data={customerData.customersByMonth.map(item => ({\n                      month: formatMonth(item.month),\n                      count: item.count,\n                    }))}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Line type=\"monotone\" dataKey=\"count\" stroke=\"#00C49F\" strokeWidth={2} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Technician Performance */}\n          <Card className=\"mb-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Wrench className=\"w-5 h-5\" />\n                Technician Performance\n              </CardTitle>\n              <CardDescription>Individual technician metrics and productivity</CardDescription>\n            </CardHeader>\n            <CardContent>\n              {technicianLoading ? (\n                <div className=\"space-y-3\">\n                  {[1, 2, 3].map((i) => (\n                    <Skeleton key={i} className=\"h-20 w-full\" />\n                  ))}\n                </div>\n              ) : technicianError || !technicianData || technicianData.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Wrench className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                  <p>{technicianError ? \"Failed to load technician data\" : \"No technician data available\"}</p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {technicianData.map((tech) => (\n                    <div key={tech.technicianId} className=\"p-4 border border-border rounded-lg\" data-testid={`tech-${tech.technicianId}`}>\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <h4 className=\"font-semibold text-lg\">{tech.technicianName}</h4>\n                        <span className=\"text-sm font-medium text-green-600 dark:text-green-400\">\n                          {formatCurrency(tech.totalRevenue)}\n                        </span>\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        <div>\n                          <p className=\"text-xs text-muted-foreground\">Completed Jobs</p>\n                          <p className=\"text-lg font-bold\">{tech.completedJobs}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-muted-foreground\">Active Jobs</p>\n                          <p className=\"text-lg font-bold\">{tech.activeJobs}</p>\n                        </div>\n                        <div>\n                          <p className=\"text-xs text-muted-foreground\">Avg. Time (hrs)</p>\n                          <p className=\"text-lg font-bold\">{tech.averageCompletionTime.toFixed(1)}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Inventory Analytics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"w-5 h-5\" />\n                  Inventory Overview\n                </CardTitle>\n                <CardDescription>Inventory metrics and status</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {inventoryLoading ? (\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                    <Skeleton className=\"h-6 w-full\" />\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Total Items</span>\n                      <span className=\"font-bold\" data-testid=\"inventory-total-items\">\n                        {inventoryData?.totalItems || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Total Value</span>\n                      <span className=\"font-bold\" data-testid=\"inventory-total-value\">\n                        {formatCurrency(inventoryData?.totalValue || 0)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-secondary rounded-lg\">\n                      <span className=\"text-sm text-muted-foreground\">Categories</span>\n                      <span className=\"font-bold\" data-testid=\"inventory-categories\">\n                        {inventoryData?.categoriesCount || 0}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-orange-100 dark:bg-orange-900/30 rounded-lg\">\n                      <span className=\"text-sm flex items-center gap-2\">\n                        <AlertCircle className=\"w-4 h-4 text-orange-600 dark:text-orange-400\" />\n                        <span className=\"text-orange-600 dark:text-orange-400\">Low Stock Items</span>\n                      </span>\n                      <span className=\"font-bold text-orange-600 dark:text-orange-400\" data-testid=\"inventory-low-stock\">\n                        {inventoryData?.lowStockItems || 0}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Package className=\"w-5 h-5\" />\n                  Value by Category\n                </CardTitle>\n                <CardDescription>Inventory distribution by category</CardDescription>\n              </CardHeader>\n              <CardContent>\n                {inventoryLoading ? (\n                  <Skeleton className=\"h-64 w-full\" />\n                ) : inventoryError || !inventoryData?.valueByCategory?.length ? (\n                  <div className=\"h-64 flex items-center justify-center text-muted-foreground\">\n                    <div className=\"text-center\">\n                      <Package className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                      <p>{inventoryError ? \"Failed to load inventory data\" : \"No inventory data available\"}</p>\n                    </div>\n                  </div>\n                ) : (\n                  <ResponsiveContainer width=\"100%\" height={250}>\n                    <PieChart>\n                      <Pie\n                        data={inventoryData.valueByCategory}\n                        dataKey=\"value\"\n                        nameKey=\"category\"\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        label={(entry) => `${entry.category}: ${formatCurrency(entry.value)}`}\n                      >\n                        {inventoryData.valueByCategory.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value) => formatCurrency(Number(value))} />\n                    </PieChart>\n                  </ResponsiveContainer>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":23227},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"slide-in-right\": {\n          from: {\n            transform: \"translateX(100%)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"pulse-subtle\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.7\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n          },\n          to: {\n            opacity: \"1\",\n          },\n        },\n        \"scale-in\": {\n          from: {\n            transform: \"scale(0.95)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"scale(1)\",\n            opacity: \"1\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"slide-in-right\": \"slide-in-right 0.3s ease-out\",\n        \"pulse-subtle\": \"pulse-subtle 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n        \"fade-in\": \"fade-in 0.2s ease-out\",\n        \"scale-in\": \"scale-in 0.2s ease-out\",\n      },\n      spacing: {\n        \"18\": \"4.5rem\",\n        \"88\": \"22rem\",\n      },\n      boxShadow: {\n        \"2xs\": \"var(--shadow-2xs)\",\n        \"xs\": \"var(--shadow-xs)\",\n        \"sm\": \"var(--shadow-sm)\",\n        \"md\": \"var(--shadow-md)\",\n        \"lg\": \"var(--shadow-lg)\",\n        \"xl\": \"var(--shadow-xl)\",\n        \"2xl\": \"var(--shadow-2xl)\",\n      },\n      letterSpacing: {\n        \"normal\": \"var(--tracking-normal)\",\n      },\n    },\n  },\n  plugins: [\n    require(\"tailwindcss-animate\"),\n    require(\"@tailwindcss/typography\"),\n  ],\n} satisfies Config;\n","size_bytes":4237},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"replit.md":{"content":"# AutoFlow GMS - Garage Management System\n\n## Overview\n\nAutoFlow GMS is a comprehensive garage management system designed for auto repair shops. The application provides end-to-end operational management including customer interactions, service workflows, inventory control, employee management, and financial reporting. Built as a modern full-stack application with React frontend and Express backend, the system emphasizes reliable data persistence, audit trails, and user-friendly interfaces for both staff and customers.\n\nThe system supports multiple user roles (admin, technician, customer) with role-based access control and includes features such as digital vehicle inspections, appointment scheduling, repair order management, customer portal access, and automated marketing campaigns.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Library**: Shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management with custom query client\n- **Routing**: Wouter for client-side routing with role-based route protection\n- **Forms**: React Hook Form with Zod validation schemas for type-safe form handling\n- **Authentication Flow**: Client-side authentication state management integrated with backend auth system\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **Authentication**: Replit OpenID Connect (OIDC) integration with Passport.js strategy\n- **Session Management**: Express sessions with PostgreSQL session store using connect-pg-simple\n- **API Design**: RESTful API endpoints with consistent error handling and request logging middleware\n- **Database Layer**: Drizzle ORM with schema-first approach for type safety\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless database provider\n- **ORM**: Drizzle ORM with TypeScript schema definitions in shared directory\n- **Schema Management**: Drizzle Kit for database migrations and schema changes\n- **Session Storage**: PostgreSQL-backed session store for authentication persistence\n- **Connection Pooling**: Neon serverless connection pooling for optimal database performance\n\n### Authentication and Authorization\n- **Provider**: Replit OpenID Connect for seamless integration with Replit platform\n- **Session Management**: Server-side sessions with HttpOnly cookies for security\n- **Role-Based Access**: User roles (user, manager, admin) with middleware protection\n- **API Security**: Authentication required for all API endpoints except health checks\n- **Client Protection**: Route-level authentication checks with automatic login redirects\n\n### Design Patterns and Architecture Decisions\n- **Monorepo Structure**: Shared TypeScript schemas between client and server for type consistency\n- **Clean Architecture**: Separation of concerns with storage abstraction layer and route handlers\n- **Error Handling**: Global error boundaries on frontend with consistent API error responses\n- **Development Experience**: Hot module reloading with Vite and comprehensive TypeScript configuration\n- **Code Organization**: Feature-based directory structure with reusable UI components\n- **Performance**: Query caching with TanStack Query and optimized bundle splitting\n\n## External Dependencies\n\n### Database and Infrastructure\n- **Neon Database**: Serverless PostgreSQL provider with connection pooling and automated backups\n- **Drizzle ORM**: Type-safe database interactions with schema migration support\n- **Replit Platform**: Authentication provider and deployment infrastructure\n\n### Frontend Libraries\n- **Radix UI**: Accessible component primitives for complex UI elements (dialogs, dropdowns, forms)\n- **TanStack Query**: Server state management with caching, background updates, and error handling\n- **Tailwind CSS**: Utility-first CSS framework with custom design system variables\n- **React Hook Form**: Form library with validation and optimized re-rendering\n- **Zod**: Runtime type validation for form inputs and API data\n\n### Backend Services\n- **OpenID Connect**: Standardized authentication protocol for secure user verification\n- **Express Session**: Session management with PostgreSQL persistence\n- **WebSocket Support**: Real-time capabilities through Neon's WebSocket constructor\n\n### Development Tools\n- **Vite**: Fast build tool with development server and optimized production builds\n- **TypeScript**: Static type checking across the entire application stack\n- **ESBuild**: Fast JavaScript bundler for production server builds\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n### Integration Capabilities\nThe system is architected to support future integrations with:\n- Payment processing systems (Stripe mentioned in requirements)\n- Google APIs for reviews and mapping services\n- SMS/Email marketing platforms\n- Third-party automotive data providers\n- Mobile applications for technicians and customers\n\n## Deployment Options\n\n### Docker Deployment\nThe application is fully containerized and can be deployed using Docker:\n- **Docker Compose**: Multi-container orchestration with PostgreSQL database\n- **Production Ready**: Optimized multi-stage builds with health checks\n- **Easy Scaling**: Can be deployed on any Docker-compatible platform\n- **Portability**: Consistent environment across development and production\n\nSee `README.Docker.md` for complete Docker deployment instructions.\n\n### Self-Hosting Options\n- **CyberPanel**: OpenLiteSpeed with Node.js and PostgreSQL support\n- **Traditional VPS**: Any Linux server with Node.js 20+ and PostgreSQL\n- **Cloud Platforms**: AWS, DigitalOcean, Linode, Vultr, etc.\n- **Container Platforms**: Docker Swarm, Kubernetes, Portainer\n\n### Recent Updates\n- **2025-10-21**: Implemented complete two-way texting/messaging system with database persistence\n- **2025-01-21**: Made ALL settings tabs fully dynamic with database persistence (billing, integrations, security)\n- **2025-01-21**: Fixed landing page to use OIDC authentication exclusively (removed non-functional local login)\n- **2025-01-21**: Added inspection status update functionality with dropdown UI for changing status\n- **2025-01-21**: Fixed router to always register all routes for proper authentication flow\n- **2025-01-21**: Made dashboard Quick Actions fully functional with proper navigation\n- **2025-01-21**: Replaced all dashboard icons with lucide-react for consistency\n- **2025-01-21**: Fixed storage layer audit logging to resolve settings save issues\n- **2025-01-21**: Implemented complete review campaign management system with automated review requests\n- **2025-01-21**: Fixed settings page save functionality - all tabs now properly persist data\n- **2025-01-21**: Added review campaigns database tables and full CRUD API endpoints\n- **2025-01-20**: Added comprehensive Docker support with multi-stage builds\n- **2025-01-20**: Completed three-tier role-based access control (RBAC) implementation\n- **2025-01-20**: Enhanced dashboard with dynamic role-specific content\n- **2025-01-20**: Implemented secure technician assignment-based filtering\n\n### Key Features Implemented\n\n#### Review Campaign System\n- **Campaign Management**: Create and manage automated review request campaigns\n- **Trigger Types**: Post-service, monthly follow-up, or manual trigger options\n- **Multi-channel**: Email and SMS template support for review requests\n- **Analytics**: Track sent count, response rate, and average ratings per campaign\n- **Status Control**: Toggle campaigns active/paused/inactive with real-time updates\n- **Database Tables**: review_campaigns and reviews tables with full audit trail\n\n#### Settings Management System\n- **Business Information**: Business name, contact details, address configuration with full database persistence\n- **Operating Hours**: Day-by-day hours management with open/closed toggles and null-safe time handling\n- **Notification Preferences**: Email, SMS, appointment, and payment notification settings\n- **Billing & Subscription**: Plan details, payment method, card information, and auto-renewal settings\n- **Third-Party Integrations**: Google Reviews, Stripe Payments, and Twilio SMS configuration with API key management\n- **Security Policies**: Two-factor authentication, session timeout, password requirements, and login attempt limits\n- **Data Persistence**: All 5 tabs fully dynamic with TanStack Query, proper null handling via nullifyEmptyStrings helper\n- **Admin-Only Access**: All settings API endpoints protected with adminOnly middleware\n- **Loading States**: Save buttons disabled during data fetch to prevent overwriting database values with defaults\n\n#### Two-Way Texting/Messaging System\n- **Database Tables**: Conversations and messages tables with proper relationships and timestamps\n- **Conversation Management**: Track customer conversations with phone numbers, last message preview, unread counts\n- **Message Threading**: Full message history with inbound/outbound direction indicators\n- **Send to Existing**: Send messages to existing conversation threads with real-time updates\n- **Create New Conversations**: Start new conversations by entering phone number and sending first message\n- **Mark as Read**: Automatically mark messages as read when conversation is opened\n- **Real-time Updates**: TanStack Query integration with automatic cache invalidation after mutations\n- **Two-Panel UI**: Conversations list on left, message view/composer on right\n- **Character Counter**: SMS character limit tracking (160 characters)\n- **Loading States**: Skeleton loaders for conversations and messages during data fetch\n- **Error Handling**: Toast notifications for send failures and validation errors\n- **Audit Trail**: All conversation and message operations logged in audit_log table\n- **Auth Protected**: All messaging endpoints require authentication via requireAuth middleware","size_bytes":10074},"client/src/pages/appointments.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertAppointmentSchema } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\nimport { z } from \"zod\";\n\ntype Appointment = {\n  id: string;\n  customerId: string;\n  vehicleId: string;\n  scheduledDate: string;\n  duration: number;\n  serviceType: string;\n  description: string | null;\n  status: string;\n  notes: string | null;\n  createdAt: string;\n};\n\n// Helper function to convert Date to local YYYY-MM-DD string\nconst toLocalDateString = (date: Date): string => {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n};\n\nexport default function Appointments() {\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [showingAllAppointments, setShowingAllAppointments] = useState(true);\n  const [viewingAppointment, setViewingAppointment] = useState<Appointment | null>(null);\n  const [editingAppointment, setEditingAppointment] = useState<Appointment | null>(null);\n\n  const { data: appointments, isLoading } = useQuery({\n    queryKey: [\"/api/appointments\"],\n  });\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const createAppointmentMutation = useMutation({\n    mutationFn: async (appointmentData: z.infer<typeof insertAppointmentSchema>) => {\n      return await apiRequest(\"POST\", \"/api/appointments\", appointmentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      setIsDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Success\",\n        description: \"Appointment scheduled successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to schedule appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateAppointmentMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof insertAppointmentSchema> }) => {\n      return await apiRequest(\"PATCH\", `/api/appointments/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/appointments\"] });\n      setEditingAppointment(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Appointment updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update appointment\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<z.infer<typeof insertAppointmentSchema>>({\n    resolver: zodResolver(insertAppointmentSchema),\n    defaultValues: {\n      customerId: \"\",\n      vehicleId: \"\",\n      scheduledDate: new Date(),\n      duration: 60,\n      serviceType: \"\",\n      description: \"\",\n      status: \"scheduled\",\n      notes: \"\",\n    },\n  });\n\n  const editForm = useForm<z.infer<typeof insertAppointmentSchema>>({\n    resolver: zodResolver(insertAppointmentSchema),\n    defaultValues: {\n      customerId: \"\",\n      vehicleId: \"\",\n      scheduledDate: new Date(),\n      duration: 60,\n      serviceType: \"\",\n      description: \"\",\n      status: \"scheduled\",\n      notes: \"\",\n    },\n  });\n\n  // Get vehicles for selected customer (create form)\n  const selectedCustomerId = form.watch(\"customerId\");\n  const { data: vehicles, isLoading: isLoadingVehicles, error: vehiclesError } = useQuery({\n    queryKey: [\"/api/customers\", selectedCustomerId, \"vehicles\"],\n    enabled: !!selectedCustomerId,\n  });\n\n  // Get vehicles for selected customer (edit form)\n  const selectedEditCustomerId = editForm.watch(\"customerId\");\n  const { data: editVehicles, isLoading: isLoadingEditVehicles, error: editVehiclesError } = useQuery({\n    queryKey: [\"/api/customers\", selectedEditCustomerId, \"vehicles\"],\n    enabled: !!selectedEditCustomerId,\n  });\n\n  // Reset vehicleId when customer changes\n  useEffect(() => {\n    form.setValue(\"vehicleId\", \"\");\n  }, [selectedCustomerId, form]);\n\n  useEffect(() => {\n    editForm.setValue(\"vehicleId\", \"\");\n  }, [selectedEditCustomerId, editForm]);\n\n  // Populate edit form when editing appointment changes\n  useEffect(() => {\n    if (editingAppointment) {\n      editForm.reset({\n        customerId: editingAppointment.customerId,\n        vehicleId: editingAppointment.vehicleId,\n        scheduledDate: new Date(editingAppointment.scheduledDate),\n        duration: editingAppointment.duration,\n        serviceType: editingAppointment.serviceType,\n        description: editingAppointment.description || \"\",\n        status: editingAppointment.status,\n        notes: editingAppointment.notes || \"\",\n      });\n    }\n  }, [editingAppointment, editForm]);\n\n  const onSubmit = (data: z.infer<typeof insertAppointmentSchema>) => {\n    createAppointmentMutation.mutate(data);\n  };\n\n  const onEditSubmit = (data: z.infer<typeof insertAppointmentSchema>) => {\n    if (editingAppointment) {\n      updateAppointmentMutation.mutate({ id: editingAppointment.id, data });\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"confirmed\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"in_progress\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"completed\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"cancelled\": return \"bg-red-100 text-red-800 border-red-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const filteredAppointments = Array.isArray(appointments) ? \n    (selectedDate && !showingAllAppointments ? \n      appointments.filter((appointment: Appointment) => {\n        const appointmentDate = new Date(appointment.scheduledDate);\n        return toLocalDateString(appointmentDate) === selectedDate;\n      }) : \n      [...appointments].sort((a: Appointment, b: Appointment) => \n        new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime()\n      )\n    ) : [];\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-h-screen\">\n        <header className=\"bg-card border-b border-border px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-appointments-title\">\n                Appointment Management\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Schedule and manage customer appointments with automated reminders and notifications.\n              </p>\n            </div>\n            \n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-schedule-appointment\">\n                  <i className=\"fas fa-calendar-plus mr-2\"></i>\n                  Schedule Appointment\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Schedule New Appointment</DialogTitle>\n                  <DialogDescription>\n                    Create a new appointment with secure data persistence and audit trails.\n                  </DialogDescription>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"customerId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Customer</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-customer\">\n                                <SelectValue placeholder=\"Select a customer\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {Array.isArray(customers) ? customers.map((customer: any) => (\n                                <SelectItem key={customer.id} value={customer.id}>\n                                  {customer.firstName} {customer.lastName}\n                                </SelectItem>\n                              )) : null}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"vehicleId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Vehicle</FormLabel>\n                          <Select \n                            onValueChange={field.onChange} \n                            defaultValue={field.value}\n                            disabled={!selectedCustomerId || isLoadingVehicles}\n                          >\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-vehicle\">\n                                <SelectValue \n                                  placeholder={\n                                    !selectedCustomerId ? \"Select a customer first\" :\n                                    isLoadingVehicles ? \"Loading vehicles...\" :\n                                    vehiclesError ? \"Error loading vehicles\" :\n                                    \"Select a vehicle\"\n                                  } \n                                />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {Array.isArray(vehicles) && vehicles.length > 0 ? \n                                vehicles.map((vehicle: any) => (\n                                  <SelectItem key={vehicle.id} value={String(vehicle.id)}>\n                                    {vehicle.year} {vehicle.make} {vehicle.model} - {vehicle.licensePlate}\n                                  </SelectItem>\n                                )) : \n                                selectedCustomerId && !isLoadingVehicles && (\n                                  <div className=\"p-2 text-sm text-muted-foreground\">\n                                    No vehicles found for this customer\n                                  </div>\n                                )\n                              }\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"serviceType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Service Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-service-type\">\n                                <SelectValue placeholder=\"Select service type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"oil_change\">Oil Change</SelectItem>\n                              <SelectItem value=\"tire_service\">Tire Service</SelectItem>\n                              <SelectItem value=\"brake_service\">Brake Service</SelectItem>\n                              <SelectItem value=\"engine_diagnostic\">Engine Diagnostic</SelectItem>\n                              <SelectItem value=\"general_maintenance\">General Maintenance</SelectItem>\n                              <SelectItem value=\"inspection\">Vehicle Inspection</SelectItem>\n                              <SelectItem value=\"other\">Other</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"scheduledDate\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Date & Time</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"datetime-local\" \n                                {...field}\n                                value={field.value ? (() => {\n                                  const date = new Date(field.value);\n                                  const offset = date.getTimezoneOffset();\n                                  const localDate = new Date(date.getTime() - offset * 60000);\n                                  return localDate.toISOString().slice(0, 16);\n                                })() : \"\"}\n                                onChange={(e) => {\n                                  if (e.target.value) {\n                                    const localDate = new Date(e.target.value);\n                                    field.onChange(localDate);\n                                  } else {\n                                    field.onChange(undefined);\n                                  }\n                                }}\n                                data-testid=\"input-scheduled-date\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"duration\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Duration (minutes)</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"number\" \n                                placeholder=\"60\" \n                                {...field}\n                                value={field.value || \"\"}\n                                onChange={(e) => field.onChange(Number(e.target.value))}\n                                data-testid=\"input-duration\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Describe the service needed...\" \n                              {...field} \n                              value={field.value || \"\"}\n                              data-testid=\"textarea-description\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end gap-2 pt-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setIsDialogOpen(false)}\n                        data-testid=\"button-cancel\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={createAppointmentMutation.isPending}\n                        data-testid=\"button-submit-appointment\"\n                      >\n                        {createAppointmentMutation.isPending ? \"Scheduling...\" : \"Schedule Appointment\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </header>\n\n        <div className=\"flex-1 p-8 space-y-6\">\n          {/* Date Selector */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Appointment Calendar</CardTitle>\n              <CardDescription>\n                View and manage appointments by date\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4 items-center\">\n                <div className=\"flex-1 max-w-xs\">\n                  <Label htmlFor=\"date-select\">Filter by Date (optional)</Label>\n                  <Input\n                    id=\"date-select\"\n                    type=\"date\"\n                    value={selectedDate}\n                    onChange={(e) => {\n                      setSelectedDate(e.target.value);\n                      setShowingAllAppointments(!e.target.value);\n                    }}\n                    data-testid=\"input-select-date\"\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setSelectedDate(toLocalDateString(new Date()));\n                      setShowingAllAppointments(false);\n                    }}\n                    data-testid=\"button-today\"\n                  >\n                    Today\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setSelectedDate(\"\");\n                      setShowingAllAppointments(true);\n                    }}\n                    data-testid=\"button-show-all\"\n                  >\n                    Show All\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Appointments for Selected Date */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {showingAllAppointments ? \n                  \"All Appointments\" : \n                  `Appointments for ${new Date(selectedDate + 'T00:00:00').toLocaleDateString(\"en-US\", { \n                    weekday: \"long\", \n                    year: \"numeric\", \n                    month: \"long\", \n                    day: \"numeric\" \n                  })}`\n                }\n              </CardTitle>\n              <CardDescription>\n                {filteredAppointments.length} appointment(s) {showingAllAppointments ? \"total\" : \"scheduled\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-center gap-4 p-4 border rounded-lg animate-pulse\">\n                      <div className=\"w-12 h-12 bg-muted rounded-lg\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-1/3\"></div>\n                        <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                      </div>\n                      <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : filteredAppointments.length === 0 ? (\n                <div className=\"text-center py-12\" data-testid=\"text-no-appointments\">\n                  <i className=\"fas fa-calendar-alt text-4xl text-muted-foreground mb-4\"></i>\n                  <h3 className=\"text-lg font-semibold text-foreground mb-2\">No appointments scheduled</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    {showingAllAppointments ? \"No appointments have been scheduled yet.\" : \"No appointments found for the selected date.\"}\n                  </p>\n                  <Button onClick={() => setIsDialogOpen(true)} data-testid=\"button-schedule-first\">\n                    <i className=\"fas fa-calendar-plus mr-2\"></i>\n                    Schedule First Appointment\n                  </Button>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {filteredAppointments.map((appointment: Appointment) => (\n                    <div \n                      key={appointment.id} \n                      className=\"flex items-center gap-4 p-4 border border-border rounded-lg hover:bg-accent transition-colors\"\n                      data-testid={`card-appointment-${appointment.id}`}\n                    >\n                      <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <i className=\"fas fa-calendar-check text-primary\"></i>\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h3 className=\"font-semibold text-foreground\">\n                            {appointment.serviceType.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                          </h3>\n                          <Badge className={getStatusColor(appointment.status)}>\n                            {appointment.status.replace('_', ' ')}\n                          </Badge>\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          <p>\n                            <i className=\"fas fa-calendar mr-1\"></i>\n                            {new Date(appointment.scheduledDate).toLocaleDateString(\"en-US\", { \n                              weekday: \"short\",\n                              month: \"short\", \n                              day: \"numeric\",\n                              year: \"numeric\"\n                            })}\n                            {\" \"}\n                            <i className=\"fas fa-clock ml-2 mr-1\"></i>\n                            {new Date(appointment.scheduledDate).toLocaleTimeString(\"en-US\", { \n                              hour: \"numeric\", \n                              minute: \"2-digit\",\n                              hour12: true \n                            })} ({appointment.duration} min)\n                          </p>\n                          {appointment.description && (\n                            <p className=\"mt-1\">{appointment.description}</p>\n                          )}\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => setViewingAppointment(appointment)}\n                          data-testid={`button-view-appointment-${appointment.id}`}\n                        >\n                          <i className=\"fas fa-eye mr-1\"></i>\n                          View\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => setEditingAppointment(appointment)}\n                          data-testid={`button-edit-appointment-${appointment.id}`}\n                        >\n                          <i className=\"fas fa-edit mr-1\"></i>\n                          Edit\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n\n      {/* View Appointment Dialog */}\n      <Dialog open={!!viewingAppointment} onOpenChange={() => setViewingAppointment(null)}>\n        <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Appointment Details</DialogTitle>\n            <DialogDescription>\n              View appointment information and status.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {viewingAppointment && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Service Type</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {viewingAppointment.serviceType.replace('_', ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Status</Label>\n                  <div className=\"mt-1\">\n                    <Badge className={getStatusColor(viewingAppointment.status)}>\n                      {viewingAppointment.status.replace('_', ' ')}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium\">Date & Time</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {new Date(viewingAppointment.scheduledDate).toLocaleDateString(\"en-US\", {\n                      weekday: \"long\",\n                      year: \"numeric\",\n                      month: \"long\",\n                      day: \"numeric\"\n                    })}\n                    <br />\n                    {new Date(viewingAppointment.scheduledDate).toLocaleTimeString(\"en-US\", {\n                      hour: \"numeric\",\n                      minute: \"2-digit\",\n                      hour12: true\n                    })}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium\">Duration</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {viewingAppointment.duration} minutes\n                  </p>\n                </div>\n              </div>\n              \n              {viewingAppointment.description && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Description</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {viewingAppointment.description}\n                  </p>\n                </div>\n              )}\n              \n              {viewingAppointment.notes && (\n                <div>\n                  <Label className=\"text-sm font-medium\">Notes</Label>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    {viewingAppointment.notes}\n                  </p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Appointment Dialog */}\n      <Dialog open={!!editingAppointment} onOpenChange={() => setEditingAppointment(null)}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Appointment</DialogTitle>\n            <DialogDescription>\n              Update appointment information and schedule.\n            </DialogDescription>\n          </DialogHeader>\n          \n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onEditSubmit)} className=\"space-y-4\">\n              <FormField\n                control={editForm.control}\n                name=\"customerId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Customer</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"edit-select-customer\">\n                          <SelectValue placeholder=\"Select a customer\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {Array.isArray(customers) ? customers.map((customer: any) => (\n                          <SelectItem key={customer.id} value={customer.id}>\n                            {customer.firstName} {customer.lastName}\n                          </SelectItem>\n                        )) : null}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editForm.control}\n                name=\"vehicleId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Vehicle</FormLabel>\n                    <Select \n                      onValueChange={field.onChange} \n                      defaultValue={field.value}\n                      disabled={!selectedEditCustomerId || isLoadingEditVehicles}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"edit-select-vehicle\">\n                          <SelectValue \n                            placeholder={\n                              !selectedEditCustomerId ? \"Select a customer first\" :\n                              isLoadingEditVehicles ? \"Loading vehicles...\" :\n                              editVehiclesError ? \"Error loading vehicles\" :\n                              \"Select a vehicle\"\n                            } \n                          />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {Array.isArray(editVehicles) && editVehicles.length > 0 ? \n                          editVehicles.map((vehicle: any) => (\n                            <SelectItem key={vehicle.id} value={String(vehicle.id)}>\n                              {vehicle.year} {vehicle.make} {vehicle.model} - {vehicle.licensePlate}\n                            </SelectItem>\n                          )) : \n                          selectedEditCustomerId && !isLoadingEditVehicles && (\n                            <div className=\"p-2 text-sm text-muted-foreground\">\n                              No vehicles found for this customer\n                            </div>\n                          )\n                        }\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editForm.control}\n                name=\"serviceType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Service Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"edit-select-service-type\">\n                          <SelectValue placeholder=\"Select service type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"oil_change\">Oil Change</SelectItem>\n                        <SelectItem value=\"tire_service\">Tire Service</SelectItem>\n                        <SelectItem value=\"brake_service\">Brake Service</SelectItem>\n                        <SelectItem value=\"engine_diagnostic\">Engine Diagnostic</SelectItem>\n                        <SelectItem value=\"general_maintenance\">General Maintenance</SelectItem>\n                        <SelectItem value=\"inspection\">Vehicle Inspection</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"scheduledDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Date & Time</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"datetime-local\" \n                          {...field}\n                          value={field.value ? (() => {\n                            const date = new Date(field.value);\n                            const offset = date.getTimezoneOffset();\n                            const localDate = new Date(date.getTime() - offset * 60000);\n                            return localDate.toISOString().slice(0, 16);\n                          })() : \"\"}\n                          onChange={(e) => {\n                            if (e.target.value) {\n                              const localDate = new Date(e.target.value);\n                              field.onChange(localDate);\n                            } else {\n                              field.onChange(undefined);\n                            }\n                          }}\n                          data-testid=\"edit-input-scheduled-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={editForm.control}\n                  name=\"duration\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Duration (minutes)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          placeholder=\"60\" \n                          {...field}\n                          value={field.value || \"\"}\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                          data-testid=\"edit-input-duration\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editForm.control}\n                name=\"status\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Status</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value || undefined}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"edit-select-status\">\n                          <SelectValue placeholder=\"Select status\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"scheduled\">Scheduled</SelectItem>\n                        <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                        <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                        <SelectItem value=\"completed\">Completed</SelectItem>\n                        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Describe the service needed...\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"edit-textarea-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editForm.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Additional notes...\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"edit-textarea-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-2 pt-4\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setEditingAppointment(null)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={updateAppointmentMutation.isPending}\n                  data-testid=\"button-save-appointment\"\n                >\n                  {updateAppointmentMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":39967},"client/src/pages/customer-portal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Sidebar from \"@/components/sidebar\";\n\nexport default function CustomerPortal() {\n  const { toast } = useToast();\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const [registrationEmail, setRegistrationEmail] = useState(\"\");\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: customers } = useQuery({\n    queryKey: [\"/api/customers\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: appointments } = useQuery({\n    queryKey: [\"/api/appointments\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: repairOrders } = useQuery({\n    queryKey: [\"/api/repair-orders\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: invoices } = useQuery({\n    queryKey: [\"/api/invoices\"],\n    enabled: isAuthenticated,\n  });\n\n  const handleCustomerRegistration = () => {\n    if (!registrationEmail) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid email address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Registration Initiated\",\n      description: `Customer registration process started for ${registrationEmail}`,\n    });\n    setRegistrationEmail(\"\");\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"scheduled\":\n      case \"created\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"confirmed\":\n      case \"in_progress\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"completed\":\n      case \"delivered\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"cancelled\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"pending\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"paid\": return \"bg-green-100 text-green-800 border-green-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const portalStats = {\n    totalCustomers: Array.isArray(customers) ? customers.length : 0,\n    activeToday: Math.floor((Array.isArray(customers) ? customers.length : 0) * 0.17),\n    totalAppointments: Array.isArray(appointments) ? appointments.length : 0,\n    activeRepairOrders: Array.isArray(repairOrders) ? repairOrders.filter((order: any) => \n      [\"created\", \"in_progress\", \"awaiting_parts\"].includes(order.status)\n    ).length : 0,\n    pendingInvoices: Array.isArray(invoices) ? invoices.filter((invoice: any) => \n      invoice.status === \"pending\"\n    ).length : 0,\n  };\n\n  const recentActivity = [\n    {\n      id: \"1\",\n      type: \"registration\",\n      description: \"New customer registration\",\n      details: \"System ready for new registrations\",\n      timestamp: new Date().toISOString(),\n      icon: \"fas fa-user-plus\",\n      color: \"text-green-600\",\n    },\n    {\n      id: \"2\", \n      type: \"appointment\",\n      description: \"Appointment system active\",\n      details: \"Online booking available\",\n      timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n      icon: \"fas fa-calendar\",\n      color: \"text-blue-600\",\n    },\n    {\n      id: \"3\",\n      type: \"payment\",\n      description: \"Payment system operational\",\n      details: \"Secure payment processing ready\",\n      timestamp: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\n      icon: \"fas fa-credit-card\",\n      color: \"text-purple-600\",\n    },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      \n      <main className=\"flex-1 flex flex-col min-h-screen\">\n        <header className=\"bg-card border-b border-border px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-foreground\" data-testid=\"text-customer-portal-title\">\n                Customer Portal Management\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Manage customer portal access, registrations, and self-service features with secure authentication.\n              </p>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                <i className=\"fas fa-shield-alt text-sm mr-1\"></i>\n                Portal Active\n                <i className=\"fas fa-check-circle text-sm ml-1\"></i>\n              </Badge>\n            </div>\n          </div>\n        </header>\n\n        <div className=\"flex-1 p-8 space-y-8\">\n          {/* Portal Statistics */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Registered Customers</p>\n                    <p className=\"text-2xl font-bold text-blue-600\" data-testid=\"metric-registered-customers\">\n                      {portalStats.totalCustomers}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Total registered users</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-users text-blue-600 text-xl\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Active Today</p>\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid=\"metric-active-today\">\n                      {portalStats.activeToday}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Online portal users</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-user-clock text-green-600 text-xl\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Portal Sessions</p>\n                    <p className=\"text-2xl font-bold text-purple-600\" data-testid=\"metric-portal-sessions\">\n                      {Math.floor(portalStats.totalCustomers * 1.3)}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">This month</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-chart-line text-purple-600 text-xl\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Avg Response Time</p>\n                    <p className=\"text-2xl font-bold text-green-600\" data-testid=\"metric-response-time\">0.8s</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Portal performance</p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-tachometer-alt text-green-600 text-xl\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Customer Registration and Portal Features */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Customer Registration */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Customer Registration</CardTitle>\n                <CardDescription>\n                  Help customers register for portal access with secure authentication\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"registration-email\">Customer Email</Label>\n                  <Input\n                    id=\"registration-email\"\n                    type=\"email\"\n                    placeholder=\"customer@example.com\"\n                    value={registrationEmail}\n                    onChange={(e) => setRegistrationEmail(e.target.value)}\n                    data-testid=\"input-registration-email\"\n                  />\n                </div>\n                \n                <Button \n                  onClick={handleCustomerRegistration}\n                  className=\"w-full\"\n                  data-testid=\"button-initiate-registration\"\n                >\n                  <i className=\"fas fa-user-plus mr-2\"></i>\n                  Initiate Customer Registration\n                </Button>\n\n                <div className=\"pt-4 border-t\">\n                  <h4 className=\"font-semibold mb-3\">Registration Features</h4>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>Secure email verification</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>Service history access</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>Online appointment booking</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <i className=\"fas fa-check text-green-600\"></i>\n                      <span>Invoice and payment tracking</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Portal Activity */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Portal Activity</CardTitle>\n                <CardDescription>\n                  Latest customer portal interactions and system status\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {recentActivity.map((activity) => (\n                    <div \n                      key={activity.id}\n                      className=\"flex items-center gap-3 p-3 bg-accent rounded-lg\"\n                      data-testid={`activity-${activity.type}`}\n                    >\n                      <div className=\"w-8 h-8 bg-background rounded-full flex items-center justify-center\">\n                        <i className={`${activity.icon} ${activity.color} text-sm`}></i>\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium\">{activity.description}</p>\n                        <p className=\"text-xs text-muted-foreground\">{activity.details}</p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          {new Date(activity.timestamp).toLocaleString()}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Portal Features Overview */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Customer Portal Features</CardTitle>\n              <CardDescription>\n                Overview of available self-service features for customers\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                {/* Service History */}\n                <div className=\"text-center p-6 border border-border rounded-lg hover:bg-accent transition-colors\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-history text-blue-600 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Service History</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Complete history of all services, repairs, and maintenance performed\n                  </p>\n                  <div className=\"mt-4\">\n                    <Badge className=\"bg-blue-100 text-blue-800 border-blue-200\">\n                      {portalStats.totalAppointments} Records\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Appointment Booking */}\n                <div className=\"text-center p-6 border border-border rounded-lg hover:bg-accent transition-colors\">\n                  <div className=\"w-16 h-16 bg-green-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-calendar-plus text-green-600 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Online Booking</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    24/7 online appointment scheduling with real-time availability\n                  </p>\n                  <div className=\"mt-4\">\n                    <Badge className=\"bg-green-100 text-green-800 border-green-200\">\n                      Available 24/7\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Payment & Invoices */}\n                <div className=\"text-center p-6 border border-border rounded-lg hover:bg-accent transition-colors\">\n                  <div className=\"w-16 h-16 bg-purple-100 rounded-lg flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-credit-card text-purple-600 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"font-semibold mb-2\">Payment Portal</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Secure online payments and invoice management with payment history\n                  </p>\n                  <div className=\"mt-4\">\n                    <Badge className=\"bg-purple-100 text-purple-800 border-purple-200\">\n                      Secure SSL\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* System Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Portal System Status</CardTitle>\n              <CardDescription>\n                Real-time status of customer portal services and infrastructure\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <i className=\"fas fa-server text-green-600 text-xl\"></i>\n                  <div>\n                    <p className=\"font-medium text-green-800\">Portal Server</p>\n                    <p className=\"text-sm text-green-600\">Operational</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <i className=\"fas fa-database text-green-600 text-xl\"></i>\n                  <div>\n                    <p className=\"font-medium text-green-800\">Database</p>\n                    <p className=\"text-sm text-green-600\">Connected</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <i className=\"fas fa-shield-alt text-green-600 text-xl\"></i>\n                  <div>\n                    <p className=\"font-medium text-green-800\">Authentication</p>\n                    <p className=\"text-sm text-green-600\">Secure</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-3 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                  <i className=\"fas fa-credit-card text-green-600 text-xl\"></i>\n                  <div>\n                    <p className=\"font-medium text-green-800\">Payment Gateway</p>\n                    <p className=\"text-sm text-green-600\">Active</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":18130},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"docker-start.sh":{"content":"#!/bin/bash\n\n# AutoFlow GMS - Docker Quick Start Script\n# This script helps you get started with Docker deployment\n\nset -e\n\necho \"🚀 AutoFlow GMS - Docker Setup\"\necho \"================================\"\necho \"\"\n\n# Check if Docker is installed\nif ! command -v docker &> /dev/null; then\n    echo \"❌ Docker is not installed. Please install Docker first.\"\n    echo \"   Visit: https://docs.docker.com/get-docker/\"\n    exit 1\nfi\n\n# Check if Docker Compose is installed\nif ! command -v docker-compose &> /dev/null; then\n    echo \"❌ Docker Compose is not installed. Please install Docker Compose.\"\n    echo \"   Visit: https://docs.docker.com/compose/install/\"\n    exit 1\nfi\n\necho \"✅ Docker and Docker Compose are installed\"\necho \"\"\n\n# Check if .env file exists\nif [ ! -f .env ]; then\n    echo \"📝 Creating .env file from example...\"\n    cp .env.example .env\n    \n    # Generate random SESSION_SECRET\n    if command -v openssl &> /dev/null; then\n        SESSION_SECRET=$(openssl rand -hex 32)\n        sed -i.bak \"s/your-super-secret-random-string-change-this-in-production/$SESSION_SECRET/\" .env\n        rm .env.bak 2>/dev/null || true\n        echo \"✅ Generated random SESSION_SECRET\"\n    else\n        echo \"⚠️  Please set SESSION_SECRET in .env file manually\"\n    fi\n    \n    echo \"⚠️  IMPORTANT: Edit .env file and set your database password!\"\n    echo \"   Default password 'changeme123' is NOT secure for production.\"\n    echo \"\"\n    read -p \"Press Enter to continue or Ctrl+C to exit and edit .env first...\"\nfi\n\necho \"\"\necho \"🐳 Starting Docker containers...\"\ndocker-compose up -d\n\necho \"\"\necho \"⏳ Waiting for database to be ready...\"\nsleep 5\n\n# Wait for postgres to be healthy\nuntil docker-compose exec -T postgres pg_isready -U autoflow_user &> /dev/null; do\n    echo \"   Waiting for PostgreSQL...\"\n    sleep 2\ndone\n\necho \"✅ Database is ready\"\necho \"\"\n\necho \"🗄️  Running database migrations...\"\ndocker-compose exec -T app npm run db:push\n\necho \"\"\necho \"================================\"\necho \"✅ AutoFlow GMS is now running!\"\necho \"================================\"\necho \"\"\necho \"📍 Application URL: http://localhost:5000\"\necho \"📍 PostgreSQL: localhost:5432\"\necho \"\"\necho \"🔧 Useful commands:\"\necho \"   View logs:        docker-compose logs -f\"\necho \"   Stop services:    docker-compose down\"\necho \"   Restart:          docker-compose restart\"\necho \"\"\necho \"📖 For more information, see README.Docker.md\"\necho \"\"\n","size_bytes":2450},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/job-board.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/sidebar\";\n\n// Job assignment form schema\nconst assignJobSchema = z.object({\n  repairOrderId: z.string().min(1, \"Please select a repair order\"),\n  technicianId: z.string().min(1, \"Please select a technician\"),\n  priority: z.enum([\"low\", \"normal\", \"high\", \"urgent\"]),\n  laborHours: z.string().min(1, \"Labor hours estimate is required\"),\n  notes: z.string().optional(),\n});\n\n// Update status form schema\nconst updateStatusSchema = z.object({\n  status: z.enum([\"created\", \"in_progress\", \"awaiting_parts\", \"completed\"]),\n  notes: z.string().optional(),\n});\n\nexport default function JobBoard() {\n  const [isAssignDialogOpen, setIsAssignDialogOpen] = useState(false);\n  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false);\n  const [isUpdateStatusDialogOpen, setIsUpdateStatusDialogOpen] = useState(false);\n  const [selectedJob, setSelectedJob] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Fetch repair orders for job assignment and display\n  const { data: repairOrders, isLoading: isLoadingRepairOrders } = useQuery({\n    queryKey: [\"/api/repair-orders\"],\n  });\n\n  // Fetch users for technician selection\n  const { data: users, isLoading: isLoadingUsers } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Form for job assignment\n  const assignForm = useForm<z.infer<typeof assignJobSchema>>({\n    resolver: zodResolver(assignJobSchema),\n    defaultValues: {\n      repairOrderId: \"\",\n      technicianId: \"\",\n      priority: \"normal\",\n      laborHours: \"\",\n      notes: \"\",\n    },\n  });\n\n  // Form for updating status\n  const statusForm = useForm<z.infer<typeof updateStatusSchema>>({\n    resolver: zodResolver(updateStatusSchema),\n    defaultValues: {\n      status: \"created\",\n      notes: \"\",\n    },\n  });\n\n  // Job assignment mutation (for now we'll update the repair order)\n  const assignJobMutation = useMutation({\n    mutationFn: async (jobData: z.infer<typeof assignJobSchema>) => {\n      // Update the repair order with technician assignment\n      return await apiRequest(\"PUT\", `/api/repair-orders/${jobData.repairOrderId}`, {\n        technicianId: jobData.technicianId,\n        priority: jobData.priority,\n        laborHours: jobData.laborHours, // Send as string, backend will handle conversion\n        diagnosis: jobData.notes || \"\",\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/repair-orders\"] });\n      setIsAssignDialogOpen(false);\n      assignForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Job assigned successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to assign job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async (statusData: z.infer<typeof updateStatusSchema>) => {\n      if (!selectedJob) throw new Error(\"No job selected\");\n      return await apiRequest(\"PUT\", `/api/repair-orders/${selectedJob.id}`, {\n        status: statusData.status,\n        diagnosis: statusData.notes || selectedJob.diagnosis,\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/repair-orders\"] });\n      setIsUpdateStatusDialogOpen(false);\n      setSelectedJob(null);\n      statusForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Status updated successfully\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAssignJob = () => {\n    setIsAssignDialogOpen(true);\n  };\n\n  const handleViewDetails = (job: any) => {\n    setSelectedJob(job);\n    setIsDetailsDialogOpen(true);\n  };\n\n  const handleUpdateStatus = (job: any) => {\n    setSelectedJob(job);\n    statusForm.reset({\n      status: job.status,\n      notes: \"\",\n    });\n    setIsUpdateStatusDialogOpen(true);\n  };\n\n  const onAssignSubmit = (data: z.infer<typeof assignJobSchema>) => {\n    assignJobMutation.mutate(data);\n  };\n\n  const onStatusSubmit = (data: z.infer<typeof updateStatusSchema>) => {\n    updateStatusMutation.mutate(data);\n  };\n  // Transform repair orders into job format for display\n  const jobs = Array.isArray(repairOrders) ? repairOrders.map((order: any) => {\n    // Build vehicle display string with proper fallback\n    const vehicleParts = [order.vehicle?.year, order.vehicle?.make, order.vehicle?.model].filter(Boolean);\n    const vehicle = vehicleParts.length > 0 ? vehicleParts.join(' ') : \"Unknown Vehicle\";\n    \n    // Build customer display string with proper fallback\n    const customerParts = [order.customer?.firstName, order.customer?.lastName].filter(Boolean);\n    const customer = customerParts.length > 0 ? customerParts.join(' ') : \"Unknown Customer\";\n    \n    return {\n      id: order.id,\n      title: order.description,\n      vehicle,\n      customer,\n      assignedTo: order.technician ? `${order.technician.firstName} ${order.technician.lastName}` : \"Unassigned\",\n      priority: order.priority || \"normal\",\n      status: order.status || \"created\",\n      estimatedTime: order.laborHours ? `${order.laborHours} hours` : \"Not set\",\n      dueDate: order.startedAt ? new Date(order.startedAt) : null\n    };\n  }) : [];\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"urgent\": return \"bg-red-100 text-red-800 border-red-200\";\n      case \"high\": return \"bg-orange-100 text-orange-800 border-orange-200\";\n      case \"normal\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"low\": return \"bg-green-100 text-green-800 border-green-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"completed\": return \"bg-green-100 text-green-800 border-green-200\";\n      case \"in_progress\": return \"bg-blue-100 text-blue-800 border-blue-200\";\n      case \"awaiting_parts\": return \"bg-yellow-100 text-yellow-800 border-yellow-200\";\n      case \"created\": return \"bg-gray-100 text-gray-800 border-gray-200\";\n      default: return \"bg-gray-100 text-gray-800 border-gray-200\";\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"title-job-board\">Job Board</h1>\n              <p className=\"text-muted-foreground\">Track and manage work assignments</p>\n            </div>\n            <Button onClick={handleAssignJob} data-testid=\"button-assign-job\">\n              <i className=\"fas fa-plus mr-2\"></i>\n              Assign Job\n            </Button>\n          </div>\n\n          <div className=\"grid gap-6\">\n            {isLoadingRepairOrders ? (\n              <div className=\"space-y-6\">\n                {[...Array(3)].map((_, i) => (\n                  <Card key={i} className=\"animate-pulse\">\n                    <CardHeader>\n                      <div className=\"h-6 bg-muted rounded w-1/3 mb-2\"></div>\n                      <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                        <div className=\"h-12 bg-muted rounded\"></div>\n                        <div className=\"h-12 bg-muted rounded\"></div>\n                        <div className=\"h-12 bg-muted rounded\"></div>\n                        <div className=\"h-12 bg-muted rounded\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : jobs.length === 0 ? (\n              <Card>\n                <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mb-4\">\n                    <i className=\"fas fa-clipboard-list text-3xl text-muted-foreground\"></i>\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-2\">No Jobs Available</h3>\n                  <p className=\"text-muted-foreground mb-4 text-center max-w-md\">\n                    There are currently no repair orders to display on the job board. Create repair orders to assign work to technicians.\n                  </p>\n                  <Button onClick={handleAssignJob}>\n                    <i className=\"fas fa-plus mr-2\"></i>\n                    Assign First Job\n                  </Button>\n                </CardContent>\n              </Card>\n            ) : (\n              jobs.map((job) => (\n                <Card key={job.id} className=\"hover:shadow-lg transition-shadow\" data-testid={`job-card-${job.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle className=\"text-lg\">{job.title}</CardTitle>\n                        <CardDescription>{job.vehicle} - {job.customer}</CardDescription>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Badge className={getPriorityColor(job.priority)}>\n                          {job.priority}\n                        </Badge>\n                        <Badge className={getStatusColor(job.status)}>\n                          {job.status.split('_').join(' ')}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Assigned To</p>\n                        <p className=\"font-medium\">{job.assignedTo}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Estimated Time</p>\n                        <p className=\"font-medium\">{job.estimatedTime}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm font-medium text-muted-foreground\">Due Date</p>\n                        <p className=\"font-medium\">{job.dueDate ? job.dueDate.toLocaleDateString() : \"Not scheduled\"}</p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => handleViewDetails(job)}\n                          data-testid={`button-view-${job.id}`}\n                        >\n                          View Details\n                        </Button>\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          onClick={() => handleUpdateStatus(job)}\n                          data-testid={`button-update-${job.id}`}\n                        >\n                          Update Status\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* Assign Job Dialog */}\n        <Dialog open={isAssignDialogOpen} onOpenChange={setIsAssignDialogOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Assign Job</DialogTitle>\n              <DialogDescription>\n                Assign a repair order to a technician for completion\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...assignForm}>\n              <form onSubmit={assignForm.handleSubmit(onAssignSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={assignForm.control}\n                    name=\"repairOrderId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Repair Order</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-repair-order\">\n                              <SelectValue placeholder=\"Select a repair order\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {isLoadingRepairOrders ? (\n                              <SelectItem value=\"loading\" disabled>Loading repair orders...</SelectItem>\n                            ) : Array.isArray(repairOrders) && repairOrders.length > 0 ? repairOrders.map((order: any) => (\n                              <SelectItem key={order.id} value={String(order.id)}>\n                                {order.orderNumber} - {order.description}\n                              </SelectItem>\n                            )) : (\n                              <SelectItem value=\"none\" disabled>No repair orders available</SelectItem>\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={assignForm.control}\n                    name=\"technicianId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Technician</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-technician\">\n                              <SelectValue placeholder=\"Select a technician\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {isLoadingUsers ? (\n                              <SelectItem value=\"loading\" disabled>Loading technicians...</SelectItem>\n                            ) : Array.isArray(users) && users.length > 0 ? users.map((user: any) => (\n                              <SelectItem key={user.id} value={String(user.id)}>\n                                {user.firstName} {user.lastName} ({user.role})\n                              </SelectItem>\n                            )) : (\n                              <SelectItem value=\"none\" disabled>No technicians available</SelectItem>\n                            )}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={assignForm.control}\n                    name=\"priority\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Priority</FormLabel>\n                        <Select onValueChange={field.onChange} value={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-priority\">\n                              <SelectValue placeholder=\"Select priority\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"low\">Low</SelectItem>\n                            <SelectItem value=\"normal\">Normal</SelectItem>\n                            <SelectItem value=\"high\">High</SelectItem>\n                            <SelectItem value=\"urgent\">Urgent</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={assignForm.control}\n                    name=\"laborHours\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Labor Hours</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            step=\"0.5\"\n                            placeholder=\"e.g., 2.5\" \n                            {...field}\n                            data-testid=\"input-labor-hours\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={assignForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Additional Notes</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Any additional notes or instructions for the technician...\" \n                          {...field}\n                          data-testid=\"textarea-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsAssignDialogOpen(false)}\n                    data-testid=\"button-cancel-assign\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={assignJobMutation.isPending}\n                    data-testid=\"button-submit-assign-job\"\n                  >\n                    {assignJobMutation.isPending ? \"Assigning...\" : \"Assign Job\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* View Details Dialog */}\n        <Dialog open={isDetailsDialogOpen} onOpenChange={setIsDetailsDialogOpen}>\n          <DialogContent className=\"sm:max-w-[700px]\">\n            <DialogHeader>\n              <DialogTitle>Job Details</DialogTitle>\n              <DialogDescription>\n                Complete information about this repair order\n              </DialogDescription>\n            </DialogHeader>\n            \n            {selectedJob && (\n              <div className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Customer</p>\n                    <p className=\"text-lg font-semibold\">{selectedJob.customer}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Vehicle</p>\n                    <p className=\"text-lg font-semibold\">{selectedJob.vehicle}</p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                    <Badge className={getStatusColor(selectedJob.status)}>\n                      {selectedJob.status.split('_').join(' ')}\n                    </Badge>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Priority</p>\n                    <Badge className={getPriorityColor(selectedJob.priority)}>\n                      {selectedJob.priority}\n                    </Badge>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Assigned To</p>\n                    <p className=\"font-medium\">{selectedJob.assignedTo}</p>\n                  </div>\n                </div>\n\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground mb-2\">Description</p>\n                  <p className=\"p-3 bg-muted rounded-md\">{selectedJob.title}</p>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Estimated Time</p>\n                    <p className=\"font-medium\">{selectedJob.estimatedTime}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Due Date</p>\n                    <p className=\"font-medium\">{selectedJob.dueDate ? selectedJob.dueDate.toLocaleDateString() : \"Not scheduled\"}</p>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end\">\n                  <Button onClick={() => setIsDetailsDialogOpen(false)}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Update Status Dialog */}\n        <Dialog open={isUpdateStatusDialogOpen} onOpenChange={setIsUpdateStatusDialogOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Update Job Status</DialogTitle>\n              <DialogDescription>\n                Update the status and add notes for this job\n              </DialogDescription>\n            </DialogHeader>\n            \n            <Form {...statusForm}>\n              <form onSubmit={statusForm.handleSubmit(onStatusSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={statusForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"created\">Created</SelectItem>\n                          <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                          <SelectItem value=\"awaiting_parts\">Awaiting Parts</SelectItem>\n                          <SelectItem value=\"completed\">Completed</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={statusForm.control}\n                  name=\"notes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Notes (Optional)</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Add any notes about this status update...\" \n                          {...field}\n                          data-testid=\"textarea-status-notes\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsUpdateStatusDialogOpen(false)}\n                    data-testid=\"button-cancel-status\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={updateStatusMutation.isPending}\n                    data-testid=\"button-submit-status\"\n                  >\n                    {updateStatusMutation.isPending ? \"Updating...\" : \"Update Status\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}","size_bytes":25729},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"client/src/pages/messaging.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport Sidebar from \"@/components/sidebar\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Conversation, Message } from \"@shared/schema\";\nimport { MessageSquare, Send, Phone } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function Messaging() {\n  const { toast } = useToast();\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n  const [newPhoneNumber, setNewPhoneNumber] = useState(\"\");\n  const [messageText, setMessageText] = useState(\"\");\n\n  // Fetch all conversations\n  const { data: conversations = [], isLoading: conversationsLoading } = useQuery<Conversation[]>({\n    queryKey: ['/api/conversations'],\n  });\n\n  // Fetch messages for selected conversation\n  const { data: messages = [], isLoading: messagesLoading } = useQuery<Message[]>({\n    queryKey: ['/api/conversations', selectedConversation, 'messages'],\n    enabled: !!selectedConversation,\n  });\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: { content: string; direction: 'outbound'; conversationId?: string; phoneNumber?: string }) => {\n      if (data.conversationId) {\n        // Send to existing conversation\n        return await apiRequest('POST', `/api/conversations/${data.conversationId}/messages`, {\n          content: data.content,\n          direction: data.direction,\n        });\n      } else {\n        // Create new conversation first, then send message\n        const conversation = await apiRequest('POST', '/api/conversations', {\n          customerName: data.phoneNumber || 'Unknown',\n          phoneNumber: data.phoneNumber,\n          lastMessage: data.content,\n          lastMessageAt: new Date(),\n          unreadCount: 0,\n        });\n        \n        // Then send the message\n        return await apiRequest('POST', `/api/conversations/${conversation.id}/messages`, {\n          content: data.content,\n          direction: data.direction,\n        });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n      if (selectedConversation) {\n        queryClient.invalidateQueries({ queryKey: ['/api/conversations', selectedConversation, 'messages'] });\n      }\n      setMessageText(\"\");\n      setNewPhoneNumber(\"\");\n      toast({\n        title: \"Message sent\",\n        description: \"Your message has been sent successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Mark conversation as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (conversationId: string) => {\n      return await apiRequest('PATCH', `/api/conversations/${conversationId}/read-all`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/conversations'] });\n    },\n  });\n\n  const handleSelectConversation = (conversationId: string) => {\n    setSelectedConversation(conversationId);\n    // Mark messages as read when conversation is opened\n    const conversation = conversations.find(c => c.id === conversationId);\n    if (conversation && conversation.unreadCount > 0) {\n      markAsReadMutation.mutate(conversationId);\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (!messageText.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a message.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedConversation && !newPhoneNumber) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a conversation or enter a phone number.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    sendMessageMutation.mutate({\n      content: messageText,\n      direction: 'outbound',\n      conversationId: selectedConversation || undefined,\n      phoneNumber: newPhoneNumber || undefined,\n    });\n  };\n\n  const selectedConversationData = conversations.find(c => c.id === selectedConversation);\n\n  return (\n    <div className=\"flex h-screen bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-foreground flex items-center gap-2\" data-testid=\"title-messaging\">\n                <MessageSquare className=\"h-8 w-8\" />\n                Two-Way Texting\n              </h1>\n              <p className=\"text-muted-foreground\">Communicate directly with customers via SMS</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-200px)]\">\n            {/* Conversations List */}\n            <Card className=\"lg:col-span-1\">\n              <CardHeader>\n                <CardTitle>Conversations</CardTitle>\n                <CardDescription>Active customer messaging threads</CardDescription>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <ScrollArea className=\"h-[calc(100vh-320px)]\">\n                  {conversationsLoading ? (\n                    <div className=\"space-y-4 p-4\">\n                      {[1, 2, 3].map((i) => (\n                        <div key={i} className=\"space-y-2\">\n                          <Skeleton className=\"h-12 w-full\" />\n                        </div>\n                      ))}\n                    </div>\n                  ) : conversations.length === 0 ? (\n                    <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n                      <MessageSquare className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                      <p className=\"text-muted-foreground\">No conversations yet</p>\n                      <p className=\"text-sm text-muted-foreground\">Send a message to start a conversation</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-1\">\n                      {conversations.map((conversation) => (\n                        <div\n                          key={conversation.id}\n                          onClick={() => handleSelectConversation(conversation.id)}\n                          className={`flex items-center justify-between p-4 hover:bg-accent cursor-pointer transition-colors border-b ${\n                            selectedConversation === conversation.id ? 'bg-accent' : ''\n                          }`}\n                          data-testid={`conversation-${conversation.id}`}\n                        >\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-1\">\n                              <h4 className=\"font-medium truncate\">{conversation.customerName}</h4>\n                              {conversation.unreadCount > 0 && (\n                                <Badge className=\"bg-red-100 text-red-800 text-xs\" data-testid={`badge-unread-${conversation.id}`}>\n                                  {conversation.unreadCount}\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-1\">\n                              <Phone className=\"h-3 w-3\" />\n                              <span>{conversation.phoneNumber}</span>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground truncate\" data-testid={`text-last-message-${conversation.id}`}>\n                              {conversation.lastMessage}\n                            </p>\n                            {conversation.lastMessageAt && (\n                              <p className=\"text-xs text-muted-foreground mt-1\">\n                                {formatDistanceToNow(new Date(conversation.lastMessageAt), { addSuffix: true })}\n                              </p>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </ScrollArea>\n              </CardContent>\n            </Card>\n\n            {/* Messages View / Composer */}\n            <Card className=\"lg:col-span-2 flex flex-col\">\n              {selectedConversation ? (\n                <>\n                  <CardHeader className=\"border-b\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <CardTitle>{selectedConversationData?.customerName}</CardTitle>\n                        <CardDescription className=\"flex items-center gap-2\">\n                          <Phone className=\"h-3 w-3\" />\n                          {selectedConversationData?.phoneNumber}\n                        </CardDescription>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setSelectedConversation(null)}\n                        data-testid=\"button-close-conversation\"\n                      >\n                        Close\n                      </Button>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"flex-1 flex flex-col p-0\">\n                    {/* Messages */}\n                    <ScrollArea className=\"flex-1 p-4\">\n                      {messagesLoading ? (\n                        <div className=\"space-y-4\">\n                          {[1, 2, 3].map((i) => (\n                            <Skeleton key={i} className=\"h-16 w-3/4\" />\n                          ))}\n                        </div>\n                      ) : messages.length === 0 ? (\n                        <div className=\"flex items-center justify-center h-full\">\n                          <p className=\"text-muted-foreground\">No messages yet. Start the conversation!</p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {messages.map((message) => (\n                            <div\n                              key={message.id}\n                              className={`flex ${message.direction === 'outbound' ? 'justify-end' : 'justify-start'}`}\n                              data-testid={`message-${message.id}`}\n                            >\n                              <div\n                                className={`max-w-[70%] rounded-lg p-3 ${\n                                  message.direction === 'outbound'\n                                    ? 'bg-primary text-primary-foreground'\n                                    : 'bg-muted'\n                                }`}\n                              >\n                                <p className=\"text-sm\">{message.content}</p>\n                                <p className=\"text-xs mt-1 opacity-70\">\n                                  {formatDistanceToNow(new Date(message.createdAt), { addSuffix: true })}\n                                </p>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </ScrollArea>\n\n                    {/* Message Input */}\n                    <div className=\"border-t p-4\">\n                      <div className=\"flex gap-2\">\n                        <Textarea\n                          placeholder=\"Type your message...\"\n                          value={messageText}\n                          onChange={(e) => setMessageText(e.target.value)}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter' && !e.shiftKey) {\n                              e.preventDefault();\n                              handleSendMessage();\n                            }\n                          }}\n                          className=\"flex-1\"\n                          rows={2}\n                          data-testid=\"textarea-message\"\n                        />\n                        <Button\n                          onClick={handleSendMessage}\n                          disabled={sendMessageMutation.isPending || !messageText.trim()}\n                          data-testid=\"button-send-message\"\n                        >\n                          <Send className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <div className=\"flex justify-between items-center mt-2\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          {messageText.length} / 160 characters\n                        </span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </>\n              ) : (\n                <>\n                  <CardHeader>\n                    <CardTitle>Send New Message</CardTitle>\n                    <CardDescription>Start a new conversation with a customer</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"text-sm font-medium\">Phone Number</label>\n                        <Input\n                          placeholder=\"(555) 123-4567\"\n                          value={newPhoneNumber}\n                          onChange={(e) => setNewPhoneNumber(e.target.value)}\n                          data-testid=\"input-phone-number\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium\">Message</label>\n                        <Textarea\n                          placeholder=\"Type your message here...\"\n                          rows={4}\n                          value={messageText}\n                          onChange={(e) => setMessageText(e.target.value)}\n                          data-testid=\"textarea-new-message\"\n                        />\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm text-muted-foreground\">\n                          {messageText.length} / 160 characters\n                        </span>\n                        <Button\n                          onClick={handleSendMessage}\n                          disabled={sendMessageMutation.isPending || !messageText.trim() || !newPhoneNumber.trim()}\n                          data-testid=\"button-send-new-message\"\n                        >\n                          <Send className=\"h-4 w-4 mr-2\" />\n                          Send Message\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </>\n              )}\n            </Card>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":15519},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157}},"version":2}